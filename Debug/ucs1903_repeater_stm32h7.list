
ucs1903_repeater_stm32h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009484  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800971c  0800971c  0001971c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800975c  0800975c  0001975c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009764  08009764  00019764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009768  08009768  00019768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800976c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000ccd0  24000014  08009780  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400cce4  08009780  0002cce4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001535f  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002524  00000000  00000000  000353e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001058  00000000  00000000  00037908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000cdd  00000000  00000000  00038960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036a55  00000000  00000000  0003963d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016abc  00000000  00000000  00070092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00161c31  00000000  00000000  00086b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000045d4  00000000  00000000  001e8780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  001ecd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009704 	.word	0x08009704

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08009704 	.word	0x08009704

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <WS2812_Send>:

uint8_t i = 0;

// generate the PWM duty to drive the UCS1903
void WS2812_Send (void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	uint16_t indx=0;
 80005da:	2300      	movs	r3, #0
 80005dc:	80fb      	strh	r3, [r7, #6]
	uint16_t m = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	80bb      	strh	r3, [r7, #4]
	int8_t j = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	70fb      	strb	r3, [r7, #3]

	if (datasentflag == 1) // Finished transmitting the data.
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <WS2812_Send+0xbc>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d14c      	bne.n	8000688 <WS2812_Send+0xb4>
	{

		datasentflag = 0; // Clear the flag
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <WS2812_Send+0xbc>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]

		for (m= 0; m<LED_NUMBER; m++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	80bb      	strh	r3, [r7, #4]
 80005f8:	e02a      	b.n	8000650 <WS2812_Send+0x7c>
		{
				for (j=23; j>=0; j--)
 80005fa:	2317      	movs	r3, #23
 80005fc:	70fb      	strb	r3, [r7, #3]
 80005fe:	e020      	b.n	8000642 <WS2812_Send+0x6e>
				{
					if (led_data[m]&(1<<j))
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	4a24      	ldr	r2, [pc, #144]	; (8000694 <WS2812_Send+0xc0>)
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800060c:	2101      	movs	r1, #1
 800060e:	fa01 f202 	lsl.w	r2, r1, r2
 8000612:	4013      	ands	r3, r2
 8000614:	2b00      	cmp	r3, #0
 8000616:	d006      	beq.n	8000626 <WS2812_Send+0x52>
					{
						pwmData[indx] = 336;  // This is the PWM Duty to send the logic 1 to the UCS1903
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	4a1f      	ldr	r2, [pc, #124]	; (8000698 <WS2812_Send+0xc4>)
 800061c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8000620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000624:	e004      	b.n	8000630 <WS2812_Send+0x5c>
					}

					else{
						pwmData[indx] = 84;  // This is the PWM Duty to send the logic 0 to the UCS1903
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <WS2812_Send+0xc4>)
 800062a:	2154      	movs	r1, #84	; 0x54
 800062c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}

					indx++;
 8000630:	88fb      	ldrh	r3, [r7, #6]
 8000632:	3301      	adds	r3, #1
 8000634:	80fb      	strh	r3, [r7, #6]
				for (j=23; j>=0; j--)
 8000636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	3b01      	subs	r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	70fb      	strb	r3, [r7, #3]
 8000642:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000646:	2b00      	cmp	r3, #0
 8000648:	dada      	bge.n	8000600 <WS2812_Send+0x2c>
		for (m= 0; m<LED_NUMBER; m++)
 800064a:	88bb      	ldrh	r3, [r7, #4]
 800064c:	3301      	adds	r3, #1
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <WS2812_Send+0xc8>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	88ba      	ldrh	r2, [r7, #4]
 8000656:	429a      	cmp	r2, r3
 8000658:	d3cf      	bcc.n	80005fa <WS2812_Send+0x26>
				}

		}

		for (m=0; m<10; m++)
 800065a:	2300      	movs	r3, #0
 800065c:	80bb      	strh	r3, [r7, #4]
 800065e:	e00a      	b.n	8000676 <WS2812_Send+0xa2>
		{
			pwmData[indx] = 0;
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <WS2812_Send+0xc4>)
 8000664:	2100      	movs	r1, #0
 8000666:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	3301      	adds	r3, #1
 800066e:	80fb      	strh	r3, [r7, #6]
		for (m=0; m<10; m++)
 8000670:	88bb      	ldrh	r3, [r7, #4]
 8000672:	3301      	adds	r3, #1
 8000674:	80bb      	strh	r3, [r7, #4]
 8000676:	88bb      	ldrh	r3, [r7, #4]
 8000678:	2b09      	cmp	r3, #9
 800067a:	d9f1      	bls.n	8000660 <WS2812_Send+0x8c>
		}

		// Start transmit
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4a06      	ldr	r2, [pc, #24]	; (8000698 <WS2812_Send+0xc4>)
 8000680:	2100      	movs	r1, #0
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <WS2812_Send+0xcc>)
 8000684:	f006 fb5e 	bl	8006d44 <HAL_TIM_PWM_Start_DMA>
	}
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	24000000 	.word	0x24000000
 8000694:	2400bd3c 	.word	0x2400bd3c
 8000698:	240001d8 	.word	0x240001d8
 800069c:	240001d4 	.word	0x240001d4
 80006a0:	24000030 	.word	0x24000030

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f000 fd40 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f856 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f000 fa6a 	bl	8000b88 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b4:	f000 fa48 	bl	8000b48 <MX_DMA_Init>
  MX_TIM1_Init();
 80006b8:	f000 f900 	bl	80008bc <MX_TIM1_Init>
  MX_TIM2_Init();
 80006bc:	f000 f9aa 	bl	8000a14 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80006c0:	f000 f9f6 	bl	8000ab0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80006c4:	481c      	ldr	r0, [pc, #112]	; (8000738 <main+0x94>)
 80006c6:	f006 fa6b 	bl	8006ba0 <HAL_TIM_Base_Start>
  // Initiate the LED_NUMBER, This is the real amount of the LEDs connected to the board and updated real-time.
   LED_NUMBER = MAX_LED;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <main+0x98>)
 80006cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d0:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (captured_flag == 1){
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <main+0x9c>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d112      	bne.n	8000700 <main+0x5c>
	  	//filter();
	  	if (ignore_flag == 0){
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <main+0xa0>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10b      	bne.n	80006fa <main+0x56>
	  		//print the captured LED data
	  		HAL_UART_Transmit(&huart1, (uint8_t*)led_data, (LED_NUMBER * 4) ,HAL_MAX_DELAY);
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <main+0x98>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	4916      	ldr	r1, [pc, #88]	; (8000748 <main+0xa4>)
 80006f0:	4816      	ldr	r0, [pc, #88]	; (800074c <main+0xa8>)
 80006f2:	f007 fec7 	bl	8008484 <HAL_UART_Transmit>
	  		// Drive UCS1903 and Lights
	  		WS2812_Send();
 80006f6:	f7ff ff6d 	bl	80005d4 <WS2812_Send>
	  	}
	  	captured_flag = 0;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <main+0x9c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
	  }

	  // Detect the LED number automatically. If the reset signal is detected while the LEDs are working(streaming_flag==1),
	  // Store LED number and reset the count variable, and set the captured_flag to drive the UCS1903 connected to MCU

	  if ((streaming_flag == 1) && (TIM2->CNT > 30)) { //if the reset code is detected
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <main+0xac>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d1e4      	bne.n	80006d2 <main+0x2e>
 8000708:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800070c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070e:	2b1e      	cmp	r3, #30
 8000710:	d9df      	bls.n	80006d2 <main+0x2e>
	  	streaming_flag  = 0;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <main+0xac>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
	  	LED_NUMBER = cnt / 24;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <main+0xb0>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <main+0xb4>)
 800071e:	fba2 2303 	umull	r2, r3, r2, r3
 8000722:	091b      	lsrs	r3, r3, #4
 8000724:	b29a      	uxth	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <main+0x98>)
 8000728:	801a      	strh	r2, [r3, #0]
	  	cnt = 0;
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <main+0xb0>)
 800072c:	2200      	movs	r2, #0
 800072e:	801a      	strh	r2, [r3, #0]
	  	captured_flag = 1;
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <main+0x9c>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
	  if (captured_flag == 1){
 8000736:	e7cc      	b.n	80006d2 <main+0x2e>
 8000738:	2400007c 	.word	0x2400007c
 800073c:	240001d4 	.word	0x240001d4
 8000740:	2400ccdb 	.word	0x2400ccdb
 8000744:	2400ccda 	.word	0x2400ccda
 8000748:	2400bd3c 	.word	0x2400bd3c
 800074c:	24000140 	.word	0x24000140
 8000750:	2400ccdc 	.word	0x2400ccdc
 8000754:	240001d6 	.word	0x240001d6
 8000758:	aaaaaaab 	.word	0xaaaaaaab

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b09e      	sub	sp, #120	; 0x78
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000766:	224c      	movs	r2, #76	; 0x4c
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f008 ff9e 	bl	80096ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2220      	movs	r2, #32
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f008 ff97 	bl	80096ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800077e:	2002      	movs	r0, #2
 8000780:	f003 fb6a 	bl	8003e58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b49      	ldr	r3, [pc, #292]	; (80008b0 <SystemClock_Config+0x154>)
 800078a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078c:	4a48      	ldr	r2, [pc, #288]	; (80008b0 <SystemClock_Config+0x154>)
 800078e:	f023 0301 	bic.w	r3, r3, #1
 8000792:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000794:	4b46      	ldr	r3, [pc, #280]	; (80008b0 <SystemClock_Config+0x154>)
 8000796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b45      	ldr	r3, [pc, #276]	; (80008b4 <SystemClock_Config+0x158>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a44      	ldr	r2, [pc, #272]	; (80008b4 <SystemClock_Config+0x158>)
 80007a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a8:	6193      	str	r3, [r2, #24]
 80007aa:	4b42      	ldr	r3, [pc, #264]	; (80008b4 <SystemClock_Config+0x158>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007b6:	bf00      	nop
 80007b8:	4b3e      	ldr	r3, [pc, #248]	; (80008b4 <SystemClock_Config+0x158>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007c4:	d1f8      	bne.n	80007b8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	4b3c      	ldr	r3, [pc, #240]	; (80008b8 <SystemClock_Config+0x15c>)
 80007c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007cc:	4a3a      	ldr	r2, [pc, #232]	; (80008b8 <SystemClock_Config+0x15c>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007d6:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <SystemClock_Config+0x15c>)
 80007d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007dc:	f003 0302 	and.w	r3, r3, #2
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007e4:	2300      	movs	r3, #0
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b32      	ldr	r3, [pc, #200]	; (80008b4 <SystemClock_Config+0x158>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a31      	ldr	r2, [pc, #196]	; (80008b4 <SystemClock_Config+0x158>)
 80007ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <SystemClock_Config+0x158>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <SystemClock_Config+0x154>)
 8000800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000802:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <SystemClock_Config+0x154>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	62d3      	str	r3, [r2, #44]	; 0x2c
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <SystemClock_Config+0x154>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000816:	bf00      	nop
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <SystemClock_Config+0x158>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000824:	d1f8      	bne.n	8000818 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000826:	2310      	movs	r3, #16
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800082e:	2320      	movs	r3, #32
 8000830:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000836:	2301      	movs	r3, #1
 8000838:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 800083e:	23f0      	movs	r3, #240	; 0xf0
 8000840:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800084e:	2308      	movs	r3, #8
 8000850:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000852:	2300      	movs	r3, #0
 8000854:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085e:	4618      	mov	r0, r3
 8000860:	f003 fb34 	bl	8003ecc <HAL_RCC_OscConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x112>
  {
    Error_Handler();
 800086a:	f000 fa43 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	233f      	movs	r3, #63	; 0x3f
 8000870:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	2303      	movs	r3, #3
 8000874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800087a:	2308      	movs	r3, #8
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2104      	movs	r1, #4
 8000896:	4618      	mov	r0, r3
 8000898:	f003 ff72 	bl	8004780 <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80008a2:	f000 fa27 	bl	8000cf4 <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3778      	adds	r7, #120	; 0x78
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	58000400 	.word	0x58000400
 80008b4:	58024800 	.word	0x58024800
 80008b8:	58024400 	.word	0x58024400

080008bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09a      	sub	sp, #104	; 0x68
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
 80008ec:	615a      	str	r2, [r3, #20]
 80008ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	222c      	movs	r2, #44	; 0x2c
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f008 fed8 	bl	80096ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008fc:	4b43      	ldr	r3, [pc, #268]	; (8000a0c <MX_TIM1_Init+0x150>)
 80008fe:	4a44      	ldr	r2, [pc, #272]	; (8000a10 <MX_TIM1_Init+0x154>)
 8000900:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000902:	4b42      	ldr	r3, [pc, #264]	; (8000a0c <MX_TIM1_Init+0x150>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b40      	ldr	r3, [pc, #256]	; (8000a0c <MX_TIM1_Init+0x150>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 600-1;
 800090e:	4b3f      	ldr	r3, [pc, #252]	; (8000a0c <MX_TIM1_Init+0x150>)
 8000910:	f240 2257 	movw	r2, #599	; 0x257
 8000914:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b3d      	ldr	r3, [pc, #244]	; (8000a0c <MX_TIM1_Init+0x150>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800091c:	4b3b      	ldr	r3, [pc, #236]	; (8000a0c <MX_TIM1_Init+0x150>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b3a      	ldr	r3, [pc, #232]	; (8000a0c <MX_TIM1_Init+0x150>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000928:	4838      	ldr	r0, [pc, #224]	; (8000a0c <MX_TIM1_Init+0x150>)
 800092a:	f006 f8e1 	bl	8006af0 <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000934:	f000 f9de 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000942:	4619      	mov	r1, r3
 8000944:	4831      	ldr	r0, [pc, #196]	; (8000a0c <MX_TIM1_Init+0x150>)
 8000946:	f006 fe2f 	bl	80075a8 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000950:	f000 f9d0 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000954:	482d      	ldr	r0, [pc, #180]	; (8000a0c <MX_TIM1_Init+0x150>)
 8000956:	f006 f993 	bl	8006c80 <HAL_TIM_PWM_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000960:	f000 f9c8 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000970:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000974:	4619      	mov	r1, r3
 8000976:	4825      	ldr	r0, [pc, #148]	; (8000a0c <MX_TIM1_Init+0x150>)
 8000978:	f007 fc28 	bl	80081cc <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000982:	f000 f9b7 	bl	8000cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000986:	2360      	movs	r3, #96	; 0x60
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098e:	2300      	movs	r3, #0
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000992:	2300      	movs	r3, #0
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009a6:	2200      	movs	r2, #0
 80009a8:	4619      	mov	r1, r3
 80009aa:	4818      	ldr	r0, [pc, #96]	; (8000a0c <MX_TIM1_Init+0x150>)
 80009ac:	f006 fce8 	bl	8007380 <HAL_TIM_PWM_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80009b6:	f000 f99d 	bl	8000cf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <MX_TIM1_Init+0x150>)
 80009f0:	f007 fc7a 	bl	80082e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80009fa:	f000 f97b 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009fe:	4803      	ldr	r0, [pc, #12]	; (8000a0c <MX_TIM1_Init+0x150>)
 8000a00:	f000 fa00 	bl	8000e04 <HAL_TIM_MspPostInit>

}
 8000a04:	bf00      	nop
 8000a06:	3768      	adds	r7, #104	; 0x68
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	24000030 	.word	0x24000030
 8000a10:	40010000 	.word	0x40010000

08000a14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_TIM2_Init+0x98>)
 8000a34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_TIM2_Init+0x98>)
 8000a3c:	22ef      	movs	r2, #239	; 0xef
 8000a3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_TIM2_Init+0x98>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_TIM2_Init+0x98>)
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_TIM2_Init+0x98>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_TIM2_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a5a:	4814      	ldr	r0, [pc, #80]	; (8000aac <MX_TIM2_Init+0x98>)
 8000a5c:	f006 f848 	bl	8006af0 <HAL_TIM_Base_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a66:	f000 f945 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4619      	mov	r1, r3
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_TIM2_Init+0x98>)
 8000a78:	f006 fd96 	bl	80075a8 <HAL_TIM_ConfigClockSource>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a82:	f000 f937 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_TIM2_Init+0x98>)
 8000a94:	f007 fb9a 	bl	80081cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a9e:	f000 f929 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	3720      	adds	r7, #32
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2400007c 	.word	0x2400007c

08000ab0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000ab6:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af8:	4811      	ldr	r0, [pc, #68]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000afa:	f007 fc73 	bl	80083e4 <HAL_UART_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b04:	f000 f8f6 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000b0c:	f008 fd03 	bl	8009516 <HAL_UARTEx_SetTxFifoThreshold>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b16:	f000 f8ed 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000b1e:	f008 fd38 	bl	8009592 <HAL_UARTEx_SetRxFifoThreshold>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b28:	f000 f8e4 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000b2e:	f008 fcb9 	bl	80094a4 <HAL_UARTEx_DisableFifoMode>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b38:	f000 f8dc 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	24000140 	.word	0x24000140
 8000b44:	40011000 	.word	0x40011000

08000b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <MX_DMA_Init+0x3c>)
 8000b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <MX_DMA_Init+0x3c>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_DMA_Init+0x3c>)
 8000b60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2039      	movs	r0, #57	; 0x39
 8000b72:	f000 fc54 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b76:	2039      	movs	r0, #57	; 0x39
 8000b78:	f000 fc6b 	bl	8001452 <HAL_NVIC_EnableIRQ>

}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	58024400 	.word	0x58024400

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_GPIO_Init+0x84>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <MX_GPIO_Init+0x84>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_GPIO_Init+0x84>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_GPIO_Init+0x84>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <MX_GPIO_Init+0x84>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_GPIO_Init+0x84>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	4619      	mov	r1, r3
 8000bee:	4808      	ldr	r0, [pc, #32]	; (8000c10 <MX_GPIO_Init+0x88>)
 8000bf0:	f002 ff68 	bl	8003ac4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2006      	movs	r0, #6
 8000bfa:	f000 fc10 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bfe:	2006      	movs	r0, #6
 8000c00:	f000 fc27 	bl	8001452 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	58024400 	.word	0x58024400
 8000c10:	58020400 	.word	0x58020400

08000c14 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80fb      	strh	r3, [r7, #6]
	// Detect the input signal from UCS1903
	if(GPIO_Pin == GPIO_PIN_0){
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d141      	bne.n	8000ca8 <HAL_GPIO_EXTI_Callback+0x94>
		// Initiate the TIM2 counter to calculate the time interval between PWM Color signals
		TIM2->CNT = 0;
 8000c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c28:	2200      	movs	r2, #0
 8000c2a:	625a      	str	r2, [r3, #36]	; 0x24
		// Set the LED streaming flag
		streaming_flag = 1;
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
		// LED index in the LED data array. The LED data is 24-bit value that indicates RGB values(8-bit x 3 colors).
		// One PWM pulse indicates one color bit.
		led_count = cnt / 24;
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c38:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c42:	801a      	strh	r2, [r3, #0]

		// if 24-bit color data is fully stored in led_data[led_count], initiate the led_data.
		if (cnt % 24 == 0){
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c46:	881a      	ldrh	r2, [r3, #0]
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000c4e:	0919      	lsrs	r1, r3, #4
 8000c50:	460b      	mov	r3, r1
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	440b      	add	r3, r1
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d106      	bne.n	8000c6e <HAL_GPIO_EXTI_Callback+0x5a>
			led_data[led_count] = 0;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		}
		// Store color bits to  led_data[led_count]
		while(TIM2->CNT == 0);
 8000c6e:	bf00      	nop
 8000c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0fa      	beq.n	8000c70 <HAL_GPIO_EXTI_Callback+0x5c>

		led_data[led_count] = (led_data[led_count] << 1) + (GPIOB->IDR & 0x00000001);
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c86:	005a      	lsls	r2, r3, #1
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	490b      	ldr	r1, [pc, #44]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c92:	8809      	ldrh	r1, [r1, #0]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//increase counter
		cnt = cnt + 1;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000ca6:	801a      	strh	r2, [r3, #0]
	}
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	2400ccdc 	.word	0x2400ccdc
 8000cb8:	240001d6 	.word	0x240001d6
 8000cbc:	aaaaaaab 	.word	0xaaaaaaab
 8000cc0:	2400ccd8 	.word	0x2400ccd8
 8000cc4:	2400bd3c 	.word	0x2400bd3c
 8000cc8:	58020400 	.word	0x58020400

08000ccc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000cd8:	f006 fa5a 	bl	8007190 <HAL_TIM_PWM_Stop_DMA>

	// set the flag when all of PWM signal is output
	datasentflag=1;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24000030 	.word	0x24000030
 8000cf0:	24000000 	.word	0x24000000

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_MspInit+0x30>)
 8000d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d0c:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <HAL_MspInit+0x30>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_MspInit+0x30>)
 8000d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	58024400 	.word	0x58024400

08000d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a2c      	ldr	r2, [pc, #176]	; (8000df4 <HAL_TIM_Base_MspInit+0xc0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d13e      	bne.n	8000dc4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d46:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <HAL_TIM_Base_MspInit+0xc4>)
 8000d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d4c:	4a2a      	ldr	r2, [pc, #168]	; (8000df8 <HAL_TIM_Base_MspInit+0xc4>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d56:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <HAL_TIM_Base_MspInit+0xc4>)
 8000d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <HAL_TIM_Base_MspInit+0xc8>)
 8000d66:	4a26      	ldr	r2, [pc, #152]	; (8000e00 <HAL_TIM_Base_MspInit+0xcc>)
 8000d68:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000d6a:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <HAL_TIM_Base_MspInit+0xc8>)
 8000d6c:	220b      	movs	r2, #11
 8000d6e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <HAL_TIM_Base_MspInit+0xc8>)
 8000d72:	2240      	movs	r2, #64	; 0x40
 8000d74:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <HAL_TIM_Base_MspInit+0xc8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <HAL_TIM_Base_MspInit+0xc8>)
 8000d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d82:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <HAL_TIM_Base_MspInit+0xc8>)
 8000d86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d8a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <HAL_TIM_Base_MspInit+0xc8>)
 8000d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d92:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_TIM_Base_MspInit+0xc8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_TIM_Base_MspInit+0xc8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_TIM_Base_MspInit+0xc8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000da6:	4815      	ldr	r0, [pc, #84]	; (8000dfc <HAL_TIM_Base_MspInit+0xc8>)
 8000da8:	f000 fb6e 	bl	8001488 <HAL_DMA_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000db2:	f7ff ff9f 	bl	8000cf4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_TIM_Base_MspInit+0xc8>)
 8000dba:	625a      	str	r2, [r3, #36]	; 0x24
 8000dbc:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <HAL_TIM_Base_MspInit+0xc8>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dc2:	e013      	b.n	8000dec <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d10e      	bne.n	8000dec <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_TIM_Base_MspInit+0xc4>)
 8000dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dd4:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_TIM_Base_MspInit+0xc4>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_TIM_Base_MspInit+0xc4>)
 8000de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40010000 	.word	0x40010000
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	240000c8 	.word	0x240000c8
 8000e00:	40020428 	.word	0x40020428

08000e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <HAL_TIM_MspPostInit+0x6c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d11f      	bne.n	8000e66 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <HAL_TIM_MspPostInit+0x70>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <HAL_TIM_MspPostInit+0x70>)
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_TIM_MspPostInit+0x70>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	f003 0310 	and.w	r3, r3, #16
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_TIM_MspPostInit+0x74>)
 8000e62:	f002 fe2f 	bl	8003ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40010000 	.word	0x40010000
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58021000 	.word	0x58021000

08000e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0ba      	sub	sp, #232	; 0xe8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	22c0      	movs	r2, #192	; 0xc0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f008 fc05 	bl	80096ac <memset>
  if(huart->Instance==USART1)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a27      	ldr	r2, [pc, #156]	; (8000f44 <HAL_UART_MspInit+0xc8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d146      	bne.n	8000f3a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000eac:	f04f 0201 	mov.w	r2, #1
 8000eb0:	f04f 0300 	mov.w	r3, #0
 8000eb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 ffe8 	bl	8004e98 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ece:	f7ff ff11 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <HAL_UART_MspInit+0xcc>)
 8000ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ed8:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <HAL_UART_MspInit+0xcc>)
 8000eda:	f043 0310 	orr.w	r3, r3, #16
 8000ede:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_UART_MspInit+0xcc>)
 8000ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_UART_MspInit+0xcc>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <HAL_UART_MspInit+0xcc>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_UART_MspInit+0xcc>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f0e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HAL_UART_MspInit+0xd0>)
 8000f36:	f002 fdc5 	bl	8003ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	37e8      	adds	r7, #232	; 0xe8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40011000 	.word	0x40011000
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58020400 	.word	0x58020400

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <NMI_Handler+0x4>

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f938 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f002 ff3b 	bl	8003e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <DMA2_Stream1_IRQHandler+0x10>)
 8000fba:	f001 fa71 	bl	80024a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	240000c8 	.word	0x240000c8

08000fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b37      	ldr	r3, [pc, #220]	; (80010ac <SystemInit+0xe4>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd2:	4a36      	ldr	r2, [pc, #216]	; (80010ac <SystemInit+0xe4>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fdc:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <SystemInit+0xe8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 030f 	and.w	r3, r3, #15
 8000fe4:	2b06      	cmp	r3, #6
 8000fe6:	d807      	bhi.n	8000ff8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fe8:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <SystemInit+0xe8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f023 030f 	bic.w	r3, r3, #15
 8000ff0:	4a2f      	ldr	r2, [pc, #188]	; (80010b0 <SystemInit+0xe8>)
 8000ff2:	f043 0307 	orr.w	r3, r3, #7
 8000ff6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <SystemInit+0xec>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a2d      	ldr	r2, [pc, #180]	; (80010b4 <SystemInit+0xec>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <SystemInit+0xec>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800100a:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <SystemInit+0xec>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4929      	ldr	r1, [pc, #164]	; (80010b4 <SystemInit+0xec>)
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <SystemInit+0xf0>)
 8001012:	4013      	ands	r3, r2
 8001014:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <SystemInit+0xe8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	2b00      	cmp	r3, #0
 8001020:	d007      	beq.n	8001032 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <SystemInit+0xe8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 030f 	bic.w	r3, r3, #15
 800102a:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <SystemInit+0xe8>)
 800102c:	f043 0307 	orr.w	r3, r3, #7
 8001030:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <SystemInit+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <SystemInit+0xec>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <SystemInit+0xec>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <SystemInit+0xec>)
 8001046:	4a1d      	ldr	r2, [pc, #116]	; (80010bc <SystemInit+0xf4>)
 8001048:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <SystemInit+0xec>)
 800104c:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <SystemInit+0xf8>)
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <SystemInit+0xec>)
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <SystemInit+0xfc>)
 8001054:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <SystemInit+0xec>)
 8001058:	2200      	movs	r2, #0
 800105a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <SystemInit+0xec>)
 800105e:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <SystemInit+0xfc>)
 8001060:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <SystemInit+0xec>)
 8001064:	2200      	movs	r2, #0
 8001066:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <SystemInit+0xec>)
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <SystemInit+0xfc>)
 800106c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <SystemInit+0xec>)
 8001070:	2200      	movs	r2, #0
 8001072:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <SystemInit+0xec>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <SystemInit+0xec>)
 800107a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <SystemInit+0xec>)
 8001082:	2200      	movs	r2, #0
 8001084:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <SystemInit+0x100>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <SystemInit+0x104>)
 800108c:	4013      	ands	r3, r2
 800108e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001092:	d202      	bcs.n	800109a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <SystemInit+0x108>)
 8001096:	2201      	movs	r2, #1
 8001098:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <SystemInit+0x10c>)
 800109c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00
 80010b0:	52002000 	.word	0x52002000
 80010b4:	58024400 	.word	0x58024400
 80010b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80010bc:	02020200 	.word	0x02020200
 80010c0:	01ff0000 	.word	0x01ff0000
 80010c4:	01010280 	.word	0x01010280
 80010c8:	5c001000 	.word	0x5c001000
 80010cc:	ffff0000 	.word	0xffff0000
 80010d0:	51008108 	.word	0x51008108
 80010d4:	52004000 	.word	0x52004000

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010dc:	f7ff ff74 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	; (8001124 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f008 fad9 	bl	80096bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff facb 	bl	80006a4 <main>
  bx  lr
 800110e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001114:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001118:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 800111c:	0800976c 	.word	0x0800976c
  ldr r2, =_sbss
 8001120:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001124:	2400cce4 	.word	0x2400cce4

08001128 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC3_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001132:	2003      	movs	r0, #3
 8001134:	f000 f968 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001138:	f003 fcd8 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 800113c:	4602      	mov	r2, r0
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_Init+0x68>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	4913      	ldr	r1, [pc, #76]	; (8001198 <HAL_Init+0x6c>)
 800114a:	5ccb      	ldrb	r3, [r1, r3]
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_Init+0x68>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <HAL_Init+0x6c>)
 8001160:	5cd3      	ldrb	r3, [r2, r3]
 8001162:	f003 031f 	and.w	r3, r3, #31
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	4a0b      	ldr	r2, [pc, #44]	; (800119c <HAL_Init+0x70>)
 800116e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <HAL_Init+0x74>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	200f      	movs	r0, #15
 8001178:	f000 f814 	bl	80011a4 <HAL_InitTick>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e002      	b.n	800118c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001186:	f7ff fdbb 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	58024400 	.word	0x58024400
 8001198:	0800971c 	.word	0x0800971c
 800119c:	24000008 	.word	0x24000008
 80011a0:	24000004 	.word	0x24000004

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_InitTick+0x60>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e021      	b.n	80011fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_InitTick+0x64>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_InitTick+0x60>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f94d 	bl	800146e <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f917 	bl	800141e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_InitTick+0x68>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	24000010 	.word	0x24000010
 8001208:	24000004 	.word	0x24000004
 800120c:	2400000c 	.word	0x2400000c

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	24000010 	.word	0x24000010
 8001234:	2400cce0 	.word	0x2400cce0

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2400cce0 	.word	0x2400cce0

08001250 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetREVID+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	0c1b      	lsrs	r3, r3, #16
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	5c001000 	.word	0x5c001000

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <__NVIC_SetPriorityGrouping+0x40>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	4313      	orrs	r3, r2
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00
 80012ac:	05fa0000 	.word	0x05fa0000

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff29 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff40 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff90 	bl	800135c <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5f 	bl	8001308 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff33 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa4 	bl	80013c4 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff fed2 	bl	8001238 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e316      	b.n	8001ace <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a66      	ldr	r2, [pc, #408]	; (8001640 <HAL_DMA_Init+0x1b8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d04a      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a65      	ldr	r2, [pc, #404]	; (8001644 <HAL_DMA_Init+0x1bc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d045      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a63      	ldr	r2, [pc, #396]	; (8001648 <HAL_DMA_Init+0x1c0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d040      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a62      	ldr	r2, [pc, #392]	; (800164c <HAL_DMA_Init+0x1c4>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d03b      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a60      	ldr	r2, [pc, #384]	; (8001650 <HAL_DMA_Init+0x1c8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d036      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a5f      	ldr	r2, [pc, #380]	; (8001654 <HAL_DMA_Init+0x1cc>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d031      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a5d      	ldr	r2, [pc, #372]	; (8001658 <HAL_DMA_Init+0x1d0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d02c      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a5c      	ldr	r2, [pc, #368]	; (800165c <HAL_DMA_Init+0x1d4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d027      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a5a      	ldr	r2, [pc, #360]	; (8001660 <HAL_DMA_Init+0x1d8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d022      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a59      	ldr	r2, [pc, #356]	; (8001664 <HAL_DMA_Init+0x1dc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d01d      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a57      	ldr	r2, [pc, #348]	; (8001668 <HAL_DMA_Init+0x1e0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d018      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a56      	ldr	r2, [pc, #344]	; (800166c <HAL_DMA_Init+0x1e4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d013      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a54      	ldr	r2, [pc, #336]	; (8001670 <HAL_DMA_Init+0x1e8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00e      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a53      	ldr	r2, [pc, #332]	; (8001674 <HAL_DMA_Init+0x1ec>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d009      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a51      	ldr	r2, [pc, #324]	; (8001678 <HAL_DMA_Init+0x1f0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d004      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a50      	ldr	r2, [pc, #320]	; (800167c <HAL_DMA_Init+0x1f4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d101      	bne.n	8001544 <HAL_DMA_Init+0xbc>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <HAL_DMA_Init+0xbe>
 8001544:	2300      	movs	r3, #0
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 813b 	beq.w	80017c2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a37      	ldr	r2, [pc, #220]	; (8001640 <HAL_DMA_Init+0x1b8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d04a      	beq.n	80015fc <HAL_DMA_Init+0x174>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a36      	ldr	r2, [pc, #216]	; (8001644 <HAL_DMA_Init+0x1bc>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d045      	beq.n	80015fc <HAL_DMA_Init+0x174>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a34      	ldr	r2, [pc, #208]	; (8001648 <HAL_DMA_Init+0x1c0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d040      	beq.n	80015fc <HAL_DMA_Init+0x174>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a33      	ldr	r2, [pc, #204]	; (800164c <HAL_DMA_Init+0x1c4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d03b      	beq.n	80015fc <HAL_DMA_Init+0x174>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a31      	ldr	r2, [pc, #196]	; (8001650 <HAL_DMA_Init+0x1c8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d036      	beq.n	80015fc <HAL_DMA_Init+0x174>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a30      	ldr	r2, [pc, #192]	; (8001654 <HAL_DMA_Init+0x1cc>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d031      	beq.n	80015fc <HAL_DMA_Init+0x174>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a2e      	ldr	r2, [pc, #184]	; (8001658 <HAL_DMA_Init+0x1d0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d02c      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a2d      	ldr	r2, [pc, #180]	; (800165c <HAL_DMA_Init+0x1d4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d027      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a2b      	ldr	r2, [pc, #172]	; (8001660 <HAL_DMA_Init+0x1d8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d022      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a2a      	ldr	r2, [pc, #168]	; (8001664 <HAL_DMA_Init+0x1dc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d01d      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a28      	ldr	r2, [pc, #160]	; (8001668 <HAL_DMA_Init+0x1e0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d018      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_DMA_Init+0x1e4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d013      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a25      	ldr	r2, [pc, #148]	; (8001670 <HAL_DMA_Init+0x1e8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00e      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a24      	ldr	r2, [pc, #144]	; (8001674 <HAL_DMA_Init+0x1ec>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d009      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a22      	ldr	r2, [pc, #136]	; (8001678 <HAL_DMA_Init+0x1f0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d004      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a21      	ldr	r2, [pc, #132]	; (800167c <HAL_DMA_Init+0x1f4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d108      	bne.n	800160e <HAL_DMA_Init+0x186>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e007      	b.n	800161e <HAL_DMA_Init+0x196>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800161e:	e02f      	b.n	8001680 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001620:	f7ff fe0a 	bl	8001238 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b05      	cmp	r3, #5
 800162c:	d928      	bls.n	8001680 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2220      	movs	r2, #32
 8001632:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2203      	movs	r2, #3
 8001638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e246      	b.n	8001ace <HAL_DMA_Init+0x646>
 8001640:	40020010 	.word	0x40020010
 8001644:	40020028 	.word	0x40020028
 8001648:	40020040 	.word	0x40020040
 800164c:	40020058 	.word	0x40020058
 8001650:	40020070 	.word	0x40020070
 8001654:	40020088 	.word	0x40020088
 8001658:	400200a0 	.word	0x400200a0
 800165c:	400200b8 	.word	0x400200b8
 8001660:	40020410 	.word	0x40020410
 8001664:	40020428 	.word	0x40020428
 8001668:	40020440 	.word	0x40020440
 800166c:	40020458 	.word	0x40020458
 8001670:	40020470 	.word	0x40020470
 8001674:	40020488 	.word	0x40020488
 8001678:	400204a0 	.word	0x400204a0
 800167c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1c8      	bne.n	8001620 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4b83      	ldr	r3, [pc, #524]	; (80018a8 <HAL_DMA_Init+0x420>)
 800169a:	4013      	ands	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80016a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d107      	bne.n	80016e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	4313      	orrs	r3, r2
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80016e4:	4b71      	ldr	r3, [pc, #452]	; (80018ac <HAL_DMA_Init+0x424>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b71      	ldr	r3, [pc, #452]	; (80018b0 <HAL_DMA_Init+0x428>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016f0:	d328      	bcc.n	8001744 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b28      	cmp	r3, #40	; 0x28
 80016f8:	d903      	bls.n	8001702 <HAL_DMA_Init+0x27a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b2e      	cmp	r3, #46	; 0x2e
 8001700:	d917      	bls.n	8001732 <HAL_DMA_Init+0x2aa>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b3e      	cmp	r3, #62	; 0x3e
 8001708:	d903      	bls.n	8001712 <HAL_DMA_Init+0x28a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b42      	cmp	r3, #66	; 0x42
 8001710:	d90f      	bls.n	8001732 <HAL_DMA_Init+0x2aa>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b46      	cmp	r3, #70	; 0x46
 8001718:	d903      	bls.n	8001722 <HAL_DMA_Init+0x29a>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b48      	cmp	r3, #72	; 0x48
 8001720:	d907      	bls.n	8001732 <HAL_DMA_Init+0x2aa>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b4e      	cmp	r3, #78	; 0x4e
 8001728:	d905      	bls.n	8001736 <HAL_DMA_Init+0x2ae>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b52      	cmp	r3, #82	; 0x52
 8001730:	d801      	bhi.n	8001736 <HAL_DMA_Init+0x2ae>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_DMA_Init+0x2b0>
 8001736:	2300      	movs	r3, #0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001742:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f023 0307 	bic.w	r3, r3, #7
 800175a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	4313      	orrs	r3, r2
 8001764:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	2b04      	cmp	r3, #4
 800176c:	d117      	bne.n	800179e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4313      	orrs	r3, r2
 8001776:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00e      	beq.n	800179e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f002 f815 	bl	80037b0 <DMA_CheckFifoParam>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2240      	movs	r2, #64	; 0x40
 8001790:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e197      	b.n	8001ace <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f001 ff50 	bl	800364c <DMA_CalcBaseAndBitshift>
 80017ac:	4603      	mov	r3, r0
 80017ae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	223f      	movs	r2, #63	; 0x3f
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	e0cd      	b.n	800195e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a3b      	ldr	r2, [pc, #236]	; (80018b4 <HAL_DMA_Init+0x42c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d022      	beq.n	8001812 <HAL_DMA_Init+0x38a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a39      	ldr	r2, [pc, #228]	; (80018b8 <HAL_DMA_Init+0x430>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d01d      	beq.n	8001812 <HAL_DMA_Init+0x38a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a38      	ldr	r2, [pc, #224]	; (80018bc <HAL_DMA_Init+0x434>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d018      	beq.n	8001812 <HAL_DMA_Init+0x38a>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a36      	ldr	r2, [pc, #216]	; (80018c0 <HAL_DMA_Init+0x438>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_DMA_Init+0x38a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a35      	ldr	r2, [pc, #212]	; (80018c4 <HAL_DMA_Init+0x43c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d00e      	beq.n	8001812 <HAL_DMA_Init+0x38a>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a33      	ldr	r2, [pc, #204]	; (80018c8 <HAL_DMA_Init+0x440>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d009      	beq.n	8001812 <HAL_DMA_Init+0x38a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a32      	ldr	r2, [pc, #200]	; (80018cc <HAL_DMA_Init+0x444>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d004      	beq.n	8001812 <HAL_DMA_Init+0x38a>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a30      	ldr	r2, [pc, #192]	; (80018d0 <HAL_DMA_Init+0x448>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_DMA_Init+0x38e>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_DMA_Init+0x390>
 8001816:	2300      	movs	r3, #0
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 8097 	beq.w	800194c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a24      	ldr	r2, [pc, #144]	; (80018b4 <HAL_DMA_Init+0x42c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d021      	beq.n	800186c <HAL_DMA_Init+0x3e4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <HAL_DMA_Init+0x430>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d01c      	beq.n	800186c <HAL_DMA_Init+0x3e4>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a21      	ldr	r2, [pc, #132]	; (80018bc <HAL_DMA_Init+0x434>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d017      	beq.n	800186c <HAL_DMA_Init+0x3e4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <HAL_DMA_Init+0x438>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d012      	beq.n	800186c <HAL_DMA_Init+0x3e4>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <HAL_DMA_Init+0x43c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d00d      	beq.n	800186c <HAL_DMA_Init+0x3e4>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_DMA_Init+0x440>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d008      	beq.n	800186c <HAL_DMA_Init+0x3e4>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_DMA_Init+0x444>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d003      	beq.n	800186c <HAL_DMA_Init+0x3e4>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a19      	ldr	r2, [pc, #100]	; (80018d0 <HAL_DMA_Init+0x448>)
 800186a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2202      	movs	r2, #2
 8001870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_DMA_Init+0x44c>)
 8001888:	4013      	ands	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b40      	cmp	r3, #64	; 0x40
 8001892:	d021      	beq.n	80018d8 <HAL_DMA_Init+0x450>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b80      	cmp	r3, #128	; 0x80
 800189a:	d102      	bne.n	80018a2 <HAL_DMA_Init+0x41a>
 800189c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018a0:	e01b      	b.n	80018da <HAL_DMA_Init+0x452>
 80018a2:	2300      	movs	r3, #0
 80018a4:	e019      	b.n	80018da <HAL_DMA_Init+0x452>
 80018a6:	bf00      	nop
 80018a8:	fe10803f 	.word	0xfe10803f
 80018ac:	5c001000 	.word	0x5c001000
 80018b0:	ffff0000 	.word	0xffff0000
 80018b4:	58025408 	.word	0x58025408
 80018b8:	5802541c 	.word	0x5802541c
 80018bc:	58025430 	.word	0x58025430
 80018c0:	58025444 	.word	0x58025444
 80018c4:	58025458 	.word	0x58025458
 80018c8:	5802546c 	.word	0x5802546c
 80018cc:	58025480 	.word	0x58025480
 80018d0:	58025494 	.word	0x58025494
 80018d4:	fffe000f 	.word	0xfffe000f
 80018d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68d2      	ldr	r2, [r2, #12]
 80018de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80018e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80018f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80018f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001900:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001908:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4313      	orrs	r3, r2
 800190e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b6e      	ldr	r3, [pc, #440]	; (8001ad8 <HAL_DMA_Init+0x650>)
 8001920:	4413      	add	r3, r2
 8001922:	4a6e      	ldr	r2, [pc, #440]	; (8001adc <HAL_DMA_Init+0x654>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	009a      	lsls	r2, r3, #2
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f001 fe8b 	bl	800364c <DMA_CalcBaseAndBitshift>
 8001936:	4603      	mov	r3, r0
 8001938:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193e:	f003 031f 	and.w	r3, r3, #31
 8001942:	2201      	movs	r2, #1
 8001944:	409a      	lsls	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	e008      	b.n	800195e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2240      	movs	r2, #64	; 0x40
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2203      	movs	r2, #3
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0b7      	b.n	8001ace <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a5f      	ldr	r2, [pc, #380]	; (8001ae0 <HAL_DMA_Init+0x658>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d072      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a5d      	ldr	r2, [pc, #372]	; (8001ae4 <HAL_DMA_Init+0x65c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d06d      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a5c      	ldr	r2, [pc, #368]	; (8001ae8 <HAL_DMA_Init+0x660>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d068      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a5a      	ldr	r2, [pc, #360]	; (8001aec <HAL_DMA_Init+0x664>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d063      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a59      	ldr	r2, [pc, #356]	; (8001af0 <HAL_DMA_Init+0x668>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d05e      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a57      	ldr	r2, [pc, #348]	; (8001af4 <HAL_DMA_Init+0x66c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d059      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a56      	ldr	r2, [pc, #344]	; (8001af8 <HAL_DMA_Init+0x670>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d054      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a54      	ldr	r2, [pc, #336]	; (8001afc <HAL_DMA_Init+0x674>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d04f      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a53      	ldr	r2, [pc, #332]	; (8001b00 <HAL_DMA_Init+0x678>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d04a      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a51      	ldr	r2, [pc, #324]	; (8001b04 <HAL_DMA_Init+0x67c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d045      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a50      	ldr	r2, [pc, #320]	; (8001b08 <HAL_DMA_Init+0x680>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d040      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a4e      	ldr	r2, [pc, #312]	; (8001b0c <HAL_DMA_Init+0x684>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d03b      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a4d      	ldr	r2, [pc, #308]	; (8001b10 <HAL_DMA_Init+0x688>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d036      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a4b      	ldr	r2, [pc, #300]	; (8001b14 <HAL_DMA_Init+0x68c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d031      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a4a      	ldr	r2, [pc, #296]	; (8001b18 <HAL_DMA_Init+0x690>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d02c      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a48      	ldr	r2, [pc, #288]	; (8001b1c <HAL_DMA_Init+0x694>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d027      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a47      	ldr	r2, [pc, #284]	; (8001b20 <HAL_DMA_Init+0x698>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d022      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a45      	ldr	r2, [pc, #276]	; (8001b24 <HAL_DMA_Init+0x69c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d01d      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a44      	ldr	r2, [pc, #272]	; (8001b28 <HAL_DMA_Init+0x6a0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d018      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a42      	ldr	r2, [pc, #264]	; (8001b2c <HAL_DMA_Init+0x6a4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d013      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a41      	ldr	r2, [pc, #260]	; (8001b30 <HAL_DMA_Init+0x6a8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d00e      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a3f      	ldr	r2, [pc, #252]	; (8001b34 <HAL_DMA_Init+0x6ac>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d009      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a3e      	ldr	r2, [pc, #248]	; (8001b38 <HAL_DMA_Init+0x6b0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d004      	beq.n	8001a4e <HAL_DMA_Init+0x5c6>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a3c      	ldr	r2, [pc, #240]	; (8001b3c <HAL_DMA_Init+0x6b4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_DMA_Init+0x5ca>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_DMA_Init+0x5cc>
 8001a52:	2300      	movs	r3, #0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d032      	beq.n	8001abe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f001 ff25 	bl	80038a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b80      	cmp	r3, #128	; 0x80
 8001a64:	d102      	bne.n	8001a6c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a80:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d010      	beq.n	8001aac <HAL_DMA_Init+0x624>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d80c      	bhi.n	8001aac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f001 ffa2 	bl	80039dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	e008      	b.n	8001abe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	a7fdabf8 	.word	0xa7fdabf8
 8001adc:	cccccccd 	.word	0xcccccccd
 8001ae0:	40020010 	.word	0x40020010
 8001ae4:	40020028 	.word	0x40020028
 8001ae8:	40020040 	.word	0x40020040
 8001aec:	40020058 	.word	0x40020058
 8001af0:	40020070 	.word	0x40020070
 8001af4:	40020088 	.word	0x40020088
 8001af8:	400200a0 	.word	0x400200a0
 8001afc:	400200b8 	.word	0x400200b8
 8001b00:	40020410 	.word	0x40020410
 8001b04:	40020428 	.word	0x40020428
 8001b08:	40020440 	.word	0x40020440
 8001b0c:	40020458 	.word	0x40020458
 8001b10:	40020470 	.word	0x40020470
 8001b14:	40020488 	.word	0x40020488
 8001b18:	400204a0 	.word	0x400204a0
 8001b1c:	400204b8 	.word	0x400204b8
 8001b20:	58025408 	.word	0x58025408
 8001b24:	5802541c 	.word	0x5802541c
 8001b28:	58025430 	.word	0x58025430
 8001b2c:	58025444 	.word	0x58025444
 8001b30:	58025458 	.word	0x58025458
 8001b34:	5802546c 	.word	0x5802546c
 8001b38:	58025480 	.word	0x58025480
 8001b3c:	58025494 	.word	0x58025494

08001b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e226      	b.n	8001faa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_DMA_Start_IT+0x2a>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e21f      	b.n	8001faa <HAL_DMA_Start_IT+0x46a>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	f040 820a 	bne.w	8001f94 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a68      	ldr	r2, [pc, #416]	; (8001d34 <HAL_DMA_Start_IT+0x1f4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d04a      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a66      	ldr	r2, [pc, #408]	; (8001d38 <HAL_DMA_Start_IT+0x1f8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d045      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a65      	ldr	r2, [pc, #404]	; (8001d3c <HAL_DMA_Start_IT+0x1fc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d040      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a63      	ldr	r2, [pc, #396]	; (8001d40 <HAL_DMA_Start_IT+0x200>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d03b      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a62      	ldr	r2, [pc, #392]	; (8001d44 <HAL_DMA_Start_IT+0x204>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d036      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a60      	ldr	r2, [pc, #384]	; (8001d48 <HAL_DMA_Start_IT+0x208>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d031      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a5f      	ldr	r2, [pc, #380]	; (8001d4c <HAL_DMA_Start_IT+0x20c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d02c      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a5d      	ldr	r2, [pc, #372]	; (8001d50 <HAL_DMA_Start_IT+0x210>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d027      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a5c      	ldr	r2, [pc, #368]	; (8001d54 <HAL_DMA_Start_IT+0x214>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d022      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a5a      	ldr	r2, [pc, #360]	; (8001d58 <HAL_DMA_Start_IT+0x218>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d01d      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a59      	ldr	r2, [pc, #356]	; (8001d5c <HAL_DMA_Start_IT+0x21c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d018      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a57      	ldr	r2, [pc, #348]	; (8001d60 <HAL_DMA_Start_IT+0x220>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a56      	ldr	r2, [pc, #344]	; (8001d64 <HAL_DMA_Start_IT+0x224>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d00e      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <HAL_DMA_Start_IT+0x228>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d009      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a53      	ldr	r2, [pc, #332]	; (8001d6c <HAL_DMA_Start_IT+0x22c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d004      	beq.n	8001c2e <HAL_DMA_Start_IT+0xee>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a51      	ldr	r2, [pc, #324]	; (8001d70 <HAL_DMA_Start_IT+0x230>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d108      	bne.n	8001c40 <HAL_DMA_Start_IT+0x100>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e007      	b.n	8001c50 <HAL_DMA_Start_IT+0x110>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f001 fb4c 	bl	80032f4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a34      	ldr	r2, [pc, #208]	; (8001d34 <HAL_DMA_Start_IT+0x1f4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d04a      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a33      	ldr	r2, [pc, #204]	; (8001d38 <HAL_DMA_Start_IT+0x1f8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d045      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <HAL_DMA_Start_IT+0x1fc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d040      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a30      	ldr	r2, [pc, #192]	; (8001d40 <HAL_DMA_Start_IT+0x200>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d03b      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a2e      	ldr	r2, [pc, #184]	; (8001d44 <HAL_DMA_Start_IT+0x204>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d036      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a2d      	ldr	r2, [pc, #180]	; (8001d48 <HAL_DMA_Start_IT+0x208>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d031      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a2b      	ldr	r2, [pc, #172]	; (8001d4c <HAL_DMA_Start_IT+0x20c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d02c      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a2a      	ldr	r2, [pc, #168]	; (8001d50 <HAL_DMA_Start_IT+0x210>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d027      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <HAL_DMA_Start_IT+0x214>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d022      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a27      	ldr	r2, [pc, #156]	; (8001d58 <HAL_DMA_Start_IT+0x218>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d01d      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <HAL_DMA_Start_IT+0x21c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d018      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a24      	ldr	r2, [pc, #144]	; (8001d60 <HAL_DMA_Start_IT+0x220>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d013      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a22      	ldr	r2, [pc, #136]	; (8001d64 <HAL_DMA_Start_IT+0x224>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00e      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <HAL_DMA_Start_IT+0x228>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d009      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <HAL_DMA_Start_IT+0x22c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d004      	beq.n	8001cfc <HAL_DMA_Start_IT+0x1bc>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_DMA_Start_IT+0x230>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d101      	bne.n	8001d00 <HAL_DMA_Start_IT+0x1c0>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <HAL_DMA_Start_IT+0x1c2>
 8001d00:	2300      	movs	r3, #0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d036      	beq.n	8001d74 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 021e 	bic.w	r2, r3, #30
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0216 	orr.w	r2, r2, #22
 8001d18:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d03e      	beq.n	8001da0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0208 	orr.w	r2, r2, #8
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e035      	b.n	8001da0 <HAL_DMA_Start_IT+0x260>
 8001d34:	40020010 	.word	0x40020010
 8001d38:	40020028 	.word	0x40020028
 8001d3c:	40020040 	.word	0x40020040
 8001d40:	40020058 	.word	0x40020058
 8001d44:	40020070 	.word	0x40020070
 8001d48:	40020088 	.word	0x40020088
 8001d4c:	400200a0 	.word	0x400200a0
 8001d50:	400200b8 	.word	0x400200b8
 8001d54:	40020410 	.word	0x40020410
 8001d58:	40020428 	.word	0x40020428
 8001d5c:	40020440 	.word	0x40020440
 8001d60:	40020458 	.word	0x40020458
 8001d64:	40020470 	.word	0x40020470
 8001d68:	40020488 	.word	0x40020488
 8001d6c:	400204a0 	.word	0x400204a0
 8001d70:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 020e 	bic.w	r2, r3, #14
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 020a 	orr.w	r2, r2, #10
 8001d86:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0204 	orr.w	r2, r2, #4
 8001d9e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a83      	ldr	r2, [pc, #524]	; (8001fb4 <HAL_DMA_Start_IT+0x474>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d072      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a82      	ldr	r2, [pc, #520]	; (8001fb8 <HAL_DMA_Start_IT+0x478>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d06d      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a80      	ldr	r2, [pc, #512]	; (8001fbc <HAL_DMA_Start_IT+0x47c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d068      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a7f      	ldr	r2, [pc, #508]	; (8001fc0 <HAL_DMA_Start_IT+0x480>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d063      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a7d      	ldr	r2, [pc, #500]	; (8001fc4 <HAL_DMA_Start_IT+0x484>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d05e      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a7c      	ldr	r2, [pc, #496]	; (8001fc8 <HAL_DMA_Start_IT+0x488>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d059      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a7a      	ldr	r2, [pc, #488]	; (8001fcc <HAL_DMA_Start_IT+0x48c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d054      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a79      	ldr	r2, [pc, #484]	; (8001fd0 <HAL_DMA_Start_IT+0x490>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d04f      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a77      	ldr	r2, [pc, #476]	; (8001fd4 <HAL_DMA_Start_IT+0x494>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d04a      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a76      	ldr	r2, [pc, #472]	; (8001fd8 <HAL_DMA_Start_IT+0x498>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d045      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a74      	ldr	r2, [pc, #464]	; (8001fdc <HAL_DMA_Start_IT+0x49c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d040      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a73      	ldr	r2, [pc, #460]	; (8001fe0 <HAL_DMA_Start_IT+0x4a0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d03b      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a71      	ldr	r2, [pc, #452]	; (8001fe4 <HAL_DMA_Start_IT+0x4a4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d036      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a70      	ldr	r2, [pc, #448]	; (8001fe8 <HAL_DMA_Start_IT+0x4a8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d031      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a6e      	ldr	r2, [pc, #440]	; (8001fec <HAL_DMA_Start_IT+0x4ac>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d02c      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6d      	ldr	r2, [pc, #436]	; (8001ff0 <HAL_DMA_Start_IT+0x4b0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d027      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a6b      	ldr	r2, [pc, #428]	; (8001ff4 <HAL_DMA_Start_IT+0x4b4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d022      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6a      	ldr	r2, [pc, #424]	; (8001ff8 <HAL_DMA_Start_IT+0x4b8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d01d      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a68      	ldr	r2, [pc, #416]	; (8001ffc <HAL_DMA_Start_IT+0x4bc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d018      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a67      	ldr	r2, [pc, #412]	; (8002000 <HAL_DMA_Start_IT+0x4c0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a65      	ldr	r2, [pc, #404]	; (8002004 <HAL_DMA_Start_IT+0x4c4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00e      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a64      	ldr	r2, [pc, #400]	; (8002008 <HAL_DMA_Start_IT+0x4c8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a62      	ldr	r2, [pc, #392]	; (800200c <HAL_DMA_Start_IT+0x4cc>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_DMA_Start_IT+0x350>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a61      	ldr	r2, [pc, #388]	; (8002010 <HAL_DMA_Start_IT+0x4d0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_DMA_Start_IT+0x354>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_DMA_Start_IT+0x356>
 8001e94:	2300      	movs	r3, #0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01a      	beq.n	8001ed0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d007      	beq.n	8001ed0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ece:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a37      	ldr	r2, [pc, #220]	; (8001fb4 <HAL_DMA_Start_IT+0x474>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d04a      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a36      	ldr	r2, [pc, #216]	; (8001fb8 <HAL_DMA_Start_IT+0x478>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d045      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a34      	ldr	r2, [pc, #208]	; (8001fbc <HAL_DMA_Start_IT+0x47c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d040      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a33      	ldr	r2, [pc, #204]	; (8001fc0 <HAL_DMA_Start_IT+0x480>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d03b      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a31      	ldr	r2, [pc, #196]	; (8001fc4 <HAL_DMA_Start_IT+0x484>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d036      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a30      	ldr	r2, [pc, #192]	; (8001fc8 <HAL_DMA_Start_IT+0x488>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d031      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2e      	ldr	r2, [pc, #184]	; (8001fcc <HAL_DMA_Start_IT+0x48c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d02c      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a2d      	ldr	r2, [pc, #180]	; (8001fd0 <HAL_DMA_Start_IT+0x490>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d027      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a2b      	ldr	r2, [pc, #172]	; (8001fd4 <HAL_DMA_Start_IT+0x494>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d022      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a2a      	ldr	r2, [pc, #168]	; (8001fd8 <HAL_DMA_Start_IT+0x498>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d01d      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <HAL_DMA_Start_IT+0x49c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d018      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a27      	ldr	r2, [pc, #156]	; (8001fe0 <HAL_DMA_Start_IT+0x4a0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d013      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a25      	ldr	r2, [pc, #148]	; (8001fe4 <HAL_DMA_Start_IT+0x4a4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00e      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a24      	ldr	r2, [pc, #144]	; (8001fe8 <HAL_DMA_Start_IT+0x4a8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d009      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a22      	ldr	r2, [pc, #136]	; (8001fec <HAL_DMA_Start_IT+0x4ac>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d004      	beq.n	8001f70 <HAL_DMA_Start_IT+0x430>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a21      	ldr	r2, [pc, #132]	; (8001ff0 <HAL_DMA_Start_IT+0x4b0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d108      	bne.n	8001f82 <HAL_DMA_Start_IT+0x442>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	e012      	b.n	8001fa8 <HAL_DMA_Start_IT+0x468>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0201 	orr.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	e009      	b.n	8001fa8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40020010 	.word	0x40020010
 8001fb8:	40020028 	.word	0x40020028
 8001fbc:	40020040 	.word	0x40020040
 8001fc0:	40020058 	.word	0x40020058
 8001fc4:	40020070 	.word	0x40020070
 8001fc8:	40020088 	.word	0x40020088
 8001fcc:	400200a0 	.word	0x400200a0
 8001fd0:	400200b8 	.word	0x400200b8
 8001fd4:	40020410 	.word	0x40020410
 8001fd8:	40020428 	.word	0x40020428
 8001fdc:	40020440 	.word	0x40020440
 8001fe0:	40020458 	.word	0x40020458
 8001fe4:	40020470 	.word	0x40020470
 8001fe8:	40020488 	.word	0x40020488
 8001fec:	400204a0 	.word	0x400204a0
 8001ff0:	400204b8 	.word	0x400204b8
 8001ff4:	58025408 	.word	0x58025408
 8001ff8:	5802541c 	.word	0x5802541c
 8001ffc:	58025430 	.word	0x58025430
 8002000:	58025444 	.word	0x58025444
 8002004:	58025458 	.word	0x58025458
 8002008:	5802546c 	.word	0x5802546c
 800200c:	58025480 	.word	0x58025480
 8002010:	58025494 	.word	0x58025494

08002014 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e237      	b.n	8002496 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d004      	beq.n	800203c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e22c      	b.n	8002496 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a5c      	ldr	r2, [pc, #368]	; (80021b4 <HAL_DMA_Abort_IT+0x1a0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d04a      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a5b      	ldr	r2, [pc, #364]	; (80021b8 <HAL_DMA_Abort_IT+0x1a4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d045      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a59      	ldr	r2, [pc, #356]	; (80021bc <HAL_DMA_Abort_IT+0x1a8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d040      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a58      	ldr	r2, [pc, #352]	; (80021c0 <HAL_DMA_Abort_IT+0x1ac>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d03b      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a56      	ldr	r2, [pc, #344]	; (80021c4 <HAL_DMA_Abort_IT+0x1b0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d036      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a55      	ldr	r2, [pc, #340]	; (80021c8 <HAL_DMA_Abort_IT+0x1b4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d031      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a53      	ldr	r2, [pc, #332]	; (80021cc <HAL_DMA_Abort_IT+0x1b8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02c      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_DMA_Abort_IT+0x1bc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d027      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a50      	ldr	r2, [pc, #320]	; (80021d4 <HAL_DMA_Abort_IT+0x1c0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d022      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a4f      	ldr	r2, [pc, #316]	; (80021d8 <HAL_DMA_Abort_IT+0x1c4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d01d      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a4d      	ldr	r2, [pc, #308]	; (80021dc <HAL_DMA_Abort_IT+0x1c8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d018      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a4c      	ldr	r2, [pc, #304]	; (80021e0 <HAL_DMA_Abort_IT+0x1cc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a4a      	ldr	r2, [pc, #296]	; (80021e4 <HAL_DMA_Abort_IT+0x1d0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00e      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a49      	ldr	r2, [pc, #292]	; (80021e8 <HAL_DMA_Abort_IT+0x1d4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d009      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a47      	ldr	r2, [pc, #284]	; (80021ec <HAL_DMA_Abort_IT+0x1d8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d004      	beq.n	80020dc <HAL_DMA_Abort_IT+0xc8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a46      	ldr	r2, [pc, #280]	; (80021f0 <HAL_DMA_Abort_IT+0x1dc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d101      	bne.n	80020e0 <HAL_DMA_Abort_IT+0xcc>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <HAL_DMA_Abort_IT+0xce>
 80020e0:	2300      	movs	r3, #0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8086 	beq.w	80021f4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2204      	movs	r2, #4
 80020ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2f      	ldr	r2, [pc, #188]	; (80021b4 <HAL_DMA_Abort_IT+0x1a0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d04a      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a2e      	ldr	r2, [pc, #184]	; (80021b8 <HAL_DMA_Abort_IT+0x1a4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d045      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a2c      	ldr	r2, [pc, #176]	; (80021bc <HAL_DMA_Abort_IT+0x1a8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d040      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <HAL_DMA_Abort_IT+0x1ac>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d03b      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a29      	ldr	r2, [pc, #164]	; (80021c4 <HAL_DMA_Abort_IT+0x1b0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d036      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <HAL_DMA_Abort_IT+0x1b4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d031      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a26      	ldr	r2, [pc, #152]	; (80021cc <HAL_DMA_Abort_IT+0x1b8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d02c      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a25      	ldr	r2, [pc, #148]	; (80021d0 <HAL_DMA_Abort_IT+0x1bc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d027      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a23      	ldr	r2, [pc, #140]	; (80021d4 <HAL_DMA_Abort_IT+0x1c0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d022      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <HAL_DMA_Abort_IT+0x1c4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d01d      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a20      	ldr	r2, [pc, #128]	; (80021dc <HAL_DMA_Abort_IT+0x1c8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d018      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1f      	ldr	r2, [pc, #124]	; (80021e0 <HAL_DMA_Abort_IT+0x1cc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d013      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <HAL_DMA_Abort_IT+0x1d0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00e      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_DMA_Abort_IT+0x1d4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d009      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1a      	ldr	r2, [pc, #104]	; (80021ec <HAL_DMA_Abort_IT+0x1d8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d004      	beq.n	8002190 <HAL_DMA_Abort_IT+0x17c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <HAL_DMA_Abort_IT+0x1dc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d108      	bne.n	80021a2 <HAL_DMA_Abort_IT+0x18e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e178      	b.n	8002494 <HAL_DMA_Abort_IT+0x480>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e16f      	b.n	8002494 <HAL_DMA_Abort_IT+0x480>
 80021b4:	40020010 	.word	0x40020010
 80021b8:	40020028 	.word	0x40020028
 80021bc:	40020040 	.word	0x40020040
 80021c0:	40020058 	.word	0x40020058
 80021c4:	40020070 	.word	0x40020070
 80021c8:	40020088 	.word	0x40020088
 80021cc:	400200a0 	.word	0x400200a0
 80021d0:	400200b8 	.word	0x400200b8
 80021d4:	40020410 	.word	0x40020410
 80021d8:	40020428 	.word	0x40020428
 80021dc:	40020440 	.word	0x40020440
 80021e0:	40020458 	.word	0x40020458
 80021e4:	40020470 	.word	0x40020470
 80021e8:	40020488 	.word	0x40020488
 80021ec:	400204a0 	.word	0x400204a0
 80021f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 020e 	bic.w	r2, r2, #14
 8002202:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a6c      	ldr	r2, [pc, #432]	; (80023bc <HAL_DMA_Abort_IT+0x3a8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d04a      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6b      	ldr	r2, [pc, #428]	; (80023c0 <HAL_DMA_Abort_IT+0x3ac>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d045      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a69      	ldr	r2, [pc, #420]	; (80023c4 <HAL_DMA_Abort_IT+0x3b0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d040      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a68      	ldr	r2, [pc, #416]	; (80023c8 <HAL_DMA_Abort_IT+0x3b4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d03b      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a66      	ldr	r2, [pc, #408]	; (80023cc <HAL_DMA_Abort_IT+0x3b8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d036      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a65      	ldr	r2, [pc, #404]	; (80023d0 <HAL_DMA_Abort_IT+0x3bc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d031      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a63      	ldr	r2, [pc, #396]	; (80023d4 <HAL_DMA_Abort_IT+0x3c0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d02c      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a62      	ldr	r2, [pc, #392]	; (80023d8 <HAL_DMA_Abort_IT+0x3c4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d027      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a60      	ldr	r2, [pc, #384]	; (80023dc <HAL_DMA_Abort_IT+0x3c8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d022      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a5f      	ldr	r2, [pc, #380]	; (80023e0 <HAL_DMA_Abort_IT+0x3cc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d01d      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a5d      	ldr	r2, [pc, #372]	; (80023e4 <HAL_DMA_Abort_IT+0x3d0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d018      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a5c      	ldr	r2, [pc, #368]	; (80023e8 <HAL_DMA_Abort_IT+0x3d4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d013      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a5a      	ldr	r2, [pc, #360]	; (80023ec <HAL_DMA_Abort_IT+0x3d8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00e      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a59      	ldr	r2, [pc, #356]	; (80023f0 <HAL_DMA_Abort_IT+0x3dc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d009      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a57      	ldr	r2, [pc, #348]	; (80023f4 <HAL_DMA_Abort_IT+0x3e0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d004      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x290>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a56      	ldr	r2, [pc, #344]	; (80023f8 <HAL_DMA_Abort_IT+0x3e4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d108      	bne.n	80022b6 <HAL_DMA_Abort_IT+0x2a2>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e007      	b.n	80022c6 <HAL_DMA_Abort_IT+0x2b2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0201 	bic.w	r2, r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a3c      	ldr	r2, [pc, #240]	; (80023bc <HAL_DMA_Abort_IT+0x3a8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d072      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a3a      	ldr	r2, [pc, #232]	; (80023c0 <HAL_DMA_Abort_IT+0x3ac>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d06d      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a39      	ldr	r2, [pc, #228]	; (80023c4 <HAL_DMA_Abort_IT+0x3b0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d068      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a37      	ldr	r2, [pc, #220]	; (80023c8 <HAL_DMA_Abort_IT+0x3b4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d063      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a36      	ldr	r2, [pc, #216]	; (80023cc <HAL_DMA_Abort_IT+0x3b8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d05e      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a34      	ldr	r2, [pc, #208]	; (80023d0 <HAL_DMA_Abort_IT+0x3bc>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d059      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a33      	ldr	r2, [pc, #204]	; (80023d4 <HAL_DMA_Abort_IT+0x3c0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d054      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <HAL_DMA_Abort_IT+0x3c4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d04f      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a30      	ldr	r2, [pc, #192]	; (80023dc <HAL_DMA_Abort_IT+0x3c8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d04a      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2e      	ldr	r2, [pc, #184]	; (80023e0 <HAL_DMA_Abort_IT+0x3cc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d045      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2d      	ldr	r2, [pc, #180]	; (80023e4 <HAL_DMA_Abort_IT+0x3d0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d040      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a2b      	ldr	r2, [pc, #172]	; (80023e8 <HAL_DMA_Abort_IT+0x3d4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d03b      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a2a      	ldr	r2, [pc, #168]	; (80023ec <HAL_DMA_Abort_IT+0x3d8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d036      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a28      	ldr	r2, [pc, #160]	; (80023f0 <HAL_DMA_Abort_IT+0x3dc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d031      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <HAL_DMA_Abort_IT+0x3e0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d02c      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a25      	ldr	r2, [pc, #148]	; (80023f8 <HAL_DMA_Abort_IT+0x3e4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d027      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a24      	ldr	r2, [pc, #144]	; (80023fc <HAL_DMA_Abort_IT+0x3e8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a22      	ldr	r2, [pc, #136]	; (8002400 <HAL_DMA_Abort_IT+0x3ec>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01d      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a21      	ldr	r2, [pc, #132]	; (8002404 <HAL_DMA_Abort_IT+0x3f0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d018      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <HAL_DMA_Abort_IT+0x3f4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1e      	ldr	r2, [pc, #120]	; (800240c <HAL_DMA_Abort_IT+0x3f8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00e      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <HAL_DMA_Abort_IT+0x3fc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d009      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1b      	ldr	r2, [pc, #108]	; (8002414 <HAL_DMA_Abort_IT+0x400>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x3a2>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a19      	ldr	r2, [pc, #100]	; (8002418 <HAL_DMA_Abort_IT+0x404>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d132      	bne.n	800241c <HAL_DMA_Abort_IT+0x408>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e031      	b.n	800241e <HAL_DMA_Abort_IT+0x40a>
 80023ba:	bf00      	nop
 80023bc:	40020010 	.word	0x40020010
 80023c0:	40020028 	.word	0x40020028
 80023c4:	40020040 	.word	0x40020040
 80023c8:	40020058 	.word	0x40020058
 80023cc:	40020070 	.word	0x40020070
 80023d0:	40020088 	.word	0x40020088
 80023d4:	400200a0 	.word	0x400200a0
 80023d8:	400200b8 	.word	0x400200b8
 80023dc:	40020410 	.word	0x40020410
 80023e0:	40020428 	.word	0x40020428
 80023e4:	40020440 	.word	0x40020440
 80023e8:	40020458 	.word	0x40020458
 80023ec:	40020470 	.word	0x40020470
 80023f0:	40020488 	.word	0x40020488
 80023f4:	400204a0 	.word	0x400204a0
 80023f8:	400204b8 	.word	0x400204b8
 80023fc:	58025408 	.word	0x58025408
 8002400:	5802541c 	.word	0x5802541c
 8002404:	58025430 	.word	0x58025430
 8002408:	58025444 	.word	0x58025444
 800240c:	58025458 	.word	0x58025458
 8002410:	5802546c 	.word	0x5802546c
 8002414:	58025480 	.word	0x58025480
 8002418:	58025494 	.word	0x58025494
 800241c:	2300      	movs	r3, #0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d028      	beq.n	8002474 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002430:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2201      	movs	r2, #1
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002450:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00c      	beq.n	8002474 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002468:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002472:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop

080024a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024ac:	4b67      	ldr	r3, [pc, #412]	; (800264c <HAL_DMA_IRQHandler+0x1ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a67      	ldr	r2, [pc, #412]	; (8002650 <HAL_DMA_IRQHandler+0x1b0>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	0a9b      	lsrs	r3, r3, #10
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a5f      	ldr	r2, [pc, #380]	; (8002654 <HAL_DMA_IRQHandler+0x1b4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d04a      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a5d      	ldr	r2, [pc, #372]	; (8002658 <HAL_DMA_IRQHandler+0x1b8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d045      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a5c      	ldr	r2, [pc, #368]	; (800265c <HAL_DMA_IRQHandler+0x1bc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d040      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a5a      	ldr	r2, [pc, #360]	; (8002660 <HAL_DMA_IRQHandler+0x1c0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d03b      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a59      	ldr	r2, [pc, #356]	; (8002664 <HAL_DMA_IRQHandler+0x1c4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d036      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a57      	ldr	r2, [pc, #348]	; (8002668 <HAL_DMA_IRQHandler+0x1c8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d031      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a56      	ldr	r2, [pc, #344]	; (800266c <HAL_DMA_IRQHandler+0x1cc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d02c      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a54      	ldr	r2, [pc, #336]	; (8002670 <HAL_DMA_IRQHandler+0x1d0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d027      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a53      	ldr	r2, [pc, #332]	; (8002674 <HAL_DMA_IRQHandler+0x1d4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d022      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a51      	ldr	r2, [pc, #324]	; (8002678 <HAL_DMA_IRQHandler+0x1d8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01d      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a50      	ldr	r2, [pc, #320]	; (800267c <HAL_DMA_IRQHandler+0x1dc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d018      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a4e      	ldr	r2, [pc, #312]	; (8002680 <HAL_DMA_IRQHandler+0x1e0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a4d      	ldr	r2, [pc, #308]	; (8002684 <HAL_DMA_IRQHandler+0x1e4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00e      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a4b      	ldr	r2, [pc, #300]	; (8002688 <HAL_DMA_IRQHandler+0x1e8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d009      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a4a      	ldr	r2, [pc, #296]	; (800268c <HAL_DMA_IRQHandler+0x1ec>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d004      	beq.n	8002572 <HAL_DMA_IRQHandler+0xd2>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a48      	ldr	r2, [pc, #288]	; (8002690 <HAL_DMA_IRQHandler+0x1f0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_DMA_IRQHandler+0xd6>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_DMA_IRQHandler+0xd8>
 8002576:	2300      	movs	r3, #0
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 842b 	beq.w	8002dd4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	2208      	movs	r2, #8
 8002588:	409a      	lsls	r2, r3
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80a2 	beq.w	80026d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2e      	ldr	r2, [pc, #184]	; (8002654 <HAL_DMA_IRQHandler+0x1b4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d04a      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2d      	ldr	r2, [pc, #180]	; (8002658 <HAL_DMA_IRQHandler+0x1b8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d045      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a2b      	ldr	r2, [pc, #172]	; (800265c <HAL_DMA_IRQHandler+0x1bc>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d040      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2a      	ldr	r2, [pc, #168]	; (8002660 <HAL_DMA_IRQHandler+0x1c0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d03b      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a28      	ldr	r2, [pc, #160]	; (8002664 <HAL_DMA_IRQHandler+0x1c4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d036      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a27      	ldr	r2, [pc, #156]	; (8002668 <HAL_DMA_IRQHandler+0x1c8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d031      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a25      	ldr	r2, [pc, #148]	; (800266c <HAL_DMA_IRQHandler+0x1cc>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d02c      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a24      	ldr	r2, [pc, #144]	; (8002670 <HAL_DMA_IRQHandler+0x1d0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d027      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a22      	ldr	r2, [pc, #136]	; (8002674 <HAL_DMA_IRQHandler+0x1d4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d022      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a21      	ldr	r2, [pc, #132]	; (8002678 <HAL_DMA_IRQHandler+0x1d8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d01d      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1f      	ldr	r2, [pc, #124]	; (800267c <HAL_DMA_IRQHandler+0x1dc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d018      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <HAL_DMA_IRQHandler+0x1e0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d013      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <HAL_DMA_IRQHandler+0x1e4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00e      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <HAL_DMA_IRQHandler+0x1e8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d009      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a19      	ldr	r2, [pc, #100]	; (800268c <HAL_DMA_IRQHandler+0x1ec>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d004      	beq.n	8002634 <HAL_DMA_IRQHandler+0x194>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a18      	ldr	r2, [pc, #96]	; (8002690 <HAL_DMA_IRQHandler+0x1f0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d12f      	bne.n	8002694 <HAL_DMA_IRQHandler+0x1f4>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	bf14      	ite	ne
 8002642:	2301      	movne	r3, #1
 8002644:	2300      	moveq	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	e02e      	b.n	80026a8 <HAL_DMA_IRQHandler+0x208>
 800264a:	bf00      	nop
 800264c:	24000004 	.word	0x24000004
 8002650:	1b4e81b5 	.word	0x1b4e81b5
 8002654:	40020010 	.word	0x40020010
 8002658:	40020028 	.word	0x40020028
 800265c:	40020040 	.word	0x40020040
 8002660:	40020058 	.word	0x40020058
 8002664:	40020070 	.word	0x40020070
 8002668:	40020088 	.word	0x40020088
 800266c:	400200a0 	.word	0x400200a0
 8002670:	400200b8 	.word	0x400200b8
 8002674:	40020410 	.word	0x40020410
 8002678:	40020428 	.word	0x40020428
 800267c:	40020440 	.word	0x40020440
 8002680:	40020458 	.word	0x40020458
 8002684:	40020470 	.word	0x40020470
 8002688:	40020488 	.word	0x40020488
 800268c:	400204a0 	.word	0x400204a0
 8002690:	400204b8 	.word	0x400204b8
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d015      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0204 	bic.w	r2, r2, #4
 80026ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2208      	movs	r2, #8
 80026c6:	409a      	lsls	r2, r3
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	fa22 f303 	lsr.w	r3, r2, r3
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d06e      	beq.n	80027cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a69      	ldr	r2, [pc, #420]	; (8002898 <HAL_DMA_IRQHandler+0x3f8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d04a      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a67      	ldr	r2, [pc, #412]	; (800289c <HAL_DMA_IRQHandler+0x3fc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d045      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a66      	ldr	r2, [pc, #408]	; (80028a0 <HAL_DMA_IRQHandler+0x400>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d040      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a64      	ldr	r2, [pc, #400]	; (80028a4 <HAL_DMA_IRQHandler+0x404>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d03b      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a63      	ldr	r2, [pc, #396]	; (80028a8 <HAL_DMA_IRQHandler+0x408>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d036      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a61      	ldr	r2, [pc, #388]	; (80028ac <HAL_DMA_IRQHandler+0x40c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d031      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a60      	ldr	r2, [pc, #384]	; (80028b0 <HAL_DMA_IRQHandler+0x410>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d02c      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a5e      	ldr	r2, [pc, #376]	; (80028b4 <HAL_DMA_IRQHandler+0x414>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d027      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a5d      	ldr	r2, [pc, #372]	; (80028b8 <HAL_DMA_IRQHandler+0x418>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d022      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a5b      	ldr	r2, [pc, #364]	; (80028bc <HAL_DMA_IRQHandler+0x41c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01d      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a5a      	ldr	r2, [pc, #360]	; (80028c0 <HAL_DMA_IRQHandler+0x420>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d018      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <HAL_DMA_IRQHandler+0x424>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a57      	ldr	r2, [pc, #348]	; (80028c8 <HAL_DMA_IRQHandler+0x428>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00e      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a55      	ldr	r2, [pc, #340]	; (80028cc <HAL_DMA_IRQHandler+0x42c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d009      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a54      	ldr	r2, [pc, #336]	; (80028d0 <HAL_DMA_IRQHandler+0x430>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_DMA_IRQHandler+0x2ee>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_DMA_IRQHandler+0x434>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10a      	bne.n	80027a4 <HAL_DMA_IRQHandler+0x304>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e003      	b.n	80027ac <HAL_DMA_IRQHandler+0x30c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2300      	movs	r3, #0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00d      	beq.n	80027cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	2201      	movs	r2, #1
 80027ba:	409a      	lsls	r2, r3
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	f043 0202 	orr.w	r2, r3, #2
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	2204      	movs	r2, #4
 80027d6:	409a      	lsls	r2, r3
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 808f 	beq.w	8002900 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2c      	ldr	r2, [pc, #176]	; (8002898 <HAL_DMA_IRQHandler+0x3f8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d04a      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a2a      	ldr	r2, [pc, #168]	; (800289c <HAL_DMA_IRQHandler+0x3fc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d045      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a29      	ldr	r2, [pc, #164]	; (80028a0 <HAL_DMA_IRQHandler+0x400>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d040      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <HAL_DMA_IRQHandler+0x404>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d03b      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a26      	ldr	r2, [pc, #152]	; (80028a8 <HAL_DMA_IRQHandler+0x408>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d036      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a24      	ldr	r2, [pc, #144]	; (80028ac <HAL_DMA_IRQHandler+0x40c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d031      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a23      	ldr	r2, [pc, #140]	; (80028b0 <HAL_DMA_IRQHandler+0x410>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d02c      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <HAL_DMA_IRQHandler+0x414>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d027      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a20      	ldr	r2, [pc, #128]	; (80028b8 <HAL_DMA_IRQHandler+0x418>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d022      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_DMA_IRQHandler+0x41c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01d      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <HAL_DMA_IRQHandler+0x420>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d018      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <HAL_DMA_IRQHandler+0x424>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1a      	ldr	r2, [pc, #104]	; (80028c8 <HAL_DMA_IRQHandler+0x428>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00e      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a18      	ldr	r2, [pc, #96]	; (80028cc <HAL_DMA_IRQHandler+0x42c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <HAL_DMA_IRQHandler+0x430>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_DMA_IRQHandler+0x3e2>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <HAL_DMA_IRQHandler+0x434>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d12a      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x438>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e023      	b.n	80028e0 <HAL_DMA_IRQHandler+0x440>
 8002898:	40020010 	.word	0x40020010
 800289c:	40020028 	.word	0x40020028
 80028a0:	40020040 	.word	0x40020040
 80028a4:	40020058 	.word	0x40020058
 80028a8:	40020070 	.word	0x40020070
 80028ac:	40020088 	.word	0x40020088
 80028b0:	400200a0 	.word	0x400200a0
 80028b4:	400200b8 	.word	0x400200b8
 80028b8:	40020410 	.word	0x40020410
 80028bc:	40020428 	.word	0x40020428
 80028c0:	40020440 	.word	0x40020440
 80028c4:	40020458 	.word	0x40020458
 80028c8:	40020470 	.word	0x40020470
 80028cc:	40020488 	.word	0x40020488
 80028d0:	400204a0 	.word	0x400204a0
 80028d4:	400204b8 	.word	0x400204b8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2300      	movs	r3, #0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00d      	beq.n	8002900 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	2204      	movs	r2, #4
 80028ee:	409a      	lsls	r2, r3
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f8:	f043 0204 	orr.w	r2, r3, #4
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	2210      	movs	r2, #16
 800290a:	409a      	lsls	r2, r3
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80a6 	beq.w	8002a62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a85      	ldr	r2, [pc, #532]	; (8002b30 <HAL_DMA_IRQHandler+0x690>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d04a      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a83      	ldr	r2, [pc, #524]	; (8002b34 <HAL_DMA_IRQHandler+0x694>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d045      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a82      	ldr	r2, [pc, #520]	; (8002b38 <HAL_DMA_IRQHandler+0x698>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d040      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a80      	ldr	r2, [pc, #512]	; (8002b3c <HAL_DMA_IRQHandler+0x69c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d03b      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a7f      	ldr	r2, [pc, #508]	; (8002b40 <HAL_DMA_IRQHandler+0x6a0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d036      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a7d      	ldr	r2, [pc, #500]	; (8002b44 <HAL_DMA_IRQHandler+0x6a4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d031      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a7c      	ldr	r2, [pc, #496]	; (8002b48 <HAL_DMA_IRQHandler+0x6a8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d02c      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a7a      	ldr	r2, [pc, #488]	; (8002b4c <HAL_DMA_IRQHandler+0x6ac>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d027      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a79      	ldr	r2, [pc, #484]	; (8002b50 <HAL_DMA_IRQHandler+0x6b0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d022      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a77      	ldr	r2, [pc, #476]	; (8002b54 <HAL_DMA_IRQHandler+0x6b4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01d      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a76      	ldr	r2, [pc, #472]	; (8002b58 <HAL_DMA_IRQHandler+0x6b8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d018      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a74      	ldr	r2, [pc, #464]	; (8002b5c <HAL_DMA_IRQHandler+0x6bc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a73      	ldr	r2, [pc, #460]	; (8002b60 <HAL_DMA_IRQHandler+0x6c0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00e      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a71      	ldr	r2, [pc, #452]	; (8002b64 <HAL_DMA_IRQHandler+0x6c4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d009      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a70      	ldr	r2, [pc, #448]	; (8002b68 <HAL_DMA_IRQHandler+0x6c8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d004      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x516>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6e      	ldr	r2, [pc, #440]	; (8002b6c <HAL_DMA_IRQHandler+0x6cc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d10a      	bne.n	80029cc <HAL_DMA_IRQHandler+0x52c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e009      	b.n	80029e0 <HAL_DMA_IRQHandler+0x540>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf14      	ite	ne
 80029da:	2301      	movne	r3, #1
 80029dc:	2300      	moveq	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d03e      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	2210      	movs	r2, #16
 80029ee:	409a      	lsls	r2, r3
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d018      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d108      	bne.n	8002a22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d024      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
 8002a20:	e01f      	b.n	8002a62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01b      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
 8002a32:	e016      	b.n	8002a62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0208 	bic.w	r2, r2, #8
 8002a50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8110 	beq.w	8002c98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a2c      	ldr	r2, [pc, #176]	; (8002b30 <HAL_DMA_IRQHandler+0x690>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d04a      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a2b      	ldr	r2, [pc, #172]	; (8002b34 <HAL_DMA_IRQHandler+0x694>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d045      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a29      	ldr	r2, [pc, #164]	; (8002b38 <HAL_DMA_IRQHandler+0x698>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d040      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <HAL_DMA_IRQHandler+0x69c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d03b      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <HAL_DMA_IRQHandler+0x6a0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d036      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a25      	ldr	r2, [pc, #148]	; (8002b44 <HAL_DMA_IRQHandler+0x6a4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d031      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <HAL_DMA_IRQHandler+0x6a8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d02c      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <HAL_DMA_IRQHandler+0x6ac>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d027      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <HAL_DMA_IRQHandler+0x6b0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d022      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <HAL_DMA_IRQHandler+0x6b4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <HAL_DMA_IRQHandler+0x6b8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d018      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <HAL_DMA_IRQHandler+0x6bc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <HAL_DMA_IRQHandler+0x6c0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a19      	ldr	r2, [pc, #100]	; (8002b64 <HAL_DMA_IRQHandler+0x6c4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <HAL_DMA_IRQHandler+0x6c8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x678>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <HAL_DMA_IRQHandler+0x6cc>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d12b      	bne.n	8002b70 <HAL_DMA_IRQHandler+0x6d0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	e02a      	b.n	8002b84 <HAL_DMA_IRQHandler+0x6e4>
 8002b2e:	bf00      	nop
 8002b30:	40020010 	.word	0x40020010
 8002b34:	40020028 	.word	0x40020028
 8002b38:	40020040 	.word	0x40020040
 8002b3c:	40020058 	.word	0x40020058
 8002b40:	40020070 	.word	0x40020070
 8002b44:	40020088 	.word	0x40020088
 8002b48:	400200a0 	.word	0x400200a0
 8002b4c:	400200b8 	.word	0x400200b8
 8002b50:	40020410 	.word	0x40020410
 8002b54:	40020428 	.word	0x40020428
 8002b58:	40020440 	.word	0x40020440
 8002b5c:	40020458 	.word	0x40020458
 8002b60:	40020470 	.word	0x40020470
 8002b64:	40020488 	.word	0x40020488
 8002b68:	400204a0 	.word	0x400204a0
 8002b6c:	400204b8 	.word	0x400204b8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bf14      	ite	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	2300      	moveq	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 8087 	beq.w	8002c98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	2220      	movs	r2, #32
 8002b94:	409a      	lsls	r2, r3
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d139      	bne.n	8002c1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0216 	bic.w	r2, r2, #22
 8002bb4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <HAL_DMA_IRQHandler+0x736>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0208 	bic.w	r2, r2, #8
 8002be4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	223f      	movs	r2, #63	; 0x3f
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 834a 	beq.w	80032a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
          }
          return;
 8002c18:	e344      	b.n	80032a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d018      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d108      	bne.n	8002c48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d02c      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4798      	blx	r3
 8002c46:	e027      	b.n	8002c98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d023      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	4798      	blx	r3
 8002c58:	e01e      	b.n	8002c98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10f      	bne.n	8002c88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0210 	bic.w	r2, r2, #16
 8002c76:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8306 	beq.w	80032ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8088 	beq.w	8002dc0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a7a      	ldr	r2, [pc, #488]	; (8002ea8 <HAL_DMA_IRQHandler+0xa08>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d04a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a79      	ldr	r2, [pc, #484]	; (8002eac <HAL_DMA_IRQHandler+0xa0c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d045      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a77      	ldr	r2, [pc, #476]	; (8002eb0 <HAL_DMA_IRQHandler+0xa10>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d040      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a76      	ldr	r2, [pc, #472]	; (8002eb4 <HAL_DMA_IRQHandler+0xa14>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d03b      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a74      	ldr	r2, [pc, #464]	; (8002eb8 <HAL_DMA_IRQHandler+0xa18>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d036      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a73      	ldr	r2, [pc, #460]	; (8002ebc <HAL_DMA_IRQHandler+0xa1c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d031      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a71      	ldr	r2, [pc, #452]	; (8002ec0 <HAL_DMA_IRQHandler+0xa20>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02c      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a70      	ldr	r2, [pc, #448]	; (8002ec4 <HAL_DMA_IRQHandler+0xa24>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d027      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a6e      	ldr	r2, [pc, #440]	; (8002ec8 <HAL_DMA_IRQHandler+0xa28>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d022      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6d      	ldr	r2, [pc, #436]	; (8002ecc <HAL_DMA_IRQHandler+0xa2c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d01d      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6b      	ldr	r2, [pc, #428]	; (8002ed0 <HAL_DMA_IRQHandler+0xa30>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d018      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6a      	ldr	r2, [pc, #424]	; (8002ed4 <HAL_DMA_IRQHandler+0xa34>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a68      	ldr	r2, [pc, #416]	; (8002ed8 <HAL_DMA_IRQHandler+0xa38>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00e      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a67      	ldr	r2, [pc, #412]	; (8002edc <HAL_DMA_IRQHandler+0xa3c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d009      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a65      	ldr	r2, [pc, #404]	; (8002ee0 <HAL_DMA_IRQHandler+0xa40>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x8b8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a64      	ldr	r2, [pc, #400]	; (8002ee4 <HAL_DMA_IRQHandler+0xa44>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d108      	bne.n	8002d6a <HAL_DMA_IRQHandler+0x8ca>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	e007      	b.n	8002d7a <HAL_DMA_IRQHandler+0x8da>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d307      	bcc.n	8002d96 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f2      	bne.n	8002d7a <HAL_DMA_IRQHandler+0x8da>
 8002d94:	e000      	b.n	8002d98 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002d96:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2203      	movs	r2, #3
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002dae:	e003      	b.n	8002db8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8272 	beq.w	80032ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	4798      	blx	r3
 8002dd2:	e26c      	b.n	80032ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a43      	ldr	r2, [pc, #268]	; (8002ee8 <HAL_DMA_IRQHandler+0xa48>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d022      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x984>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a42      	ldr	r2, [pc, #264]	; (8002eec <HAL_DMA_IRQHandler+0xa4c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d01d      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x984>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a40      	ldr	r2, [pc, #256]	; (8002ef0 <HAL_DMA_IRQHandler+0xa50>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d018      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x984>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a3f      	ldr	r2, [pc, #252]	; (8002ef4 <HAL_DMA_IRQHandler+0xa54>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d013      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x984>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a3d      	ldr	r2, [pc, #244]	; (8002ef8 <HAL_DMA_IRQHandler+0xa58>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00e      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x984>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a3c      	ldr	r2, [pc, #240]	; (8002efc <HAL_DMA_IRQHandler+0xa5c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d009      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x984>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a3a      	ldr	r2, [pc, #232]	; (8002f00 <HAL_DMA_IRQHandler+0xa60>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d004      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x984>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a39      	ldr	r2, [pc, #228]	; (8002f04 <HAL_DMA_IRQHandler+0xa64>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d101      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x988>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_DMA_IRQHandler+0x98a>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 823f 	beq.w	80032ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	2204      	movs	r2, #4
 8002e42:	409a      	lsls	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80cd 	beq.w	8002fe8 <HAL_DMA_IRQHandler+0xb48>
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80c7 	beq.w	8002fe8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	2204      	movs	r2, #4
 8002e64:	409a      	lsls	r2, r3
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d049      	beq.n	8002f08 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8210 	beq.w	80032a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e90:	e20a      	b.n	80032a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8206 	beq.w	80032a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ea4:	e200      	b.n	80032a8 <HAL_DMA_IRQHandler+0xe08>
 8002ea6:	bf00      	nop
 8002ea8:	40020010 	.word	0x40020010
 8002eac:	40020028 	.word	0x40020028
 8002eb0:	40020040 	.word	0x40020040
 8002eb4:	40020058 	.word	0x40020058
 8002eb8:	40020070 	.word	0x40020070
 8002ebc:	40020088 	.word	0x40020088
 8002ec0:	400200a0 	.word	0x400200a0
 8002ec4:	400200b8 	.word	0x400200b8
 8002ec8:	40020410 	.word	0x40020410
 8002ecc:	40020428 	.word	0x40020428
 8002ed0:	40020440 	.word	0x40020440
 8002ed4:	40020458 	.word	0x40020458
 8002ed8:	40020470 	.word	0x40020470
 8002edc:	40020488 	.word	0x40020488
 8002ee0:	400204a0 	.word	0x400204a0
 8002ee4:	400204b8 	.word	0x400204b8
 8002ee8:	58025408 	.word	0x58025408
 8002eec:	5802541c 	.word	0x5802541c
 8002ef0:	58025430 	.word	0x58025430
 8002ef4:	58025444 	.word	0x58025444
 8002ef8:	58025458 	.word	0x58025458
 8002efc:	5802546c 	.word	0x5802546c
 8002f00:	58025480 	.word	0x58025480
 8002f04:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d160      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a7f      	ldr	r2, [pc, #508]	; (8003114 <HAL_DMA_IRQHandler+0xc74>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d04a      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a7d      	ldr	r2, [pc, #500]	; (8003118 <HAL_DMA_IRQHandler+0xc78>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d045      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a7c      	ldr	r2, [pc, #496]	; (800311c <HAL_DMA_IRQHandler+0xc7c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d040      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a7a      	ldr	r2, [pc, #488]	; (8003120 <HAL_DMA_IRQHandler+0xc80>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d03b      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a79      	ldr	r2, [pc, #484]	; (8003124 <HAL_DMA_IRQHandler+0xc84>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d036      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a77      	ldr	r2, [pc, #476]	; (8003128 <HAL_DMA_IRQHandler+0xc88>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d031      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a76      	ldr	r2, [pc, #472]	; (800312c <HAL_DMA_IRQHandler+0xc8c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d02c      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a74      	ldr	r2, [pc, #464]	; (8003130 <HAL_DMA_IRQHandler+0xc90>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d027      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a73      	ldr	r2, [pc, #460]	; (8003134 <HAL_DMA_IRQHandler+0xc94>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d022      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a71      	ldr	r2, [pc, #452]	; (8003138 <HAL_DMA_IRQHandler+0xc98>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01d      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a70      	ldr	r2, [pc, #448]	; (800313c <HAL_DMA_IRQHandler+0xc9c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d018      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a6e      	ldr	r2, [pc, #440]	; (8003140 <HAL_DMA_IRQHandler+0xca0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a6d      	ldr	r2, [pc, #436]	; (8003144 <HAL_DMA_IRQHandler+0xca4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d00e      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a6b      	ldr	r2, [pc, #428]	; (8003148 <HAL_DMA_IRQHandler+0xca8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d009      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a6a      	ldr	r2, [pc, #424]	; (800314c <HAL_DMA_IRQHandler+0xcac>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xb12>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a68      	ldr	r2, [pc, #416]	; (8003150 <HAL_DMA_IRQHandler+0xcb0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d108      	bne.n	8002fc4 <HAL_DMA_IRQHandler+0xb24>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0208 	bic.w	r2, r2, #8
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	e007      	b.n	8002fd4 <HAL_DMA_IRQHandler+0xb34>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0204 	bic.w	r2, r2, #4
 8002fd2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8165 	beq.w	80032a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fe6:	e15f      	b.n	80032a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80c5 	beq.w	8003188 <HAL_DMA_IRQHandler+0xce8>
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80bf 	beq.w	8003188 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	2202      	movs	r2, #2
 8003014:	409a      	lsls	r2, r3
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d018      	beq.n	8003056 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 813a 	beq.w	80032ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003040:	e134      	b.n	80032ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8130 	beq.w	80032ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003054:	e12a      	b.n	80032ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	f040 8089 	bne.w	8003174 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2b      	ldr	r2, [pc, #172]	; (8003114 <HAL_DMA_IRQHandler+0xc74>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d04a      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a29      	ldr	r2, [pc, #164]	; (8003118 <HAL_DMA_IRQHandler+0xc78>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d045      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a28      	ldr	r2, [pc, #160]	; (800311c <HAL_DMA_IRQHandler+0xc7c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d040      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a26      	ldr	r2, [pc, #152]	; (8003120 <HAL_DMA_IRQHandler+0xc80>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d03b      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a25      	ldr	r2, [pc, #148]	; (8003124 <HAL_DMA_IRQHandler+0xc84>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d036      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a23      	ldr	r2, [pc, #140]	; (8003128 <HAL_DMA_IRQHandler+0xc88>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d031      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a22      	ldr	r2, [pc, #136]	; (800312c <HAL_DMA_IRQHandler+0xc8c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d02c      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a20      	ldr	r2, [pc, #128]	; (8003130 <HAL_DMA_IRQHandler+0xc90>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d027      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1f      	ldr	r2, [pc, #124]	; (8003134 <HAL_DMA_IRQHandler+0xc94>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d022      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <HAL_DMA_IRQHandler+0xc98>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01d      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1c      	ldr	r2, [pc, #112]	; (800313c <HAL_DMA_IRQHandler+0xc9c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d018      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <HAL_DMA_IRQHandler+0xca0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a19      	ldr	r2, [pc, #100]	; (8003144 <HAL_DMA_IRQHandler+0xca4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00e      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a17      	ldr	r2, [pc, #92]	; (8003148 <HAL_DMA_IRQHandler+0xca8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d009      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a16      	ldr	r2, [pc, #88]	; (800314c <HAL_DMA_IRQHandler+0xcac>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d004      	beq.n	8003102 <HAL_DMA_IRQHandler+0xc62>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a14      	ldr	r2, [pc, #80]	; (8003150 <HAL_DMA_IRQHandler+0xcb0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d128      	bne.n	8003154 <HAL_DMA_IRQHandler+0xcb4>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0214 	bic.w	r2, r2, #20
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e027      	b.n	8003164 <HAL_DMA_IRQHandler+0xcc4>
 8003114:	40020010 	.word	0x40020010
 8003118:	40020028 	.word	0x40020028
 800311c:	40020040 	.word	0x40020040
 8003120:	40020058 	.word	0x40020058
 8003124:	40020070 	.word	0x40020070
 8003128:	40020088 	.word	0x40020088
 800312c:	400200a0 	.word	0x400200a0
 8003130:	400200b8 	.word	0x400200b8
 8003134:	40020410 	.word	0x40020410
 8003138:	40020428 	.word	0x40020428
 800313c:	40020440 	.word	0x40020440
 8003140:	40020458 	.word	0x40020458
 8003144:	40020470 	.word	0x40020470
 8003148:	40020488 	.word	0x40020488
 800314c:	400204a0 	.word	0x400204a0
 8003150:	400204b8 	.word	0x400204b8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 020a 	bic.w	r2, r2, #10
 8003162:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8097 	beq.w	80032ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003186:	e091      	b.n	80032ac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2208      	movs	r2, #8
 8003192:	409a      	lsls	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8088 	beq.w	80032ae <HAL_DMA_IRQHandler+0xe0e>
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8082 	beq.w	80032ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a41      	ldr	r2, [pc, #260]	; (80032b4 <HAL_DMA_IRQHandler+0xe14>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d04a      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a3f      	ldr	r2, [pc, #252]	; (80032b8 <HAL_DMA_IRQHandler+0xe18>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d045      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a3e      	ldr	r2, [pc, #248]	; (80032bc <HAL_DMA_IRQHandler+0xe1c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d040      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a3c      	ldr	r2, [pc, #240]	; (80032c0 <HAL_DMA_IRQHandler+0xe20>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d03b      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a3b      	ldr	r2, [pc, #236]	; (80032c4 <HAL_DMA_IRQHandler+0xe24>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d036      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a39      	ldr	r2, [pc, #228]	; (80032c8 <HAL_DMA_IRQHandler+0xe28>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d031      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a38      	ldr	r2, [pc, #224]	; (80032cc <HAL_DMA_IRQHandler+0xe2c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d02c      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a36      	ldr	r2, [pc, #216]	; (80032d0 <HAL_DMA_IRQHandler+0xe30>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d027      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a35      	ldr	r2, [pc, #212]	; (80032d4 <HAL_DMA_IRQHandler+0xe34>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d022      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a33      	ldr	r2, [pc, #204]	; (80032d8 <HAL_DMA_IRQHandler+0xe38>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01d      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a32      	ldr	r2, [pc, #200]	; (80032dc <HAL_DMA_IRQHandler+0xe3c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d018      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a30      	ldr	r2, [pc, #192]	; (80032e0 <HAL_DMA_IRQHandler+0xe40>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a2f      	ldr	r2, [pc, #188]	; (80032e4 <HAL_DMA_IRQHandler+0xe44>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00e      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2d      	ldr	r2, [pc, #180]	; (80032e8 <HAL_DMA_IRQHandler+0xe48>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d009      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2c      	ldr	r2, [pc, #176]	; (80032ec <HAL_DMA_IRQHandler+0xe4c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d004      	beq.n	800324a <HAL_DMA_IRQHandler+0xdaa>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2a      	ldr	r2, [pc, #168]	; (80032f0 <HAL_DMA_IRQHandler+0xe50>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d108      	bne.n	800325c <HAL_DMA_IRQHandler+0xdbc>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 021c 	bic.w	r2, r2, #28
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e007      	b.n	800326c <HAL_DMA_IRQHandler+0xdcc>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 020e 	bic.w	r2, r2, #14
 800326a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	2201      	movs	r2, #1
 8003276:	409a      	lsls	r2, r3
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
 80032a2:	e004      	b.n	80032ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80032a4:	bf00      	nop
 80032a6:	e002      	b.n	80032ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032a8:	bf00      	nop
 80032aa:	e000      	b.n	80032ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80032ae:	3728      	adds	r7, #40	; 0x28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40020010 	.word	0x40020010
 80032b8:	40020028 	.word	0x40020028
 80032bc:	40020040 	.word	0x40020040
 80032c0:	40020058 	.word	0x40020058
 80032c4:	40020070 	.word	0x40020070
 80032c8:	40020088 	.word	0x40020088
 80032cc:	400200a0 	.word	0x400200a0
 80032d0:	400200b8 	.word	0x400200b8
 80032d4:	40020410 	.word	0x40020410
 80032d8:	40020428 	.word	0x40020428
 80032dc:	40020440 	.word	0x40020440
 80032e0:	40020458 	.word	0x40020458
 80032e4:	40020470 	.word	0x40020470
 80032e8:	40020488 	.word	0x40020488
 80032ec:	400204a0 	.word	0x400204a0
 80032f0:	400204b8 	.word	0x400204b8

080032f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a7f      	ldr	r2, [pc, #508]	; (8003510 <DMA_SetConfig+0x21c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d072      	beq.n	80033fe <DMA_SetConfig+0x10a>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a7d      	ldr	r2, [pc, #500]	; (8003514 <DMA_SetConfig+0x220>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d06d      	beq.n	80033fe <DMA_SetConfig+0x10a>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a7c      	ldr	r2, [pc, #496]	; (8003518 <DMA_SetConfig+0x224>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d068      	beq.n	80033fe <DMA_SetConfig+0x10a>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a7a      	ldr	r2, [pc, #488]	; (800351c <DMA_SetConfig+0x228>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d063      	beq.n	80033fe <DMA_SetConfig+0x10a>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a79      	ldr	r2, [pc, #484]	; (8003520 <DMA_SetConfig+0x22c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d05e      	beq.n	80033fe <DMA_SetConfig+0x10a>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a77      	ldr	r2, [pc, #476]	; (8003524 <DMA_SetConfig+0x230>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d059      	beq.n	80033fe <DMA_SetConfig+0x10a>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a76      	ldr	r2, [pc, #472]	; (8003528 <DMA_SetConfig+0x234>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d054      	beq.n	80033fe <DMA_SetConfig+0x10a>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a74      	ldr	r2, [pc, #464]	; (800352c <DMA_SetConfig+0x238>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d04f      	beq.n	80033fe <DMA_SetConfig+0x10a>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a73      	ldr	r2, [pc, #460]	; (8003530 <DMA_SetConfig+0x23c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d04a      	beq.n	80033fe <DMA_SetConfig+0x10a>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a71      	ldr	r2, [pc, #452]	; (8003534 <DMA_SetConfig+0x240>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d045      	beq.n	80033fe <DMA_SetConfig+0x10a>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a70      	ldr	r2, [pc, #448]	; (8003538 <DMA_SetConfig+0x244>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d040      	beq.n	80033fe <DMA_SetConfig+0x10a>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a6e      	ldr	r2, [pc, #440]	; (800353c <DMA_SetConfig+0x248>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d03b      	beq.n	80033fe <DMA_SetConfig+0x10a>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6d      	ldr	r2, [pc, #436]	; (8003540 <DMA_SetConfig+0x24c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d036      	beq.n	80033fe <DMA_SetConfig+0x10a>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a6b      	ldr	r2, [pc, #428]	; (8003544 <DMA_SetConfig+0x250>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d031      	beq.n	80033fe <DMA_SetConfig+0x10a>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a6a      	ldr	r2, [pc, #424]	; (8003548 <DMA_SetConfig+0x254>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d02c      	beq.n	80033fe <DMA_SetConfig+0x10a>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a68      	ldr	r2, [pc, #416]	; (800354c <DMA_SetConfig+0x258>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d027      	beq.n	80033fe <DMA_SetConfig+0x10a>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a67      	ldr	r2, [pc, #412]	; (8003550 <DMA_SetConfig+0x25c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d022      	beq.n	80033fe <DMA_SetConfig+0x10a>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a65      	ldr	r2, [pc, #404]	; (8003554 <DMA_SetConfig+0x260>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01d      	beq.n	80033fe <DMA_SetConfig+0x10a>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a64      	ldr	r2, [pc, #400]	; (8003558 <DMA_SetConfig+0x264>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d018      	beq.n	80033fe <DMA_SetConfig+0x10a>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a62      	ldr	r2, [pc, #392]	; (800355c <DMA_SetConfig+0x268>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <DMA_SetConfig+0x10a>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a61      	ldr	r2, [pc, #388]	; (8003560 <DMA_SetConfig+0x26c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00e      	beq.n	80033fe <DMA_SetConfig+0x10a>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a5f      	ldr	r2, [pc, #380]	; (8003564 <DMA_SetConfig+0x270>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d009      	beq.n	80033fe <DMA_SetConfig+0x10a>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a5e      	ldr	r2, [pc, #376]	; (8003568 <DMA_SetConfig+0x274>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <DMA_SetConfig+0x10a>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a5c      	ldr	r2, [pc, #368]	; (800356c <DMA_SetConfig+0x278>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <DMA_SetConfig+0x10e>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <DMA_SetConfig+0x110>
 8003402:	2300      	movs	r3, #0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003410:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d004      	beq.n	8003424 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003422:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a39      	ldr	r2, [pc, #228]	; (8003510 <DMA_SetConfig+0x21c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d04a      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a38      	ldr	r2, [pc, #224]	; (8003514 <DMA_SetConfig+0x220>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d045      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a36      	ldr	r2, [pc, #216]	; (8003518 <DMA_SetConfig+0x224>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d040      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a35      	ldr	r2, [pc, #212]	; (800351c <DMA_SetConfig+0x228>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d03b      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a33      	ldr	r2, [pc, #204]	; (8003520 <DMA_SetConfig+0x22c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d036      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a32      	ldr	r2, [pc, #200]	; (8003524 <DMA_SetConfig+0x230>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d031      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a30      	ldr	r2, [pc, #192]	; (8003528 <DMA_SetConfig+0x234>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d02c      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2f      	ldr	r2, [pc, #188]	; (800352c <DMA_SetConfig+0x238>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d027      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2d      	ldr	r2, [pc, #180]	; (8003530 <DMA_SetConfig+0x23c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d022      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a2c      	ldr	r2, [pc, #176]	; (8003534 <DMA_SetConfig+0x240>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d01d      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2a      	ldr	r2, [pc, #168]	; (8003538 <DMA_SetConfig+0x244>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d018      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a29      	ldr	r2, [pc, #164]	; (800353c <DMA_SetConfig+0x248>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d013      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a27      	ldr	r2, [pc, #156]	; (8003540 <DMA_SetConfig+0x24c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00e      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a26      	ldr	r2, [pc, #152]	; (8003544 <DMA_SetConfig+0x250>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d009      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a24      	ldr	r2, [pc, #144]	; (8003548 <DMA_SetConfig+0x254>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d004      	beq.n	80034c4 <DMA_SetConfig+0x1d0>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a23      	ldr	r2, [pc, #140]	; (800354c <DMA_SetConfig+0x258>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d101      	bne.n	80034c8 <DMA_SetConfig+0x1d4>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <DMA_SetConfig+0x1d6>
 80034c8:	2300      	movs	r3, #0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d059      	beq.n	8003582 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	f003 031f 	and.w	r3, r3, #31
 80034d6:	223f      	movs	r2, #63	; 0x3f
 80034d8:	409a      	lsls	r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d138      	bne.n	8003570 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800350e:	e086      	b.n	800361e <DMA_SetConfig+0x32a>
 8003510:	40020010 	.word	0x40020010
 8003514:	40020028 	.word	0x40020028
 8003518:	40020040 	.word	0x40020040
 800351c:	40020058 	.word	0x40020058
 8003520:	40020070 	.word	0x40020070
 8003524:	40020088 	.word	0x40020088
 8003528:	400200a0 	.word	0x400200a0
 800352c:	400200b8 	.word	0x400200b8
 8003530:	40020410 	.word	0x40020410
 8003534:	40020428 	.word	0x40020428
 8003538:	40020440 	.word	0x40020440
 800353c:	40020458 	.word	0x40020458
 8003540:	40020470 	.word	0x40020470
 8003544:	40020488 	.word	0x40020488
 8003548:	400204a0 	.word	0x400204a0
 800354c:	400204b8 	.word	0x400204b8
 8003550:	58025408 	.word	0x58025408
 8003554:	5802541c 	.word	0x5802541c
 8003558:	58025430 	.word	0x58025430
 800355c:	58025444 	.word	0x58025444
 8003560:	58025458 	.word	0x58025458
 8003564:	5802546c 	.word	0x5802546c
 8003568:	58025480 	.word	0x58025480
 800356c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	60da      	str	r2, [r3, #12]
}
 8003580:	e04d      	b.n	800361e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a29      	ldr	r2, [pc, #164]	; (800362c <DMA_SetConfig+0x338>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d022      	beq.n	80035d2 <DMA_SetConfig+0x2de>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a27      	ldr	r2, [pc, #156]	; (8003630 <DMA_SetConfig+0x33c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01d      	beq.n	80035d2 <DMA_SetConfig+0x2de>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a26      	ldr	r2, [pc, #152]	; (8003634 <DMA_SetConfig+0x340>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d018      	beq.n	80035d2 <DMA_SetConfig+0x2de>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a24      	ldr	r2, [pc, #144]	; (8003638 <DMA_SetConfig+0x344>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <DMA_SetConfig+0x2de>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a23      	ldr	r2, [pc, #140]	; (800363c <DMA_SetConfig+0x348>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00e      	beq.n	80035d2 <DMA_SetConfig+0x2de>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a21      	ldr	r2, [pc, #132]	; (8003640 <DMA_SetConfig+0x34c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d009      	beq.n	80035d2 <DMA_SetConfig+0x2de>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a20      	ldr	r2, [pc, #128]	; (8003644 <DMA_SetConfig+0x350>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d004      	beq.n	80035d2 <DMA_SetConfig+0x2de>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <DMA_SetConfig+0x354>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d101      	bne.n	80035d6 <DMA_SetConfig+0x2e2>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <DMA_SetConfig+0x2e4>
 80035d6:	2300      	movs	r3, #0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2201      	movs	r2, #1
 80035e6:	409a      	lsls	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	d108      	bne.n	800360e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	60da      	str	r2, [r3, #12]
}
 800360c:	e007      	b.n	800361e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	60da      	str	r2, [r3, #12]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	58025408 	.word	0x58025408
 8003630:	5802541c 	.word	0x5802541c
 8003634:	58025430 	.word	0x58025430
 8003638:	58025444 	.word	0x58025444
 800363c:	58025458 	.word	0x58025458
 8003640:	5802546c 	.word	0x5802546c
 8003644:	58025480 	.word	0x58025480
 8003648:	58025494 	.word	0x58025494

0800364c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a42      	ldr	r2, [pc, #264]	; (8003764 <DMA_CalcBaseAndBitshift+0x118>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d04a      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a41      	ldr	r2, [pc, #260]	; (8003768 <DMA_CalcBaseAndBitshift+0x11c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d045      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3f      	ldr	r2, [pc, #252]	; (800376c <DMA_CalcBaseAndBitshift+0x120>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d040      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a3e      	ldr	r2, [pc, #248]	; (8003770 <DMA_CalcBaseAndBitshift+0x124>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d03b      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a3c      	ldr	r2, [pc, #240]	; (8003774 <DMA_CalcBaseAndBitshift+0x128>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d036      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a3b      	ldr	r2, [pc, #236]	; (8003778 <DMA_CalcBaseAndBitshift+0x12c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d031      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a39      	ldr	r2, [pc, #228]	; (800377c <DMA_CalcBaseAndBitshift+0x130>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d02c      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a38      	ldr	r2, [pc, #224]	; (8003780 <DMA_CalcBaseAndBitshift+0x134>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d027      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a36      	ldr	r2, [pc, #216]	; (8003784 <DMA_CalcBaseAndBitshift+0x138>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d022      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a35      	ldr	r2, [pc, #212]	; (8003788 <DMA_CalcBaseAndBitshift+0x13c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d01d      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a33      	ldr	r2, [pc, #204]	; (800378c <DMA_CalcBaseAndBitshift+0x140>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d018      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a32      	ldr	r2, [pc, #200]	; (8003790 <DMA_CalcBaseAndBitshift+0x144>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d013      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a30      	ldr	r2, [pc, #192]	; (8003794 <DMA_CalcBaseAndBitshift+0x148>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00e      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2f      	ldr	r2, [pc, #188]	; (8003798 <DMA_CalcBaseAndBitshift+0x14c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d009      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a2d      	ldr	r2, [pc, #180]	; (800379c <DMA_CalcBaseAndBitshift+0x150>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d004      	beq.n	80036f4 <DMA_CalcBaseAndBitshift+0xa8>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a2c      	ldr	r2, [pc, #176]	; (80037a0 <DMA_CalcBaseAndBitshift+0x154>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <DMA_CalcBaseAndBitshift+0xac>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <DMA_CalcBaseAndBitshift+0xae>
 80036f8:	2300      	movs	r3, #0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d024      	beq.n	8003748 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	3b10      	subs	r3, #16
 8003706:	4a27      	ldr	r2, [pc, #156]	; (80037a4 <DMA_CalcBaseAndBitshift+0x158>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	4a24      	ldr	r2, [pc, #144]	; (80037a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003718:	5cd3      	ldrb	r3, [r2, r3]
 800371a:	461a      	mov	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b03      	cmp	r3, #3
 8003724:	d908      	bls.n	8003738 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <DMA_CalcBaseAndBitshift+0x160>)
 800372e:	4013      	ands	r3, r2
 8003730:	1d1a      	adds	r2, r3, #4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	659a      	str	r2, [r3, #88]	; 0x58
 8003736:	e00d      	b.n	8003754 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <DMA_CalcBaseAndBitshift+0x160>)
 8003740:	4013      	ands	r3, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6593      	str	r3, [r2, #88]	; 0x58
 8003746:	e005      	b.n	8003754 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40020010 	.word	0x40020010
 8003768:	40020028 	.word	0x40020028
 800376c:	40020040 	.word	0x40020040
 8003770:	40020058 	.word	0x40020058
 8003774:	40020070 	.word	0x40020070
 8003778:	40020088 	.word	0x40020088
 800377c:	400200a0 	.word	0x400200a0
 8003780:	400200b8 	.word	0x400200b8
 8003784:	40020410 	.word	0x40020410
 8003788:	40020428 	.word	0x40020428
 800378c:	40020440 	.word	0x40020440
 8003790:	40020458 	.word	0x40020458
 8003794:	40020470 	.word	0x40020470
 8003798:	40020488 	.word	0x40020488
 800379c:	400204a0 	.word	0x400204a0
 80037a0:	400204b8 	.word	0x400204b8
 80037a4:	aaaaaaab 	.word	0xaaaaaaab
 80037a8:	0800972c 	.word	0x0800972c
 80037ac:	fffffc00 	.word	0xfffffc00

080037b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d120      	bne.n	8003806 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d858      	bhi.n	800387e <DMA_CheckFifoParam+0xce>
 80037cc:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <DMA_CheckFifoParam+0x24>)
 80037ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d2:	bf00      	nop
 80037d4:	080037e5 	.word	0x080037e5
 80037d8:	080037f7 	.word	0x080037f7
 80037dc:	080037e5 	.word	0x080037e5
 80037e0:	0800387f 	.word	0x0800387f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d048      	beq.n	8003882 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037f4:	e045      	b.n	8003882 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037fe:	d142      	bne.n	8003886 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003804:	e03f      	b.n	8003886 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380e:	d123      	bne.n	8003858 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	2b03      	cmp	r3, #3
 8003816:	d838      	bhi.n	800388a <DMA_CheckFifoParam+0xda>
 8003818:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <DMA_CheckFifoParam+0x70>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	08003831 	.word	0x08003831
 8003824:	08003837 	.word	0x08003837
 8003828:	08003831 	.word	0x08003831
 800382c:	08003849 	.word	0x08003849
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
        break;
 8003834:	e030      	b.n	8003898 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d025      	beq.n	800388e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003846:	e022      	b.n	800388e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003850:	d11f      	bne.n	8003892 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003856:	e01c      	b.n	8003892 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	2b02      	cmp	r3, #2
 800385e:	d902      	bls.n	8003866 <DMA_CheckFifoParam+0xb6>
 8003860:	2b03      	cmp	r3, #3
 8003862:	d003      	beq.n	800386c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003864:	e018      	b.n	8003898 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
        break;
 800386a:	e015      	b.n	8003898 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00e      	beq.n	8003896 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
    break;
 800387c:	e00b      	b.n	8003896 <DMA_CheckFifoParam+0xe6>
        break;
 800387e:	bf00      	nop
 8003880:	e00a      	b.n	8003898 <DMA_CheckFifoParam+0xe8>
        break;
 8003882:	bf00      	nop
 8003884:	e008      	b.n	8003898 <DMA_CheckFifoParam+0xe8>
        break;
 8003886:	bf00      	nop
 8003888:	e006      	b.n	8003898 <DMA_CheckFifoParam+0xe8>
        break;
 800388a:	bf00      	nop
 800388c:	e004      	b.n	8003898 <DMA_CheckFifoParam+0xe8>
        break;
 800388e:	bf00      	nop
 8003890:	e002      	b.n	8003898 <DMA_CheckFifoParam+0xe8>
        break;
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <DMA_CheckFifoParam+0xe8>
    break;
 8003896:	bf00      	nop
    }
  }

  return status;
 8003898:	7bfb      	ldrb	r3, [r7, #15]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop

080038a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a38      	ldr	r2, [pc, #224]	; (800399c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a36      	ldr	r2, [pc, #216]	; (80039a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01d      	beq.n	8003906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a35      	ldr	r2, [pc, #212]	; (80039a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d018      	beq.n	8003906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a33      	ldr	r2, [pc, #204]	; (80039a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a32      	ldr	r2, [pc, #200]	; (80039ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a30      	ldr	r2, [pc, #192]	; (80039b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2f      	ldr	r2, [pc, #188]	; (80039b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2d      	ldr	r2, [pc, #180]	; (80039b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01a      	beq.n	8003946 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	3b08      	subs	r3, #8
 8003918:	4a28      	ldr	r2, [pc, #160]	; (80039bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	461a      	mov	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a24      	ldr	r2, [pc, #144]	; (80039c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003934:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 031f 	and.w	r3, r3, #31
 800393c:	2201      	movs	r2, #1
 800393e:	409a      	lsls	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003944:	e024      	b.n	8003990 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	3b10      	subs	r3, #16
 800394e:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4a1c      	ldr	r2, [pc, #112]	; (80039cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d806      	bhi.n	800396e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d902      	bls.n	800396e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3308      	adds	r3, #8
 800396c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	461a      	mov	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003980:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	2201      	movs	r2, #1
 800398a:	409a      	lsls	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	58025408 	.word	0x58025408
 80039a0:	5802541c 	.word	0x5802541c
 80039a4:	58025430 	.word	0x58025430
 80039a8:	58025444 	.word	0x58025444
 80039ac:	58025458 	.word	0x58025458
 80039b0:	5802546c 	.word	0x5802546c
 80039b4:	58025480 	.word	0x58025480
 80039b8:	58025494 	.word	0x58025494
 80039bc:	cccccccd 	.word	0xcccccccd
 80039c0:	16009600 	.word	0x16009600
 80039c4:	58025880 	.word	0x58025880
 80039c8:	aaaaaaab 	.word	0xaaaaaaab
 80039cc:	400204b8 	.word	0x400204b8
 80039d0:	4002040f 	.word	0x4002040f
 80039d4:	10008200 	.word	0x10008200
 80039d8:	40020880 	.word	0x40020880

080039dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d04a      	beq.n	8003a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d847      	bhi.n	8003a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a25      	ldr	r2, [pc, #148]	; (8003a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d022      	beq.n	8003a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d01d      	beq.n	8003a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a22      	ldr	r2, [pc, #136]	; (8003a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d018      	beq.n	8003a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a21      	ldr	r2, [pc, #132]	; (8003aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00e      	beq.n	8003a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1e      	ldr	r2, [pc, #120]	; (8003aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d009      	beq.n	8003a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1c      	ldr	r2, [pc, #112]	; (8003aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d101      	bne.n	8003a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003a64:	671a      	str	r2, [r3, #112]	; 0x70
 8003a66:	e009      	b.n	8003a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4b14      	ldr	r3, [pc, #80]	; (8003abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	461a      	mov	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a11      	ldr	r2, [pc, #68]	; (8003ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003a7a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	2201      	movs	r2, #1
 8003a82:	409a      	lsls	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	58025408 	.word	0x58025408
 8003a98:	5802541c 	.word	0x5802541c
 8003a9c:	58025430 	.word	0x58025430
 8003aa0:	58025444 	.word	0x58025444
 8003aa4:	58025458 	.word	0x58025458
 8003aa8:	5802546c 	.word	0x5802546c
 8003aac:	58025480 	.word	0x58025480
 8003ab0:	58025494 	.word	0x58025494
 8003ab4:	1600963f 	.word	0x1600963f
 8003ab8:	58025940 	.word	0x58025940
 8003abc:	1000823f 	.word	0x1000823f
 8003ac0:	40020940 	.word	0x40020940

08003ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003ad2:	4b89      	ldr	r3, [pc, #548]	; (8003cf8 <HAL_GPIO_Init+0x234>)
 8003ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ad6:	e194      	b.n	8003e02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	2101      	movs	r1, #1
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8186 	beq.w	8003dfc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d005      	beq.n	8003b08 <HAL_GPIO_Init+0x44>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d130      	bne.n	8003b6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b3e:	2201      	movs	r2, #1
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	091b      	lsrs	r3, r3, #4
 8003b54:	f003 0201 	and.w	r2, r3, #1
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d017      	beq.n	8003ba6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	2203      	movs	r2, #3
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d123      	bne.n	8003bfa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	08da      	lsrs	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3208      	adds	r2, #8
 8003bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	220f      	movs	r2, #15
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	08da      	lsrs	r2, r3, #3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3208      	adds	r2, #8
 8003bf4:	69b9      	ldr	r1, [r7, #24]
 8003bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	2203      	movs	r2, #3
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0203 	and.w	r2, r3, #3
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80e0 	beq.w	8003dfc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3c:	4b2f      	ldr	r3, [pc, #188]	; (8003cfc <HAL_GPIO_Init+0x238>)
 8003c3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c42:	4a2e      	ldr	r2, [pc, #184]	; (8003cfc <HAL_GPIO_Init+0x238>)
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <HAL_GPIO_Init+0x238>)
 8003c4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c5a:	4a29      	ldr	r2, [pc, #164]	; (8003d00 <HAL_GPIO_Init+0x23c>)
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	3302      	adds	r3, #2
 8003c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	220f      	movs	r2, #15
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a20      	ldr	r2, [pc, #128]	; (8003d04 <HAL_GPIO_Init+0x240>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d052      	beq.n	8003d2c <HAL_GPIO_Init+0x268>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <HAL_GPIO_Init+0x244>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d031      	beq.n	8003cf2 <HAL_GPIO_Init+0x22e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1e      	ldr	r2, [pc, #120]	; (8003d0c <HAL_GPIO_Init+0x248>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d02b      	beq.n	8003cee <HAL_GPIO_Init+0x22a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a1d      	ldr	r2, [pc, #116]	; (8003d10 <HAL_GPIO_Init+0x24c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d025      	beq.n	8003cea <HAL_GPIO_Init+0x226>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_GPIO_Init+0x250>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01f      	beq.n	8003ce6 <HAL_GPIO_Init+0x222>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <HAL_GPIO_Init+0x254>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d019      	beq.n	8003ce2 <HAL_GPIO_Init+0x21e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a1a      	ldr	r2, [pc, #104]	; (8003d1c <HAL_GPIO_Init+0x258>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_GPIO_Init+0x21a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a19      	ldr	r2, [pc, #100]	; (8003d20 <HAL_GPIO_Init+0x25c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00d      	beq.n	8003cda <HAL_GPIO_Init+0x216>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a18      	ldr	r2, [pc, #96]	; (8003d24 <HAL_GPIO_Init+0x260>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d007      	beq.n	8003cd6 <HAL_GPIO_Init+0x212>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <HAL_GPIO_Init+0x264>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d101      	bne.n	8003cd2 <HAL_GPIO_Init+0x20e>
 8003cce:	2309      	movs	r3, #9
 8003cd0:	e02d      	b.n	8003d2e <HAL_GPIO_Init+0x26a>
 8003cd2:	230a      	movs	r3, #10
 8003cd4:	e02b      	b.n	8003d2e <HAL_GPIO_Init+0x26a>
 8003cd6:	2308      	movs	r3, #8
 8003cd8:	e029      	b.n	8003d2e <HAL_GPIO_Init+0x26a>
 8003cda:	2307      	movs	r3, #7
 8003cdc:	e027      	b.n	8003d2e <HAL_GPIO_Init+0x26a>
 8003cde:	2306      	movs	r3, #6
 8003ce0:	e025      	b.n	8003d2e <HAL_GPIO_Init+0x26a>
 8003ce2:	2305      	movs	r3, #5
 8003ce4:	e023      	b.n	8003d2e <HAL_GPIO_Init+0x26a>
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	e021      	b.n	8003d2e <HAL_GPIO_Init+0x26a>
 8003cea:	2303      	movs	r3, #3
 8003cec:	e01f      	b.n	8003d2e <HAL_GPIO_Init+0x26a>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e01d      	b.n	8003d2e <HAL_GPIO_Init+0x26a>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e01b      	b.n	8003d2e <HAL_GPIO_Init+0x26a>
 8003cf6:	bf00      	nop
 8003cf8:	58000080 	.word	0x58000080
 8003cfc:	58024400 	.word	0x58024400
 8003d00:	58000400 	.word	0x58000400
 8003d04:	58020000 	.word	0x58020000
 8003d08:	58020400 	.word	0x58020400
 8003d0c:	58020800 	.word	0x58020800
 8003d10:	58020c00 	.word	0x58020c00
 8003d14:	58021000 	.word	0x58021000
 8003d18:	58021400 	.word	0x58021400
 8003d1c:	58021800 	.word	0x58021800
 8003d20:	58021c00 	.word	0x58021c00
 8003d24:	58022000 	.word	0x58022000
 8003d28:	58022400 	.word	0x58022400
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	f002 0203 	and.w	r2, r2, #3
 8003d34:	0092      	lsls	r2, r2, #2
 8003d36:	4093      	lsls	r3, r2
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d3e:	4938      	ldr	r1, [pc, #224]	; (8003e20 <HAL_GPIO_Init+0x35c>)
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	089b      	lsrs	r3, r3, #2
 8003d44:	3302      	adds	r3, #2
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	43db      	mvns	r3, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f47f ae63 	bne.w	8003ad8 <HAL_GPIO_Init+0x14>
  }
}
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
 8003e16:	3724      	adds	r7, #36	; 0x24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	58000400 	.word	0x58000400

08003e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fc fee2 	bl	8000c14 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e60:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <HAL_PWREx_ConfigSupply+0x70>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d00a      	beq.n	8003e82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e6c:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <HAL_PWREx_ConfigSupply+0x70>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d001      	beq.n	8003e7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e01f      	b.n	8003ebe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e01d      	b.n	8003ebe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <HAL_PWREx_ConfigSupply+0x70>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f023 0207 	bic.w	r2, r3, #7
 8003e8a:	490f      	ldr	r1, [pc, #60]	; (8003ec8 <HAL_PWREx_ConfigSupply+0x70>)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e92:	f7fd f9d1 	bl	8001238 <HAL_GetTick>
 8003e96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e98:	e009      	b.n	8003eae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e9a:	f7fd f9cd 	bl	8001238 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ea8:	d901      	bls.n	8003eae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e007      	b.n	8003ebe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_PWREx_ConfigSupply+0x70>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eba:	d1ee      	bne.n	8003e9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	58024800 	.word	0x58024800

08003ecc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08c      	sub	sp, #48	; 0x30
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f000 bc48 	b.w	8004770 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8088 	beq.w	8003ffe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eee:	4b99      	ldr	r3, [pc, #612]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ef8:	4b96      	ldr	r3, [pc, #600]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	2b10      	cmp	r3, #16
 8003f02:	d007      	beq.n	8003f14 <HAL_RCC_OscConfig+0x48>
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	2b18      	cmp	r3, #24
 8003f08:	d111      	bne.n	8003f2e <HAL_RCC_OscConfig+0x62>
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d10c      	bne.n	8003f2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	4b8f      	ldr	r3, [pc, #572]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d06d      	beq.n	8003ffc <HAL_RCC_OscConfig+0x130>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d169      	bne.n	8003ffc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f000 bc21 	b.w	8004770 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f36:	d106      	bne.n	8003f46 <HAL_RCC_OscConfig+0x7a>
 8003f38:	4b86      	ldr	r3, [pc, #536]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a85      	ldr	r2, [pc, #532]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e02e      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x9c>
 8003f4e:	4b81      	ldr	r3, [pc, #516]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a80      	ldr	r2, [pc, #512]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b7e      	ldr	r3, [pc, #504]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a7d      	ldr	r2, [pc, #500]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e01d      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0xc0>
 8003f72:	4b78      	ldr	r3, [pc, #480]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a77      	ldr	r2, [pc, #476]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b75      	ldr	r3, [pc, #468]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a74      	ldr	r2, [pc, #464]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd8>
 8003f8c:	4b71      	ldr	r3, [pc, #452]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a70      	ldr	r2, [pc, #448]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	4b6e      	ldr	r3, [pc, #440]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a6d      	ldr	r2, [pc, #436]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d013      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fd f944 	bl	8001238 <HAL_GetTick>
 8003fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fd f940 	bl	8001238 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	; 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e3d4      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fc6:	4b63      	ldr	r3, [pc, #396]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0xe8>
 8003fd2:	e014      	b.n	8003ffe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fd f930 	bl	8001238 <HAL_GetTick>
 8003fd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fd f92c 	bl	8001238 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e3c0      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fee:	4b59      	ldr	r3, [pc, #356]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x110>
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 80ca 	beq.w	80041a0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400c:	4b51      	ldr	r3, [pc, #324]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004014:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004016:	4b4f      	ldr	r3, [pc, #316]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <HAL_RCC_OscConfig+0x166>
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	2b18      	cmp	r3, #24
 8004026:	d156      	bne.n	80040d6 <HAL_RCC_OscConfig+0x20a>
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d151      	bne.n	80040d6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004032:	4b48      	ldr	r3, [pc, #288]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <HAL_RCC_OscConfig+0x17e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e392      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800404a:	4b42      	ldr	r3, [pc, #264]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 0219 	bic.w	r2, r3, #25
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	493f      	ldr	r1, [pc, #252]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004058:	4313      	orrs	r3, r2
 800405a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fd f8ec 	bl	8001238 <HAL_GetTick>
 8004060:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004064:	f7fd f8e8 	bl	8001238 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e37c      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004076:	4b37      	ldr	r3, [pc, #220]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004082:	f7fd f8e5 	bl	8001250 <HAL_GetREVID>
 8004086:	4603      	mov	r3, r0
 8004088:	f241 0203 	movw	r2, #4099	; 0x1003
 800408c:	4293      	cmp	r3, r2
 800408e:	d817      	bhi.n	80040c0 <HAL_RCC_OscConfig+0x1f4>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	d108      	bne.n	80040aa <HAL_RCC_OscConfig+0x1de>
 8004098:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80040a0:	4a2c      	ldr	r2, [pc, #176]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 80040a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a8:	e07a      	b.n	80041a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040aa:	4b2a      	ldr	r3, [pc, #168]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	031b      	lsls	r3, r3, #12
 80040b8:	4926      	ldr	r1, [pc, #152]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040be:	e06f      	b.n	80041a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c0:	4b24      	ldr	r3, [pc, #144]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	061b      	lsls	r3, r3, #24
 80040ce:	4921      	ldr	r1, [pc, #132]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d4:	e064      	b.n	80041a0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d047      	beq.n	800416e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040de:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 0219 	bic.w	r2, r3, #25
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	491a      	ldr	r1, [pc, #104]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fd f8a2 	bl	8001238 <HAL_GetTick>
 80040f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f8:	f7fd f89e 	bl	8001238 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e332      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800410a:	4b12      	ldr	r3, [pc, #72]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004116:	f7fd f89b 	bl	8001250 <HAL_GetREVID>
 800411a:	4603      	mov	r3, r0
 800411c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004120:	4293      	cmp	r3, r2
 8004122:	d819      	bhi.n	8004158 <HAL_RCC_OscConfig+0x28c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	d108      	bne.n	800413e <HAL_RCC_OscConfig+0x272>
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004134:	4a07      	ldr	r2, [pc, #28]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800413a:	6053      	str	r3, [r2, #4]
 800413c:	e030      	b.n	80041a0 <HAL_RCC_OscConfig+0x2d4>
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	031b      	lsls	r3, r3, #12
 800414c:	4901      	ldr	r1, [pc, #4]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 800414e:	4313      	orrs	r3, r2
 8004150:	604b      	str	r3, [r1, #4]
 8004152:	e025      	b.n	80041a0 <HAL_RCC_OscConfig+0x2d4>
 8004154:	58024400 	.word	0x58024400
 8004158:	4b9a      	ldr	r3, [pc, #616]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	4997      	ldr	r1, [pc, #604]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 8004168:	4313      	orrs	r3, r2
 800416a:	604b      	str	r3, [r1, #4]
 800416c:	e018      	b.n	80041a0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416e:	4b95      	ldr	r3, [pc, #596]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a94      	ldr	r2, [pc, #592]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417a:	f7fd f85d 	bl	8001238 <HAL_GetTick>
 800417e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004182:	f7fd f859 	bl	8001238 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e2ed      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004194:	4b8b      	ldr	r3, [pc, #556]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f0      	bne.n	8004182 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80a9 	beq.w	8004300 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ae:	4b85      	ldr	r3, [pc, #532]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041b8:	4b82      	ldr	r3, [pc, #520]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d007      	beq.n	80041d4 <HAL_RCC_OscConfig+0x308>
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	2b18      	cmp	r3, #24
 80041c8:	d13a      	bne.n	8004240 <HAL_RCC_OscConfig+0x374>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d135      	bne.n	8004240 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041d4:	4b7b      	ldr	r3, [pc, #492]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_OscConfig+0x320>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	2b80      	cmp	r3, #128	; 0x80
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e2c1      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041ec:	f7fd f830 	bl	8001250 <HAL_GetREVID>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d817      	bhi.n	800422a <HAL_RCC_OscConfig+0x35e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d108      	bne.n	8004214 <HAL_RCC_OscConfig+0x348>
 8004202:	4b70      	ldr	r3, [pc, #448]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800420a:	4a6e      	ldr	r2, [pc, #440]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 800420c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004210:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004212:	e075      	b.n	8004300 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004214:	4b6b      	ldr	r3, [pc, #428]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	069b      	lsls	r3, r3, #26
 8004222:	4968      	ldr	r1, [pc, #416]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 8004224:	4313      	orrs	r3, r2
 8004226:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004228:	e06a      	b.n	8004300 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800422a:	4b66      	ldr	r3, [pc, #408]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	061b      	lsls	r3, r3, #24
 8004238:	4962      	ldr	r1, [pc, #392]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 800423a:	4313      	orrs	r3, r2
 800423c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800423e:	e05f      	b.n	8004300 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d042      	beq.n	80042ce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004248:	4b5e      	ldr	r3, [pc, #376]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a5d      	ldr	r2, [pc, #372]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 800424e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fc fff0 	bl	8001238 <HAL_GetTick>
 8004258:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800425c:	f7fc ffec 	bl	8001238 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e280      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800426e:	4b55      	ldr	r3, [pc, #340]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800427a:	f7fc ffe9 	bl	8001250 <HAL_GetREVID>
 800427e:	4603      	mov	r3, r0
 8004280:	f241 0203 	movw	r2, #4099	; 0x1003
 8004284:	4293      	cmp	r3, r2
 8004286:	d817      	bhi.n	80042b8 <HAL_RCC_OscConfig+0x3ec>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	2b20      	cmp	r3, #32
 800428e:	d108      	bne.n	80042a2 <HAL_RCC_OscConfig+0x3d6>
 8004290:	4b4c      	ldr	r3, [pc, #304]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004298:	4a4a      	ldr	r2, [pc, #296]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 800429a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800429e:	6053      	str	r3, [r2, #4]
 80042a0:	e02e      	b.n	8004300 <HAL_RCC_OscConfig+0x434>
 80042a2:	4b48      	ldr	r3, [pc, #288]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	069b      	lsls	r3, r3, #26
 80042b0:	4944      	ldr	r1, [pc, #272]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	604b      	str	r3, [r1, #4]
 80042b6:	e023      	b.n	8004300 <HAL_RCC_OscConfig+0x434>
 80042b8:	4b42      	ldr	r3, [pc, #264]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	061b      	lsls	r3, r3, #24
 80042c6:	493f      	ldr	r1, [pc, #252]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60cb      	str	r3, [r1, #12]
 80042cc:	e018      	b.n	8004300 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80042ce:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a3c      	ldr	r2, [pc, #240]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 80042d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fc ffad 	bl	8001238 <HAL_GetTick>
 80042de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80042e2:	f7fc ffa9 	bl	8001238 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e23d      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042f4:	4b33      	ldr	r3, [pc, #204]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f0      	bne.n	80042e2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d036      	beq.n	800437a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d019      	beq.n	8004348 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004314:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 8004316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004318:	4a2a      	ldr	r2, [pc, #168]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fc ff8a 	bl	8001238 <HAL_GetTick>
 8004324:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004328:	f7fc ff86 	bl	8001238 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e21a      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 800433c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0x45c>
 8004346:	e018      	b.n	800437a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004348:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 800434a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434c:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7fc ff70 	bl	8001238 <HAL_GetTick>
 8004358:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800435c:	f7fc ff6c 	bl	8001238 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e200      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800436e:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 8004370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d039      	beq.n	80043fa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d01c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a0c      	ldr	r2, [pc, #48]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 8004394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004398:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800439a:	f7fc ff4d 	bl	8001238 <HAL_GetTick>
 800439e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043a2:	f7fc ff49 	bl	8001238 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e1dd      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <HAL_RCC_OscConfig+0x4f8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x4d6>
 80043c0:	e01b      	b.n	80043fa <HAL_RCC_OscConfig+0x52e>
 80043c2:	bf00      	nop
 80043c4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043c8:	4b9b      	ldr	r3, [pc, #620]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a9a      	ldr	r2, [pc, #616]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80043ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043d4:	f7fc ff30 	bl	8001238 <HAL_GetTick>
 80043d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043dc:	f7fc ff2c 	bl	8001238 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e1c0      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043ee:	4b92      	ldr	r3, [pc, #584]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8081 	beq.w	800450a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004408:	4b8c      	ldr	r3, [pc, #560]	; (800463c <HAL_RCC_OscConfig+0x770>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a8b      	ldr	r2, [pc, #556]	; (800463c <HAL_RCC_OscConfig+0x770>)
 800440e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004414:	f7fc ff10 	bl	8001238 <HAL_GetTick>
 8004418:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441c:	f7fc ff0c 	bl	8001238 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e1a0      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800442e:	4b83      	ldr	r3, [pc, #524]	; (800463c <HAL_RCC_OscConfig+0x770>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d106      	bne.n	8004450 <HAL_RCC_OscConfig+0x584>
 8004442:	4b7d      	ldr	r3, [pc, #500]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004446:	4a7c      	ldr	r2, [pc, #496]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	6713      	str	r3, [r2, #112]	; 0x70
 800444e:	e02d      	b.n	80044ac <HAL_RCC_OscConfig+0x5e0>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10c      	bne.n	8004472 <HAL_RCC_OscConfig+0x5a6>
 8004458:	4b77      	ldr	r3, [pc, #476]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	4a76      	ldr	r2, [pc, #472]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 800445e:	f023 0301 	bic.w	r3, r3, #1
 8004462:	6713      	str	r3, [r2, #112]	; 0x70
 8004464:	4b74      	ldr	r3, [pc, #464]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	4a73      	ldr	r2, [pc, #460]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 800446a:	f023 0304 	bic.w	r3, r3, #4
 800446e:	6713      	str	r3, [r2, #112]	; 0x70
 8004470:	e01c      	b.n	80044ac <HAL_RCC_OscConfig+0x5e0>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b05      	cmp	r3, #5
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0x5c8>
 800447a:	4b6f      	ldr	r3, [pc, #444]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	4a6e      	ldr	r2, [pc, #440]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004480:	f043 0304 	orr.w	r3, r3, #4
 8004484:	6713      	str	r3, [r2, #112]	; 0x70
 8004486:	4b6c      	ldr	r3, [pc, #432]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	4a6b      	ldr	r2, [pc, #428]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	6713      	str	r3, [r2, #112]	; 0x70
 8004492:	e00b      	b.n	80044ac <HAL_RCC_OscConfig+0x5e0>
 8004494:	4b68      	ldr	r3, [pc, #416]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a67      	ldr	r2, [pc, #412]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
 80044a0:	4b65      	ldr	r3, [pc, #404]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a64      	ldr	r2, [pc, #400]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80044a6:	f023 0304 	bic.w	r3, r3, #4
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d015      	beq.n	80044e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fc fec0 	bl	8001238 <HAL_GetTick>
 80044b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044bc:	f7fc febc 	bl	8001238 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e14e      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044d2:	4b59      	ldr	r3, [pc, #356]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0ee      	beq.n	80044bc <HAL_RCC_OscConfig+0x5f0>
 80044de:	e014      	b.n	800450a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e0:	f7fc feaa 	bl	8001238 <HAL_GetTick>
 80044e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044e6:	e00a      	b.n	80044fe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e8:	f7fc fea6 	bl	8001238 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e138      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044fe:	4b4e      	ldr	r3, [pc, #312]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1ee      	bne.n	80044e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 812d 	beq.w	800476e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004514:	4b48      	ldr	r3, [pc, #288]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800451c:	2b18      	cmp	r3, #24
 800451e:	f000 80bd 	beq.w	800469c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	2b02      	cmp	r3, #2
 8004528:	f040 809e 	bne.w	8004668 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452c:	4b42      	ldr	r3, [pc, #264]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a41      	ldr	r2, [pc, #260]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fc fe7e 	bl	8001238 <HAL_GetTick>
 800453c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004540:	f7fc fe7a 	bl	8001238 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e10e      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004552:	4b39      	ldr	r3, [pc, #228]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800455e:	4b36      	ldr	r3, [pc, #216]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004562:	4b37      	ldr	r3, [pc, #220]	; (8004640 <HAL_RCC_OscConfig+0x774>)
 8004564:	4013      	ands	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800456e:	0112      	lsls	r2, r2, #4
 8004570:	430a      	orrs	r2, r1
 8004572:	4931      	ldr	r1, [pc, #196]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004574:	4313      	orrs	r3, r2
 8004576:	628b      	str	r3, [r1, #40]	; 0x28
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	3b01      	subs	r3, #1
 800457e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004586:	3b01      	subs	r3, #1
 8004588:	025b      	lsls	r3, r3, #9
 800458a:	b29b      	uxth	r3, r3
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004592:	3b01      	subs	r3, #1
 8004594:	041b      	lsls	r3, r3, #16
 8004596:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a0:	3b01      	subs	r3, #1
 80045a2:	061b      	lsls	r3, r3, #24
 80045a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045a8:	4923      	ldr	r1, [pc, #140]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80045ae:	4b22      	ldr	r3, [pc, #136]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	4a21      	ldr	r2, [pc, #132]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80045ba:	4b1f      	ldr	r3, [pc, #124]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80045bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045be:	4b21      	ldr	r3, [pc, #132]	; (8004644 <HAL_RCC_OscConfig+0x778>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045c6:	00d2      	lsls	r2, r2, #3
 80045c8:	491b      	ldr	r1, [pc, #108]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80045ce:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	f023 020c 	bic.w	r2, r3, #12
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	4917      	ldr	r1, [pc, #92]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045e0:	4b15      	ldr	r3, [pc, #84]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	f023 0202 	bic.w	r2, r3, #2
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ec:	4912      	ldr	r1, [pc, #72]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045f2:	4b11      	ldr	r3, [pc, #68]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	4a10      	ldr	r2, [pc, #64]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045fe:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	4a0d      	ldr	r2, [pc, #52]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004608:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800460a:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004614:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004616:	4b08      	ldr	r3, [pc, #32]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	4a07      	ldr	r2, [pc, #28]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a04      	ldr	r2, [pc, #16]	; (8004638 <HAL_RCC_OscConfig+0x76c>)
 8004628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462e:	f7fc fe03 	bl	8001238 <HAL_GetTick>
 8004632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004634:	e011      	b.n	800465a <HAL_RCC_OscConfig+0x78e>
 8004636:	bf00      	nop
 8004638:	58024400 	.word	0x58024400
 800463c:	58024800 	.word	0x58024800
 8004640:	fffffc0c 	.word	0xfffffc0c
 8004644:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004648:	f7fc fdf6 	bl	8001238 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e08a      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800465a:	4b47      	ldr	r3, [pc, #284]	; (8004778 <HAL_RCC_OscConfig+0x8ac>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0x77c>
 8004666:	e082      	b.n	800476e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004668:	4b43      	ldr	r3, [pc, #268]	; (8004778 <HAL_RCC_OscConfig+0x8ac>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a42      	ldr	r2, [pc, #264]	; (8004778 <HAL_RCC_OscConfig+0x8ac>)
 800466e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fc fde0 	bl	8001238 <HAL_GetTick>
 8004678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467c:	f7fc fddc 	bl	8001238 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e070      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800468e:	4b3a      	ldr	r3, [pc, #232]	; (8004778 <HAL_RCC_OscConfig+0x8ac>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x7b0>
 800469a:	e068      	b.n	800476e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800469c:	4b36      	ldr	r3, [pc, #216]	; (8004778 <HAL_RCC_OscConfig+0x8ac>)
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046a2:	4b35      	ldr	r3, [pc, #212]	; (8004778 <HAL_RCC_OscConfig+0x8ac>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d031      	beq.n	8004714 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f003 0203 	and.w	r2, r3, #3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d12a      	bne.n	8004714 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d122      	bne.n	8004714 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046da:	429a      	cmp	r2, r3
 80046dc:	d11a      	bne.n	8004714 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	0a5b      	lsrs	r3, r3, #9
 80046e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d111      	bne.n	8004714 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d108      	bne.n	8004714 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	0e1b      	lsrs	r3, r3, #24
 8004706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e02b      	b.n	8004770 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004718:	4b17      	ldr	r3, [pc, #92]	; (8004778 <HAL_RCC_OscConfig+0x8ac>)
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	08db      	lsrs	r3, r3, #3
 800471e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004722:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	429a      	cmp	r2, r3
 800472c:	d01f      	beq.n	800476e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_RCC_OscConfig+0x8ac>)
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	4a11      	ldr	r2, [pc, #68]	; (8004778 <HAL_RCC_OscConfig+0x8ac>)
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800473a:	f7fc fd7d 	bl	8001238 <HAL_GetTick>
 800473e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004740:	bf00      	nop
 8004742:	f7fc fd79 	bl	8001238 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	4293      	cmp	r3, r2
 800474c:	d0f9      	beq.n	8004742 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800474e:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <HAL_RCC_OscConfig+0x8ac>)
 8004750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <HAL_RCC_OscConfig+0x8b0>)
 8004754:	4013      	ands	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800475a:	00d2      	lsls	r2, r2, #3
 800475c:	4906      	ldr	r1, [pc, #24]	; (8004778 <HAL_RCC_OscConfig+0x8ac>)
 800475e:	4313      	orrs	r3, r2
 8004760:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_OscConfig+0x8ac>)
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	4a04      	ldr	r2, [pc, #16]	; (8004778 <HAL_RCC_OscConfig+0x8ac>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3730      	adds	r7, #48	; 0x30
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	58024400 	.word	0x58024400
 800477c:	ffff0007 	.word	0xffff0007

08004780 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e19c      	b.n	8004ace <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004794:	4b8a      	ldr	r3, [pc, #552]	; (80049c0 <HAL_RCC_ClockConfig+0x240>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d910      	bls.n	80047c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b87      	ldr	r3, [pc, #540]	; (80049c0 <HAL_RCC_ClockConfig+0x240>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 020f 	bic.w	r2, r3, #15
 80047aa:	4985      	ldr	r1, [pc, #532]	; (80049c0 <HAL_RCC_ClockConfig+0x240>)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b2:	4b83      	ldr	r3, [pc, #524]	; (80049c0 <HAL_RCC_ClockConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e184      	b.n	8004ace <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d010      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	4b7b      	ldr	r3, [pc, #492]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047dc:	429a      	cmp	r2, r3
 80047de:	d908      	bls.n	80047f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047e0:	4b78      	ldr	r3, [pc, #480]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	4975      	ldr	r1, [pc, #468]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d010      	beq.n	8004820 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	4b70      	ldr	r3, [pc, #448]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800480a:	429a      	cmp	r2, r3
 800480c:	d908      	bls.n	8004820 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800480e:	4b6d      	ldr	r3, [pc, #436]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	496a      	ldr	r1, [pc, #424]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 800481c:	4313      	orrs	r3, r2
 800481e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	2b00      	cmp	r3, #0
 800482a:	d010      	beq.n	800484e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	4b64      	ldr	r3, [pc, #400]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004838:	429a      	cmp	r2, r3
 800483a:	d908      	bls.n	800484e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800483c:	4b61      	ldr	r3, [pc, #388]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	495e      	ldr	r1, [pc, #376]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 800484a:	4313      	orrs	r3, r2
 800484c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d010      	beq.n	800487c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69da      	ldr	r2, [r3, #28]
 800485e:	4b59      	ldr	r3, [pc, #356]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004866:	429a      	cmp	r2, r3
 8004868:	d908      	bls.n	800487c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800486a:	4b56      	ldr	r3, [pc, #344]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	4953      	ldr	r1, [pc, #332]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 8004878:	4313      	orrs	r3, r2
 800487a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d010      	beq.n	80048aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	4b4d      	ldr	r3, [pc, #308]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	429a      	cmp	r2, r3
 8004896:	d908      	bls.n	80048aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004898:	4b4a      	ldr	r3, [pc, #296]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f023 020f 	bic.w	r2, r3, #15
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4947      	ldr	r1, [pc, #284]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d055      	beq.n	8004962 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80048b6:	4b43      	ldr	r3, [pc, #268]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	4940      	ldr	r1, [pc, #256]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048d0:	4b3c      	ldr	r3, [pc, #240]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d121      	bne.n	8004920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0f6      	b.n	8004ace <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048e8:	4b36      	ldr	r3, [pc, #216]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d115      	bne.n	8004920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0ea      	b.n	8004ace <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004900:	4b30      	ldr	r3, [pc, #192]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0de      	b.n	8004ace <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004910:	4b2c      	ldr	r3, [pc, #176]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0d6      	b.n	8004ace <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004920:	4b28      	ldr	r3, [pc, #160]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f023 0207 	bic.w	r2, r3, #7
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4925      	ldr	r1, [pc, #148]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 800492e:	4313      	orrs	r3, r2
 8004930:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004932:	f7fc fc81 	bl	8001238 <HAL_GetTick>
 8004936:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004938:	e00a      	b.n	8004950 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800493a:	f7fc fc7d 	bl	8001238 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	f241 3288 	movw	r2, #5000	; 0x1388
 8004948:	4293      	cmp	r3, r2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e0be      	b.n	8004ace <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004950:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	429a      	cmp	r2, r3
 8004960:	d1eb      	bne.n	800493a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d010      	beq.n	8004990 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	429a      	cmp	r2, r3
 800497c:	d208      	bcs.n	8004990 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800497e:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	f023 020f 	bic.w	r2, r3, #15
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	490e      	ldr	r1, [pc, #56]	; (80049c4 <HAL_RCC_ClockConfig+0x244>)
 800498c:	4313      	orrs	r3, r2
 800498e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCC_ClockConfig+0x240>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d214      	bcs.n	80049c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <HAL_RCC_ClockConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 020f 	bic.w	r2, r3, #15
 80049a6:	4906      	ldr	r1, [pc, #24]	; (80049c0 <HAL_RCC_ClockConfig+0x240>)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <HAL_RCC_ClockConfig+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e086      	b.n	8004ace <HAL_RCC_ClockConfig+0x34e>
 80049c0:	52002000 	.word	0x52002000
 80049c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d010      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	4b3f      	ldr	r3, [pc, #252]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d208      	bcs.n	80049f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049e4:	4b3c      	ldr	r3, [pc, #240]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	4939      	ldr	r1, [pc, #228]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d010      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	4b34      	ldr	r3, [pc, #208]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d208      	bcs.n	8004a24 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a12:	4b31      	ldr	r3, [pc, #196]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	492e      	ldr	r1, [pc, #184]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d010      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699a      	ldr	r2, [r3, #24]
 8004a34:	4b28      	ldr	r3, [pc, #160]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d208      	bcs.n	8004a52 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a40:	4b25      	ldr	r3, [pc, #148]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	4922      	ldr	r1, [pc, #136]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d010      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69da      	ldr	r2, [r3, #28]
 8004a62:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d208      	bcs.n	8004a80 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a6e:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	4917      	ldr	r1, [pc, #92]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a80:	f000 f834 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	0a1b      	lsrs	r3, r3, #8
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	4912      	ldr	r1, [pc, #72]	; (8004adc <HAL_RCC_ClockConfig+0x35c>)
 8004a92:	5ccb      	ldrb	r3, [r1, r3]
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a9e:	4b0e      	ldr	r3, [pc, #56]	; (8004ad8 <HAL_RCC_ClockConfig+0x358>)
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	4a0d      	ldr	r2, [pc, #52]	; (8004adc <HAL_RCC_ClockConfig+0x35c>)
 8004aa8:	5cd3      	ldrb	r3, [r2, r3]
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab4:	4a0a      	ldr	r2, [pc, #40]	; (8004ae0 <HAL_RCC_ClockConfig+0x360>)
 8004ab6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <HAL_RCC_ClockConfig+0x364>)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004abe:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <HAL_RCC_ClockConfig+0x368>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fc fb6e 	bl	80011a4 <HAL_InitTick>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	58024400 	.word	0x58024400
 8004adc:	0800971c 	.word	0x0800971c
 8004ae0:	24000008 	.word	0x24000008
 8004ae4:	24000004 	.word	0x24000004
 8004ae8:	2400000c 	.word	0x2400000c

08004aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b089      	sub	sp, #36	; 0x24
 8004af0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004af2:	4bb3      	ldr	r3, [pc, #716]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004afa:	2b18      	cmp	r3, #24
 8004afc:	f200 8155 	bhi.w	8004daa <HAL_RCC_GetSysClockFreq+0x2be>
 8004b00:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b06:	bf00      	nop
 8004b08:	08004b6d 	.word	0x08004b6d
 8004b0c:	08004dab 	.word	0x08004dab
 8004b10:	08004dab 	.word	0x08004dab
 8004b14:	08004dab 	.word	0x08004dab
 8004b18:	08004dab 	.word	0x08004dab
 8004b1c:	08004dab 	.word	0x08004dab
 8004b20:	08004dab 	.word	0x08004dab
 8004b24:	08004dab 	.word	0x08004dab
 8004b28:	08004b93 	.word	0x08004b93
 8004b2c:	08004dab 	.word	0x08004dab
 8004b30:	08004dab 	.word	0x08004dab
 8004b34:	08004dab 	.word	0x08004dab
 8004b38:	08004dab 	.word	0x08004dab
 8004b3c:	08004dab 	.word	0x08004dab
 8004b40:	08004dab 	.word	0x08004dab
 8004b44:	08004dab 	.word	0x08004dab
 8004b48:	08004b99 	.word	0x08004b99
 8004b4c:	08004dab 	.word	0x08004dab
 8004b50:	08004dab 	.word	0x08004dab
 8004b54:	08004dab 	.word	0x08004dab
 8004b58:	08004dab 	.word	0x08004dab
 8004b5c:	08004dab 	.word	0x08004dab
 8004b60:	08004dab 	.word	0x08004dab
 8004b64:	08004dab 	.word	0x08004dab
 8004b68:	08004b9f 	.word	0x08004b9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b6c:	4b94      	ldr	r3, [pc, #592]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b78:	4b91      	ldr	r3, [pc, #580]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	08db      	lsrs	r3, r3, #3
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	4a90      	ldr	r2, [pc, #576]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
 8004b88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b8a:	e111      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b8c:	4b8d      	ldr	r3, [pc, #564]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b8e:	61bb      	str	r3, [r7, #24]
      break;
 8004b90:	e10e      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b92:	4b8d      	ldr	r3, [pc, #564]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b94:	61bb      	str	r3, [r7, #24]
      break;
 8004b96:	e10b      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b98:	4b8c      	ldr	r3, [pc, #560]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b9a:	61bb      	str	r3, [r7, #24]
      break;
 8004b9c:	e108      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b9e:	4b88      	ldr	r3, [pc, #544]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004ba8:	4b85      	ldr	r3, [pc, #532]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bb2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004bb4:	4b82      	ldr	r3, [pc, #520]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004bbe:	4b80      	ldr	r3, [pc, #512]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	08db      	lsrs	r3, r3, #3
 8004bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	fb02 f303 	mul.w	r3, r2, r3
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80e1 	beq.w	8004da4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	f000 8083 	beq.w	8004cf0 <HAL_RCC_GetSysClockFreq+0x204>
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	f200 80a1 	bhi.w	8004d34 <HAL_RCC_GetSysClockFreq+0x248>
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x114>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d056      	beq.n	8004cac <HAL_RCC_GetSysClockFreq+0x1c0>
 8004bfe:	e099      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c00:	4b6f      	ldr	r3, [pc, #444]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d02d      	beq.n	8004c68 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c0c:	4b6c      	ldr	r3, [pc, #432]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	08db      	lsrs	r3, r3, #3
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	4a6b      	ldr	r2, [pc, #428]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	ee07 3a90 	vmov	s15, r3
 8004c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c36:	4b62      	ldr	r3, [pc, #392]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c4a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c62:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004c66:	e087      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004dd4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7a:	4b51      	ldr	r3, [pc, #324]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c8e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004caa:	e065      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004dd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cbe:	4b40      	ldr	r3, [pc, #256]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cd2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cee:	e043      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004ddc <HAL_RCC_GetSysClockFreq+0x2f0>
 8004cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d02:	4b2f      	ldr	r3, [pc, #188]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d16:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d32:	e021      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004dd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d46:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d5a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d76:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d78:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	0a5b      	lsrs	r3, r3, #9
 8004d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d82:	3301      	adds	r3, #1
 8004d84:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d9c:	ee17 3a90 	vmov	r3, s15
 8004da0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004da2:	e005      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61bb      	str	r3, [r7, #24]
      break;
 8004da8:	e002      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004daa:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004dac:	61bb      	str	r3, [r7, #24]
      break;
 8004dae:	bf00      	nop
  }

  return sysclockfreq;
 8004db0:	69bb      	ldr	r3, [r7, #24]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3724      	adds	r7, #36	; 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	03d09000 	.word	0x03d09000
 8004dc8:	003d0900 	.word	0x003d0900
 8004dcc:	017d7840 	.word	0x017d7840
 8004dd0:	46000000 	.word	0x46000000
 8004dd4:	4c742400 	.word	0x4c742400
 8004dd8:	4a742400 	.word	0x4a742400
 8004ddc:	4bbebc20 	.word	0x4bbebc20

08004de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004de6:	f7ff fe81 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8004dea:	4602      	mov	r2, r0
 8004dec:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	0a1b      	lsrs	r3, r3, #8
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	490f      	ldr	r1, [pc, #60]	; (8004e34 <HAL_RCC_GetHCLKFreq+0x54>)
 8004df8:	5ccb      	ldrb	r3, [r1, r3]
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004e02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e0e:	5cd3      	ldrb	r3, [r2, r3]
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1a:	4a07      	ldr	r2, [pc, #28]	; (8004e38 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e1e:	4a07      	ldr	r2, [pc, #28]	; (8004e3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e24:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e26:	681b      	ldr	r3, [r3, #0]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	58024400 	.word	0x58024400
 8004e34:	0800971c 	.word	0x0800971c
 8004e38:	24000008 	.word	0x24000008
 8004e3c:	24000004 	.word	0x24000004

08004e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e44:	f7ff ffcc 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	4904      	ldr	r1, [pc, #16]	; (8004e68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	58024400 	.word	0x58024400
 8004e68:	0800971c 	.word	0x0800971c

08004e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e70:	f7ff ffb6 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4904      	ldr	r1, [pc, #16]	; (8004e94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	58024400 	.word	0x58024400
 8004e94:	0800971c 	.word	0x0800971c

08004e98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e9c:	b0ca      	sub	sp, #296	; 0x128
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004ebc:	2500      	movs	r5, #0
 8004ebe:	ea54 0305 	orrs.w	r3, r4, r5
 8004ec2:	d049      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ece:	d02f      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ed0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ed4:	d828      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eda:	d01a      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004edc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee0:	d822      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eea:	d007      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004eec:	e01c      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eee:	4bb8      	ldr	r3, [pc, #736]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	4ab7      	ldr	r2, [pc, #732]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004efa:	e01a      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f00:	3308      	adds	r3, #8
 8004f02:	2102      	movs	r1, #2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 fc8f 	bl	8006828 <RCCEx_PLL2_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f10:	e00f      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f16:	3328      	adds	r3, #40	; 0x28
 8004f18:	2102      	movs	r1, #2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f001 fd36 	bl	800698c <RCCEx_PLL3_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f26:	e004      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f2e:	e000      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f3a:	4ba5      	ldr	r3, [pc, #660]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f48:	4aa1      	ldr	r2, [pc, #644]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	6513      	str	r3, [r2, #80]	; 0x50
 8004f4e:	e003      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004f64:	f04f 0900 	mov.w	r9, #0
 8004f68:	ea58 0309 	orrs.w	r3, r8, r9
 8004f6c:	d047      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d82a      	bhi.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004f95 	.word	0x08004f95
 8004f84:	08004fa3 	.word	0x08004fa3
 8004f88:	08004fb9 	.word	0x08004fb9
 8004f8c:	08004fd7 	.word	0x08004fd7
 8004f90:	08004fd7 	.word	0x08004fd7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f94:	4b8e      	ldr	r3, [pc, #568]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	4a8d      	ldr	r2, [pc, #564]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fa0:	e01a      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 fc3c 	bl	8006828 <RCCEx_PLL2_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fb6:	e00f      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fbc:	3328      	adds	r3, #40	; 0x28
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 fce3 	bl	800698c <RCCEx_PLL3_Config>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fcc:	e004      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fd4:	e000      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fe0:	4b7b      	ldr	r3, [pc, #492]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe4:	f023 0107 	bic.w	r1, r3, #7
 8004fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fee:	4a78      	ldr	r2, [pc, #480]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6513      	str	r3, [r2, #80]	; 0x50
 8004ff4:	e003      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ffa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800500a:	f04f 0b00 	mov.w	fp, #0
 800500e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005012:	d04c      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501e:	d030      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005024:	d829      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005026:	2bc0      	cmp	r3, #192	; 0xc0
 8005028:	d02d      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800502a:	2bc0      	cmp	r3, #192	; 0xc0
 800502c:	d825      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800502e:	2b80      	cmp	r3, #128	; 0x80
 8005030:	d018      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005032:	2b80      	cmp	r3, #128	; 0x80
 8005034:	d821      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800503a:	2b40      	cmp	r3, #64	; 0x40
 800503c:	d007      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800503e:	e01c      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005040:	4b63      	ldr	r3, [pc, #396]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	4a62      	ldr	r2, [pc, #392]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800504a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800504c:	e01c      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800504e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005052:	3308      	adds	r3, #8
 8005054:	2100      	movs	r1, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f001 fbe6 	bl	8006828 <RCCEx_PLL2_Config>
 800505c:	4603      	mov	r3, r0
 800505e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005062:	e011      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005068:	3328      	adds	r3, #40	; 0x28
 800506a:	2100      	movs	r1, #0
 800506c:	4618      	mov	r0, r3
 800506e:	f001 fc8d 	bl	800698c <RCCEx_PLL3_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005078:	e006      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005080:	e002      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005090:	4b4f      	ldr	r3, [pc, #316]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005094:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800509c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509e:	4a4c      	ldr	r2, [pc, #304]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050a0:	430b      	orrs	r3, r1
 80050a2:	6513      	str	r3, [r2, #80]	; 0x50
 80050a4:	e003      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80050ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80050ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80050be:	2300      	movs	r3, #0
 80050c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80050c4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80050c8:	460b      	mov	r3, r1
 80050ca:	4313      	orrs	r3, r2
 80050cc:	d053      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80050ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050da:	d035      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80050dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050e0:	d82e      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80050e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050e6:	d031      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80050e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050ec:	d828      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80050ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f2:	d01a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80050f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f8:	d822      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80050fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005102:	d007      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005104:	e01c      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005106:	4b32      	ldr	r3, [pc, #200]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	4a31      	ldr	r2, [pc, #196]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800510c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005110:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005112:	e01c      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005118:	3308      	adds	r3, #8
 800511a:	2100      	movs	r1, #0
 800511c:	4618      	mov	r0, r3
 800511e:	f001 fb83 	bl	8006828 <RCCEx_PLL2_Config>
 8005122:	4603      	mov	r3, r0
 8005124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005128:	e011      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800512a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800512e:	3328      	adds	r3, #40	; 0x28
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f001 fc2a 	bl	800698c <RCCEx_PLL3_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800513e:	e006      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005146:	e002      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005148:	bf00      	nop
 800514a:	e000      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800514c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800514e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10b      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005156:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800515e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005162:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005166:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005168:	430b      	orrs	r3, r1
 800516a:	6593      	str	r3, [r2, #88]	; 0x58
 800516c:	e003      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005172:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005182:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005186:	2300      	movs	r3, #0
 8005188:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800518c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005190:	460b      	mov	r3, r1
 8005192:	4313      	orrs	r3, r2
 8005194:	d056      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800519a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800519e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051a2:	d038      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80051a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051a8:	d831      	bhi.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051ae:	d034      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80051b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051b4:	d82b      	bhi.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051ba:	d01d      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80051bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051c0:	d825      	bhi.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d006      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80051c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80051cc:	e01f      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051ce:	bf00      	nop
 80051d0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d4:	4ba2      	ldr	r3, [pc, #648]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	4aa1      	ldr	r2, [pc, #644]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051e0:	e01c      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e6:	3308      	adds	r3, #8
 80051e8:	2100      	movs	r1, #0
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 fb1c 	bl	8006828 <RCCEx_PLL2_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80051f6:	e011      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051fc:	3328      	adds	r3, #40	; 0x28
 80051fe:	2100      	movs	r1, #0
 8005200:	4618      	mov	r0, r3
 8005202:	f001 fbc3 	bl	800698c <RCCEx_PLL3_Config>
 8005206:	4603      	mov	r3, r0
 8005208:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800520c:	e006      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005214:	e002      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005216:	bf00      	nop
 8005218:	e000      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800521a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800521c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005224:	4b8e      	ldr	r3, [pc, #568]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800522c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005230:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005234:	4a8a      	ldr	r2, [pc, #552]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005236:	430b      	orrs	r3, r1
 8005238:	6593      	str	r3, [r2, #88]	; 0x58
 800523a:	e003      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005240:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005250:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005254:	2300      	movs	r3, #0
 8005256:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800525a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800525e:	460b      	mov	r3, r1
 8005260:	4313      	orrs	r3, r2
 8005262:	d03a      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526a:	2b30      	cmp	r3, #48	; 0x30
 800526c:	d01f      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x416>
 800526e:	2b30      	cmp	r3, #48	; 0x30
 8005270:	d819      	bhi.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005272:	2b20      	cmp	r3, #32
 8005274:	d00c      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005276:	2b20      	cmp	r3, #32
 8005278:	d815      	bhi.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d019      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800527e:	2b10      	cmp	r3, #16
 8005280:	d111      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005282:	4b77      	ldr	r3, [pc, #476]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	4a76      	ldr	r2, [pc, #472]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800528c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800528e:	e011      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005294:	3308      	adds	r3, #8
 8005296:	2102      	movs	r1, #2
 8005298:	4618      	mov	r0, r3
 800529a:	f001 fac5 	bl	8006828 <RCCEx_PLL2_Config>
 800529e:	4603      	mov	r3, r0
 80052a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80052a4:	e006      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052ac:	e002      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80052ae:	bf00      	nop
 80052b0:	e000      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80052b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80052bc:	4b68      	ldr	r3, [pc, #416]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80052c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ca:	4a65      	ldr	r2, [pc, #404]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052cc:	430b      	orrs	r3, r1
 80052ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052d0:	e003      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80052e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80052ea:	2300      	movs	r3, #0
 80052ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052f0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4313      	orrs	r3, r2
 80052f8:	d051      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80052fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005304:	d035      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800530a:	d82e      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800530c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005310:	d031      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005312:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005316:	d828      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800531c:	d01a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800531e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005322:	d822      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532c:	d007      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800532e:	e01c      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005330:	4b4b      	ldr	r3, [pc, #300]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	4a4a      	ldr	r2, [pc, #296]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800533a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800533c:	e01c      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800533e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005342:	3308      	adds	r3, #8
 8005344:	2100      	movs	r1, #0
 8005346:	4618      	mov	r0, r3
 8005348:	f001 fa6e 	bl	8006828 <RCCEx_PLL2_Config>
 800534c:	4603      	mov	r3, r0
 800534e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005352:	e011      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005358:	3328      	adds	r3, #40	; 0x28
 800535a:	2100      	movs	r1, #0
 800535c:	4618      	mov	r0, r3
 800535e:	f001 fb15 	bl	800698c <RCCEx_PLL3_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005368:	e006      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005370:	e002      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005372:	bf00      	nop
 8005374:	e000      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005380:	4b37      	ldr	r3, [pc, #220]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005384:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800538c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800538e:	4a34      	ldr	r2, [pc, #208]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005390:	430b      	orrs	r3, r1
 8005392:	6513      	str	r3, [r2, #80]	; 0x50
 8005394:	e003      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800539a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800539e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80053aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053ae:	2300      	movs	r3, #0
 80053b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80053b8:	460b      	mov	r3, r1
 80053ba:	4313      	orrs	r3, r2
 80053bc:	d056      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80053be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053c8:	d033      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80053ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053ce:	d82c      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80053d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053d4:	d02f      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80053d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053da:	d826      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80053dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053e0:	d02b      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80053e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053e6:	d820      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80053e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ec:	d012      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80053ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053f2:	d81a      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d022      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d115      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005402:	3308      	adds	r3, #8
 8005404:	2101      	movs	r1, #1
 8005406:	4618      	mov	r0, r3
 8005408:	f001 fa0e 	bl	8006828 <RCCEx_PLL2_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005412:	e015      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005418:	3328      	adds	r3, #40	; 0x28
 800541a:	2101      	movs	r1, #1
 800541c:	4618      	mov	r0, r3
 800541e:	f001 fab5 	bl	800698c <RCCEx_PLL3_Config>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005428:	e00a      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005430:	e006      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005432:	bf00      	nop
 8005434:	e004      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005436:	bf00      	nop
 8005438:	e002      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800543e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10d      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800544a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005456:	4a02      	ldr	r2, [pc, #8]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005458:	430b      	orrs	r3, r1
 800545a:	6513      	str	r3, [r2, #80]	; 0x50
 800545c:	e006      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800545e:	bf00      	nop
 8005460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005464:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005468:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800546c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005474:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800547c:	2300      	movs	r3, #0
 800547e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005482:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005486:	460b      	mov	r3, r1
 8005488:	4313      	orrs	r3, r2
 800548a:	d055      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800548c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005490:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005498:	d033      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800549a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800549e:	d82c      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d02f      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80054a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054aa:	d826      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80054ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054b0:	d02b      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80054b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054b6:	d820      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80054b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054bc:	d012      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80054be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c2:	d81a      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d022      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80054c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054cc:	d115      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d2:	3308      	adds	r3, #8
 80054d4:	2101      	movs	r1, #1
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 f9a6 	bl	8006828 <RCCEx_PLL2_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80054e2:	e015      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e8:	3328      	adds	r3, #40	; 0x28
 80054ea:	2101      	movs	r1, #1
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 fa4d 	bl	800698c <RCCEx_PLL3_Config>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80054f8:	e00a      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005500:	e006      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005502:	bf00      	nop
 8005504:	e004      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005506:	bf00      	nop
 8005508:	e002      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800550a:	bf00      	nop
 800550c:	e000      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800550e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10b      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005518:	4ba3      	ldr	r3, [pc, #652]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005524:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005528:	4a9f      	ldr	r2, [pc, #636]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800552a:	430b      	orrs	r3, r1
 800552c:	6593      	str	r3, [r2, #88]	; 0x58
 800552e:	e003      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005540:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005544:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005548:	2300      	movs	r3, #0
 800554a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800554e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005552:	460b      	mov	r3, r1
 8005554:	4313      	orrs	r3, r2
 8005556:	d037      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005562:	d00e      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005568:	d816      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d018      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800556e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005572:	d111      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005574:	4b8c      	ldr	r3, [pc, #560]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	4a8b      	ldr	r2, [pc, #556]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800557a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800557e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005580:	e00f      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005586:	3308      	adds	r3, #8
 8005588:	2101      	movs	r1, #1
 800558a:	4618      	mov	r0, r3
 800558c:	f001 f94c 	bl	8006828 <RCCEx_PLL2_Config>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005596:	e004      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800559e:	e000      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80055a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10a      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055aa:	4b7f      	ldr	r3, [pc, #508]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80055b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b8:	4a7b      	ldr	r2, [pc, #492]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055ba:	430b      	orrs	r3, r1
 80055bc:	6513      	str	r3, [r2, #80]	; 0x50
 80055be:	e003      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80055c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80055d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055d8:	2300      	movs	r3, #0
 80055da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80055de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4313      	orrs	r3, r2
 80055e6:	d039      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	d81c      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80055f2:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	08005635 	.word	0x08005635
 80055fc:	08005609 	.word	0x08005609
 8005600:	08005617 	.word	0x08005617
 8005604:	08005635 	.word	0x08005635
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005608:	4b67      	ldr	r3, [pc, #412]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	4a66      	ldr	r2, [pc, #408]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800560e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005612:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005614:	e00f      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561a:	3308      	adds	r3, #8
 800561c:	2102      	movs	r1, #2
 800561e:	4618      	mov	r0, r3
 8005620:	f001 f902 	bl	8006828 <RCCEx_PLL2_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800562a:	e004      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005632:	e000      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800563e:	4b5a      	ldr	r3, [pc, #360]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005642:	f023 0103 	bic.w	r1, r3, #3
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800564c:	4a56      	ldr	r2, [pc, #344]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800564e:	430b      	orrs	r3, r1
 8005650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005652:	e003      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005658:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800566c:	2300      	movs	r3, #0
 800566e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005672:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005676:	460b      	mov	r3, r1
 8005678:	4313      	orrs	r3, r2
 800567a:	f000 809f 	beq.w	80057bc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800567e:	4b4b      	ldr	r3, [pc, #300]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a4a      	ldr	r2, [pc, #296]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005688:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800568a:	f7fb fdd5 	bl	8001238 <HAL_GetTick>
 800568e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005692:	e00b      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005694:	f7fb fdd0 	bl	8001238 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b64      	cmp	r3, #100	; 0x64
 80056a2:	d903      	bls.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056aa:	e005      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056ac:	4b3f      	ldr	r3, [pc, #252]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0ed      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80056b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d179      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80056c0:	4b39      	ldr	r3, [pc, #228]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80056cc:	4053      	eors	r3, r2
 80056ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d015      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056d6:	4b34      	ldr	r3, [pc, #208]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056e2:	4b31      	ldr	r3, [pc, #196]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	4a30      	ldr	r2, [pc, #192]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ec:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056ee:	4b2e      	ldr	r3, [pc, #184]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	4a2d      	ldr	r2, [pc, #180]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80056fa:	4a2b      	ldr	r2, [pc, #172]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005700:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005706:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800570a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570e:	d118      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005710:	f7fb fd92 	bl	8001238 <HAL_GetTick>
 8005714:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005718:	e00d      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571a:	f7fb fd8d 	bl	8001238 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005724:	1ad2      	subs	r2, r2, r3
 8005726:	f241 3388 	movw	r3, #5000	; 0x1388
 800572a:	429a      	cmp	r2, r3
 800572c:	d903      	bls.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005734:	e005      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005736:	4b1c      	ldr	r3, [pc, #112]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0eb      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005746:	2b00      	cmp	r3, #0
 8005748:	d129      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800574a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800575a:	d10e      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800575c:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005768:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800576c:	091a      	lsrs	r2, r3, #4
 800576e:	4b10      	ldr	r3, [pc, #64]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005770:	4013      	ands	r3, r2
 8005772:	4a0d      	ldr	r2, [pc, #52]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005774:	430b      	orrs	r3, r1
 8005776:	6113      	str	r3, [r2, #16]
 8005778:	e005      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800577a:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005780:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005784:	6113      	str	r3, [r2, #16]
 8005786:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005788:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005796:	4a04      	ldr	r2, [pc, #16]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005798:	430b      	orrs	r3, r1
 800579a:	6713      	str	r3, [r2, #112]	; 0x70
 800579c:	e00e      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800579e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80057a6:	e009      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80057a8:	58024400 	.word	0x58024400
 80057ac:	58024800 	.word	0x58024800
 80057b0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80057bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f002 0301 	and.w	r3, r2, #1
 80057c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057cc:	2300      	movs	r3, #0
 80057ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4313      	orrs	r3, r2
 80057da:	f000 8089 	beq.w	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80057de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e4:	2b28      	cmp	r3, #40	; 0x28
 80057e6:	d86b      	bhi.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80057e8:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	080058c9 	.word	0x080058c9
 80057f4:	080058c1 	.word	0x080058c1
 80057f8:	080058c1 	.word	0x080058c1
 80057fc:	080058c1 	.word	0x080058c1
 8005800:	080058c1 	.word	0x080058c1
 8005804:	080058c1 	.word	0x080058c1
 8005808:	080058c1 	.word	0x080058c1
 800580c:	080058c1 	.word	0x080058c1
 8005810:	08005895 	.word	0x08005895
 8005814:	080058c1 	.word	0x080058c1
 8005818:	080058c1 	.word	0x080058c1
 800581c:	080058c1 	.word	0x080058c1
 8005820:	080058c1 	.word	0x080058c1
 8005824:	080058c1 	.word	0x080058c1
 8005828:	080058c1 	.word	0x080058c1
 800582c:	080058c1 	.word	0x080058c1
 8005830:	080058ab 	.word	0x080058ab
 8005834:	080058c1 	.word	0x080058c1
 8005838:	080058c1 	.word	0x080058c1
 800583c:	080058c1 	.word	0x080058c1
 8005840:	080058c1 	.word	0x080058c1
 8005844:	080058c1 	.word	0x080058c1
 8005848:	080058c1 	.word	0x080058c1
 800584c:	080058c1 	.word	0x080058c1
 8005850:	080058c9 	.word	0x080058c9
 8005854:	080058c1 	.word	0x080058c1
 8005858:	080058c1 	.word	0x080058c1
 800585c:	080058c1 	.word	0x080058c1
 8005860:	080058c1 	.word	0x080058c1
 8005864:	080058c1 	.word	0x080058c1
 8005868:	080058c1 	.word	0x080058c1
 800586c:	080058c1 	.word	0x080058c1
 8005870:	080058c9 	.word	0x080058c9
 8005874:	080058c1 	.word	0x080058c1
 8005878:	080058c1 	.word	0x080058c1
 800587c:	080058c1 	.word	0x080058c1
 8005880:	080058c1 	.word	0x080058c1
 8005884:	080058c1 	.word	0x080058c1
 8005888:	080058c1 	.word	0x080058c1
 800588c:	080058c1 	.word	0x080058c1
 8005890:	080058c9 	.word	0x080058c9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005898:	3308      	adds	r3, #8
 800589a:	2101      	movs	r1, #1
 800589c:	4618      	mov	r0, r3
 800589e:	f000 ffc3 	bl	8006828 <RCCEx_PLL2_Config>
 80058a2:	4603      	mov	r3, r0
 80058a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80058a8:	e00f      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ae:	3328      	adds	r3, #40	; 0x28
 80058b0:	2101      	movs	r1, #1
 80058b2:	4618      	mov	r0, r3
 80058b4:	f001 f86a 	bl	800698c <RCCEx_PLL3_Config>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80058be:	e004      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058c6:	e000      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80058c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80058d2:	4bbf      	ldr	r3, [pc, #764]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058e0:	4abb      	ldr	r2, [pc, #748]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058e2:	430b      	orrs	r3, r1
 80058e4:	6553      	str	r3, [r2, #84]	; 0x54
 80058e6:	e003      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	f002 0302 	and.w	r3, r2, #2
 80058fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005900:	2300      	movs	r3, #0
 8005902:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005906:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800590a:	460b      	mov	r3, r1
 800590c:	4313      	orrs	r3, r2
 800590e:	d041      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005916:	2b05      	cmp	r3, #5
 8005918:	d824      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800591a:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	0800596d 	.word	0x0800596d
 8005924:	08005939 	.word	0x08005939
 8005928:	0800594f 	.word	0x0800594f
 800592c:	0800596d 	.word	0x0800596d
 8005930:	0800596d 	.word	0x0800596d
 8005934:	0800596d 	.word	0x0800596d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800593c:	3308      	adds	r3, #8
 800593e:	2101      	movs	r1, #1
 8005940:	4618      	mov	r0, r3
 8005942:	f000 ff71 	bl	8006828 <RCCEx_PLL2_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800594c:	e00f      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800594e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005952:	3328      	adds	r3, #40	; 0x28
 8005954:	2101      	movs	r1, #1
 8005956:	4618      	mov	r0, r3
 8005958:	f001 f818 	bl	800698c <RCCEx_PLL3_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005962:	e004      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800596a:	e000      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800596c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800596e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10a      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005976:	4b96      	ldr	r3, [pc, #600]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597a:	f023 0107 	bic.w	r1, r3, #7
 800597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005982:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005984:	4a92      	ldr	r2, [pc, #584]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005986:	430b      	orrs	r3, r1
 8005988:	6553      	str	r3, [r2, #84]	; 0x54
 800598a:	e003      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005990:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	f002 0304 	and.w	r3, r2, #4
 80059a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059a4:	2300      	movs	r3, #0
 80059a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4313      	orrs	r3, r2
 80059b2:	d044      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80059b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059bc:	2b05      	cmp	r3, #5
 80059be:	d825      	bhi.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80059c0:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80059c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c6:	bf00      	nop
 80059c8:	08005a15 	.word	0x08005a15
 80059cc:	080059e1 	.word	0x080059e1
 80059d0:	080059f7 	.word	0x080059f7
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a15 	.word	0x08005a15
 80059dc:	08005a15 	.word	0x08005a15
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e4:	3308      	adds	r3, #8
 80059e6:	2101      	movs	r1, #1
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 ff1d 	bl	8006828 <RCCEx_PLL2_Config>
 80059ee:	4603      	mov	r3, r0
 80059f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80059f4:	e00f      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fa:	3328      	adds	r3, #40	; 0x28
 80059fc:	2101      	movs	r1, #1
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 ffc4 	bl	800698c <RCCEx_PLL3_Config>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005a0a:	e004      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a12:	e000      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a1e:	4b6c      	ldr	r3, [pc, #432]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	f023 0107 	bic.w	r1, r3, #7
 8005a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a2e:	4a68      	ldr	r2, [pc, #416]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a30:	430b      	orrs	r3, r1
 8005a32:	6593      	str	r3, [r2, #88]	; 0x58
 8005a34:	e003      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	f002 0320 	and.w	r3, r2, #32
 8005a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	d055      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a6a:	d033      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a70:	d82c      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a76:	d02f      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7c:	d826      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a82:	d02b      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005a84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a88:	d820      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a8e:	d012      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a94:	d81a      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d022      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005a9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a9e:	d115      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 febd 	bl	8006828 <RCCEx_PLL2_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005ab4:	e015      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aba:	3328      	adds	r3, #40	; 0x28
 8005abc:	2102      	movs	r1, #2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 ff64 	bl	800698c <RCCEx_PLL3_Config>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005aca:	e00a      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ad2:	e006      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ad4:	bf00      	nop
 8005ad6:	e004      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ad8:	bf00      	nop
 8005ada:	e002      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005adc:	bf00      	nop
 8005ade:	e000      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005aea:	4b39      	ldr	r3, [pc, #228]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afa:	4a35      	ldr	r2, [pc, #212]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6553      	str	r3, [r2, #84]	; 0x54
 8005b00:	e003      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b20:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4313      	orrs	r3, r2
 8005b28:	d058      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b36:	d033      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005b38:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b3c:	d82c      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b42:	d02f      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b48:	d826      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005b4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b4e:	d02b      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005b50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b54:	d820      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b5a:	d012      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b60:	d81a      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d022      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b6a:	d115      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b70:	3308      	adds	r3, #8
 8005b72:	2100      	movs	r1, #0
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 fe57 	bl	8006828 <RCCEx_PLL2_Config>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b80:	e015      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b86:	3328      	adds	r3, #40	; 0x28
 8005b88:	2102      	movs	r1, #2
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fefe 	bl	800698c <RCCEx_PLL3_Config>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b96:	e00a      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b9e:	e006      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ba0:	bf00      	nop
 8005ba2:	e004      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ba4:	bf00      	nop
 8005ba6:	e002      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ba8:	bf00      	nop
 8005baa:	e000      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10e      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bb6:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bba:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bc6:	4a02      	ldr	r2, [pc, #8]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6593      	str	r3, [r2, #88]	; 0x58
 8005bcc:	e006      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005bce:	bf00      	nop
 8005bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bec:	2300      	movs	r3, #0
 8005bee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bf2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	d055      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c04:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c08:	d033      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005c0a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c0e:	d82c      	bhi.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c14:	d02f      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1a:	d826      	bhi.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005c1c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c20:	d02b      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005c22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c26:	d820      	bhi.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c2c:	d012      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c32:	d81a      	bhi.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d022      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3c:	d115      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c42:	3308      	adds	r3, #8
 8005c44:	2100      	movs	r1, #0
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fdee 	bl	8006828 <RCCEx_PLL2_Config>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005c52:	e015      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c58:	3328      	adds	r3, #40	; 0x28
 8005c5a:	2102      	movs	r1, #2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fe95 	bl	800698c <RCCEx_PLL3_Config>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005c68:	e00a      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c70:	e006      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c72:	bf00      	nop
 8005c74:	e004      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c76:	bf00      	nop
 8005c78:	e002      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c7a:	bf00      	nop
 8005c7c:	e000      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10b      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005c88:	4ba1      	ldr	r3, [pc, #644]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c98:	4a9d      	ldr	r2, [pc, #628]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c9a:	430b      	orrs	r3, r1
 8005c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c9e:	e003      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ca4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f002 0308 	and.w	r3, r2, #8
 8005cb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005cbe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	d01e      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd4:	d10c      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cda:	3328      	adds	r3, #40	; 0x28
 8005cdc:	2102      	movs	r1, #2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fe54 	bl	800698c <RCCEx_PLL3_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005cf0:	4b87      	ldr	r3, [pc, #540]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d00:	4a83      	ldr	r2, [pc, #524]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d02:	430b      	orrs	r3, r1
 8005d04:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f002 0310 	and.w	r3, r2, #16
 8005d12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d16:	2300      	movs	r3, #0
 8005d18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d1c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005d20:	460b      	mov	r3, r1
 8005d22:	4313      	orrs	r3, r2
 8005d24:	d01e      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d32:	d10c      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d38:	3328      	adds	r3, #40	; 0x28
 8005d3a:	2102      	movs	r1, #2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fe25 	bl	800698c <RCCEx_PLL3_Config>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d4e:	4b70      	ldr	r3, [pc, #448]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d5e:	4a6c      	ldr	r2, [pc, #432]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d60:	430b      	orrs	r3, r1
 8005d62:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005d70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d74:	2300      	movs	r3, #0
 8005d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d7a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4313      	orrs	r3, r2
 8005d82:	d03e      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d90:	d022      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d96:	d81b      	bhi.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da0:	d00b      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005da2:	e015      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da8:	3308      	adds	r3, #8
 8005daa:	2100      	movs	r1, #0
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fd3b 	bl	8006828 <RCCEx_PLL2_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005db8:	e00f      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dbe:	3328      	adds	r3, #40	; 0x28
 8005dc0:	2102      	movs	r1, #2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fde2 	bl	800698c <RCCEx_PLL3_Config>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005dce:	e004      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005dd6:	e000      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10b      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005de2:	4b4b      	ldr	r3, [pc, #300]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005df2:	4a47      	ldr	r2, [pc, #284]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005df4:	430b      	orrs	r3, r1
 8005df6:	6593      	str	r3, [r2, #88]	; 0x58
 8005df8:	e003      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005e0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e10:	2300      	movs	r3, #0
 8005e12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e14:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	d03b      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e2a:	d01f      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005e2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e30:	d818      	bhi.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e36:	d003      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005e38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e3c:	d007      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005e3e:	e011      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e40:	4b33      	ldr	r3, [pc, #204]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	4a32      	ldr	r2, [pc, #200]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005e4c:	e00f      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e52:	3328      	adds	r3, #40	; 0x28
 8005e54:	2101      	movs	r1, #1
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fd98 	bl	800698c <RCCEx_PLL3_Config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005e62:	e004      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e6a:	e000      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10b      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e76:	4b26      	ldr	r3, [pc, #152]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e86:	4a22      	ldr	r2, [pc, #136]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6553      	str	r3, [r2, #84]	; 0x54
 8005e8c:	e003      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005ea2:	673b      	str	r3, [r7, #112]	; 0x70
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	677b      	str	r3, [r7, #116]	; 0x74
 8005ea8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005eac:	460b      	mov	r3, r1
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	d034      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec0:	d007      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005ec2:	e011      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec4:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4a11      	ldr	r2, [pc, #68]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ed0:	e00e      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	2102      	movs	r1, #2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fca4 	bl	8006828 <RCCEx_PLL2_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ee6:	e003      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10d      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005ef8:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005efc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f06:	4a02      	ldr	r2, [pc, #8]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f0c:	e006      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005f0e:	bf00      	nop
 8005f10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005f28:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f2e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005f32:	460b      	mov	r3, r1
 8005f34:	4313      	orrs	r3, r2
 8005f36:	d00c      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3c:	3328      	adds	r3, #40	; 0x28
 8005f3e:	2102      	movs	r1, #2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fd23 	bl	800698c <RCCEx_PLL3_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005f5e:	663b      	str	r3, [r7, #96]	; 0x60
 8005f60:	2300      	movs	r3, #0
 8005f62:	667b      	str	r3, [r7, #100]	; 0x64
 8005f64:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	d038      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f7a:	d018      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f80:	d811      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f86:	d014      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f8c:	d80b      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d011      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f96:	d106      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f98:	4bc3      	ldr	r3, [pc, #780]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	4ac2      	ldr	r2, [pc, #776]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fac:	e004      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005fae:	bf00      	nop
 8005fb0:	e002      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005fb2:	bf00      	nop
 8005fb4:	e000      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10b      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fc0:	4bb9      	ldr	r3, [pc, #740]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fd0:	4ab5      	ldr	r2, [pc, #724]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fd2:	430b      	orrs	r3, r1
 8005fd4:	6553      	str	r3, [r2, #84]	; 0x54
 8005fd6:	e003      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005fec:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fee:	2300      	movs	r3, #0
 8005ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ff2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	d009      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ffc:	4baa      	ldr	r3, [pc, #680]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006000:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800600a:	4aa7      	ldr	r2, [pc, #668]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800600c:	430b      	orrs	r3, r1
 800600e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800601c:	653b      	str	r3, [r7, #80]	; 0x50
 800601e:	2300      	movs	r3, #0
 8006020:	657b      	str	r3, [r7, #84]	; 0x54
 8006022:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006026:	460b      	mov	r3, r1
 8006028:	4313      	orrs	r3, r2
 800602a:	d00a      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800602c:	4b9e      	ldr	r3, [pc, #632]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006038:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800603c:	4a9a      	ldr	r2, [pc, #616]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800603e:	430b      	orrs	r3, r1
 8006040:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800604e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006050:	2300      	movs	r3, #0
 8006052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006054:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006058:	460b      	mov	r3, r1
 800605a:	4313      	orrs	r3, r2
 800605c:	d009      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800605e:	4b92      	ldr	r3, [pc, #584]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006062:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800606a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800606c:	4a8e      	ldr	r2, [pc, #568]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800606e:	430b      	orrs	r3, r1
 8006070:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800607e:	643b      	str	r3, [r7, #64]	; 0x40
 8006080:	2300      	movs	r3, #0
 8006082:	647b      	str	r3, [r7, #68]	; 0x44
 8006084:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006088:	460b      	mov	r3, r1
 800608a:	4313      	orrs	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800608e:	4b86      	ldr	r3, [pc, #536]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	4a85      	ldr	r2, [pc, #532]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006094:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006098:	6113      	str	r3, [r2, #16]
 800609a:	4b83      	ldr	r3, [pc, #524]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800609c:	6919      	ldr	r1, [r3, #16]
 800609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80060a6:	4a80      	ldr	r2, [pc, #512]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060a8:	430b      	orrs	r3, r1
 80060aa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80060ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80060b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80060ba:	2300      	movs	r3, #0
 80060bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80060c2:	460b      	mov	r3, r1
 80060c4:	4313      	orrs	r3, r2
 80060c6:	d009      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80060c8:	4b77      	ldr	r3, [pc, #476]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060cc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80060d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	4a74      	ldr	r2, [pc, #464]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060d8:	430b      	orrs	r3, r1
 80060da:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80060e8:	633b      	str	r3, [r7, #48]	; 0x30
 80060ea:	2300      	movs	r3, #0
 80060ec:	637b      	str	r3, [r7, #52]	; 0x34
 80060ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80060f2:	460b      	mov	r3, r1
 80060f4:	4313      	orrs	r3, r2
 80060f6:	d00a      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060f8:	4b6b      	ldr	r3, [pc, #428]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006108:	4a67      	ldr	r2, [pc, #412]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800610a:	430b      	orrs	r3, r1
 800610c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800610e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	2100      	movs	r1, #0
 8006118:	62b9      	str	r1, [r7, #40]	; 0x28
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006120:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006124:	460b      	mov	r3, r1
 8006126:	4313      	orrs	r3, r2
 8006128:	d011      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800612a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612e:	3308      	adds	r3, #8
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fb78 	bl	8006828 <RCCEx_PLL2_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800613e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006146:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800614a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800614e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	2100      	movs	r1, #0
 8006158:	6239      	str	r1, [r7, #32]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
 8006160:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006164:	460b      	mov	r3, r1
 8006166:	4313      	orrs	r3, r2
 8006168:	d011      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800616a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800616e:	3308      	adds	r3, #8
 8006170:	2101      	movs	r1, #1
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fb58 	bl	8006828 <RCCEx_PLL2_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800617e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800618a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	2100      	movs	r1, #0
 8006198:	61b9      	str	r1, [r7, #24]
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80061a4:	460b      	mov	r3, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d011      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ae:	3308      	adds	r3, #8
 80061b0:	2102      	movs	r1, #2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fb38 	bl	8006828 <RCCEx_PLL2_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80061be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80061ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	2100      	movs	r1, #0
 80061d8:	6139      	str	r1, [r7, #16]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80061e4:	460b      	mov	r3, r1
 80061e6:	4313      	orrs	r3, r2
 80061e8:	d011      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ee:	3328      	adds	r3, #40	; 0x28
 80061f0:	2100      	movs	r1, #0
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fbca 	bl	800698c <RCCEx_PLL3_Config>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80061fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800620a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800620e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	2100      	movs	r1, #0
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	f003 0310 	and.w	r3, r3, #16
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006224:	460b      	mov	r3, r1
 8006226:	4313      	orrs	r3, r2
 8006228:	d011      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800622a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800622e:	3328      	adds	r3, #40	; 0x28
 8006230:	2101      	movs	r1, #1
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fbaa 	bl	800698c <RCCEx_PLL3_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800623e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800624a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800624e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	2100      	movs	r1, #0
 8006258:	6039      	str	r1, [r7, #0]
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	607b      	str	r3, [r7, #4]
 8006260:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006264:	460b      	mov	r3, r1
 8006266:	4313      	orrs	r3, r2
 8006268:	d011      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800626e:	3328      	adds	r3, #40	; 0x28
 8006270:	2102      	movs	r1, #2
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fb8a 	bl	800698c <RCCEx_PLL3_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800627e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800628a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800628e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
}
 800629c:	4618      	mov	r0, r3
 800629e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80062a2:	46bd      	mov	sp, r7
 80062a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062a8:	58024400 	.word	0x58024400

080062ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80062b0:	f7fe fd96 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 80062b4:	4602      	mov	r2, r0
 80062b6:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	091b      	lsrs	r3, r3, #4
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	4904      	ldr	r1, [pc, #16]	; (80062d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80062c2:	5ccb      	ldrb	r3, [r1, r3]
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	58024400 	.word	0x58024400
 80062d4:	0800971c 	.word	0x0800971c

080062d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80062d8:	b480      	push	{r7}
 80062da:	b089      	sub	sp, #36	; 0x24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062e0:	4ba1      	ldr	r3, [pc, #644]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80062ea:	4b9f      	ldr	r3, [pc, #636]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ee:	0b1b      	lsrs	r3, r3, #12
 80062f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80062f6:	4b9c      	ldr	r3, [pc, #624]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	091b      	lsrs	r3, r3, #4
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006302:	4b99      	ldr	r3, [pc, #612]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006306:	08db      	lsrs	r3, r3, #3
 8006308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	fb02 f303 	mul.w	r3, r2, r3
 8006312:	ee07 3a90 	vmov	s15, r3
 8006316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8111 	beq.w	8006548 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b02      	cmp	r3, #2
 800632a:	f000 8083 	beq.w	8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	2b02      	cmp	r3, #2
 8006332:	f200 80a1 	bhi.w	8006478 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d056      	beq.n	80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006342:	e099      	b.n	8006478 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006344:	4b88      	ldr	r3, [pc, #544]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d02d      	beq.n	80063ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006350:	4b85      	ldr	r3, [pc, #532]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	08db      	lsrs	r3, r3, #3
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	4a84      	ldr	r2, [pc, #528]	; (800656c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800635c:	fa22 f303 	lsr.w	r3, r2, r3
 8006360:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	ee07 3a90 	vmov	s15, r3
 8006368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800637a:	4b7b      	ldr	r3, [pc, #492]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800638a:	ed97 6a03 	vldr	s12, [r7, #12]
 800638e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800639a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800639e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80063aa:	e087      	b.n	80064bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	ee07 3a90 	vmov	s15, r3
 80063b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80063ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063be:	4b6a      	ldr	r3, [pc, #424]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c6:	ee07 3a90 	vmov	s15, r3
 80063ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80063d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ee:	e065      	b.n	80064bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006402:	4b59      	ldr	r3, [pc, #356]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006412:	ed97 6a03 	vldr	s12, [r7, #12]
 8006416:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800641a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800641e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800642a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006432:	e043      	b.n	80064bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800657c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006446:	4b48      	ldr	r3, [pc, #288]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006456:	ed97 6a03 	vldr	s12, [r7, #12]
 800645a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800645e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800646a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800646e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006476:	e021      	b.n	80064bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006482:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800648a:	4b37      	ldr	r3, [pc, #220]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800649a:	ed97 6a03 	vldr	s12, [r7, #12]
 800649e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80064bc:	4b2a      	ldr	r3, [pc, #168]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	0a5b      	lsrs	r3, r3, #9
 80064c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80064da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064e2:	ee17 2a90 	vmov	r2, s15
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80064ea:	4b1f      	ldr	r3, [pc, #124]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	0c1b      	lsrs	r3, r3, #16
 80064f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f4:	ee07 3a90 	vmov	s15, r3
 80064f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006500:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006504:	edd7 6a07 	vldr	s13, [r7, #28]
 8006508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800650c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006510:	ee17 2a90 	vmov	r2, s15
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006518:	4b13      	ldr	r3, [pc, #76]	; (8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	0e1b      	lsrs	r3, r3, #24
 800651e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800652e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006532:	edd7 6a07 	vldr	s13, [r7, #28]
 8006536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800653a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800653e:	ee17 2a90 	vmov	r2, s15
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006546:	e008      	b.n	800655a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	609a      	str	r2, [r3, #8]
}
 800655a:	bf00      	nop
 800655c:	3724      	adds	r7, #36	; 0x24
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	58024400 	.word	0x58024400
 800656c:	03d09000 	.word	0x03d09000
 8006570:	46000000 	.word	0x46000000
 8006574:	4c742400 	.word	0x4c742400
 8006578:	4a742400 	.word	0x4a742400
 800657c:	4bbebc20 	.word	0x4bbebc20

08006580 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006580:	b480      	push	{r7}
 8006582:	b089      	sub	sp, #36	; 0x24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006588:	4ba1      	ldr	r3, [pc, #644]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800658a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006592:	4b9f      	ldr	r3, [pc, #636]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	0d1b      	lsrs	r3, r3, #20
 8006598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800659c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800659e:	4b9c      	ldr	r3, [pc, #624]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80065aa:	4b99      	ldr	r3, [pc, #612]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	08db      	lsrs	r3, r3, #3
 80065b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	fb02 f303 	mul.w	r3, r2, r3
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8111 	beq.w	80067f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	f000 8083 	beq.w	80066dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	2b02      	cmp	r3, #2
 80065da:	f200 80a1 	bhi.w	8006720 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d056      	beq.n	8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80065ea:	e099      	b.n	8006720 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ec:	4b88      	ldr	r3, [pc, #544]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d02d      	beq.n	8006654 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065f8:	4b85      	ldr	r3, [pc, #532]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	08db      	lsrs	r3, r3, #3
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	4a84      	ldr	r2, [pc, #528]	; (8006814 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006604:	fa22 f303 	lsr.w	r3, r2, r3
 8006608:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	ee07 3a90 	vmov	s15, r3
 8006610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006622:	4b7b      	ldr	r3, [pc, #492]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006632:	ed97 6a03 	vldr	s12, [r7, #12]
 8006636:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800663a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800663e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800664a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800664e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006652:	e087      	b.n	8006764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800681c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006666:	4b6a      	ldr	r3, [pc, #424]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666e:	ee07 3a90 	vmov	s15, r3
 8006672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006676:	ed97 6a03 	vldr	s12, [r7, #12]
 800667a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800667e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800668a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800668e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006696:	e065      	b.n	8006764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066aa:	4b59      	ldr	r3, [pc, #356]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80066be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066da:	e043      	b.n	8006764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80066ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ee:	4b48      	ldr	r3, [pc, #288]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006702:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800671e:	e021      	b.n	8006764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800672e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006732:	4b37      	ldr	r3, [pc, #220]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006742:	ed97 6a03 	vldr	s12, [r7, #12]
 8006746:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800674a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800674e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006762:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006764:	4b2a      	ldr	r3, [pc, #168]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	0a5b      	lsrs	r3, r3, #9
 800676a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800677a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800677e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800678a:	ee17 2a90 	vmov	r2, s15
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006792:	4b1f      	ldr	r3, [pc, #124]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	0c1b      	lsrs	r3, r3, #16
 8006798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679c:	ee07 3a90 	vmov	s15, r3
 80067a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b8:	ee17 2a90 	vmov	r2, s15
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80067c0:	4b13      	ldr	r3, [pc, #76]	; (8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c4:	0e1b      	lsrs	r3, r3, #24
 80067c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067da:	edd7 6a07 	vldr	s13, [r7, #28]
 80067de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067e6:	ee17 2a90 	vmov	r2, s15
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80067ee:	e008      	b.n	8006802 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	609a      	str	r2, [r3, #8]
}
 8006802:	bf00      	nop
 8006804:	3724      	adds	r7, #36	; 0x24
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	58024400 	.word	0x58024400
 8006814:	03d09000 	.word	0x03d09000
 8006818:	46000000 	.word	0x46000000
 800681c:	4c742400 	.word	0x4c742400
 8006820:	4a742400 	.word	0x4a742400
 8006824:	4bbebc20 	.word	0x4bbebc20

08006828 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006836:	4b53      	ldr	r3, [pc, #332]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	2b03      	cmp	r3, #3
 8006840:	d101      	bne.n	8006846 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e099      	b.n	800697a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006846:	4b4f      	ldr	r3, [pc, #316]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a4e      	ldr	r2, [pc, #312]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 800684c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006852:	f7fa fcf1 	bl	8001238 <HAL_GetTick>
 8006856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006858:	e008      	b.n	800686c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800685a:	f7fa fced 	bl	8001238 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d901      	bls.n	800686c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e086      	b.n	800697a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800686c:	4b45      	ldr	r3, [pc, #276]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1f0      	bne.n	800685a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006878:	4b42      	ldr	r3, [pc, #264]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	031b      	lsls	r3, r3, #12
 8006886:	493f      	ldr	r1, [pc, #252]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 8006888:	4313      	orrs	r3, r2
 800688a:	628b      	str	r3, [r1, #40]	; 0x28
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	3b01      	subs	r3, #1
 8006892:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	3b01      	subs	r3, #1
 800689c:	025b      	lsls	r3, r3, #9
 800689e:	b29b      	uxth	r3, r3
 80068a0:	431a      	orrs	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	041b      	lsls	r3, r3, #16
 80068aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	061b      	lsls	r3, r3, #24
 80068b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068bc:	4931      	ldr	r1, [pc, #196]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80068c2:	4b30      	ldr	r3, [pc, #192]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	492d      	ldr	r1, [pc, #180]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80068d4:	4b2b      	ldr	r3, [pc, #172]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	f023 0220 	bic.w	r2, r3, #32
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	4928      	ldr	r1, [pc, #160]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80068e6:	4b27      	ldr	r3, [pc, #156]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 80068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ea:	4a26      	ldr	r2, [pc, #152]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 80068ec:	f023 0310 	bic.w	r3, r3, #16
 80068f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80068f2:	4b24      	ldr	r3, [pc, #144]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 80068f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068f6:	4b24      	ldr	r3, [pc, #144]	; (8006988 <RCCEx_PLL2_Config+0x160>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	69d2      	ldr	r2, [r2, #28]
 80068fe:	00d2      	lsls	r2, r2, #3
 8006900:	4920      	ldr	r1, [pc, #128]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 8006902:	4313      	orrs	r3, r2
 8006904:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006906:	4b1f      	ldr	r3, [pc, #124]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	4a1e      	ldr	r2, [pc, #120]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 800690c:	f043 0310 	orr.w	r3, r3, #16
 8006910:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d106      	bne.n	8006926 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006918:	4b1a      	ldr	r3, [pc, #104]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	4a19      	ldr	r2, [pc, #100]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 800691e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006922:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006924:	e00f      	b.n	8006946 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d106      	bne.n	800693a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800692c:	4b15      	ldr	r3, [pc, #84]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	4a14      	ldr	r2, [pc, #80]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 8006932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006938:	e005      	b.n	8006946 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800693a:	4b12      	ldr	r3, [pc, #72]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	4a11      	ldr	r2, [pc, #68]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 8006940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006944:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006946:	4b0f      	ldr	r3, [pc, #60]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a0e      	ldr	r2, [pc, #56]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 800694c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006952:	f7fa fc71 	bl	8001238 <HAL_GetTick>
 8006956:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006958:	e008      	b.n	800696c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800695a:	f7fa fc6d 	bl	8001238 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e006      	b.n	800697a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <RCCEx_PLL2_Config+0x15c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0f0      	beq.n	800695a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	58024400 	.word	0x58024400
 8006988:	ffff0007 	.word	0xffff0007

0800698c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800699a:	4b53      	ldr	r3, [pc, #332]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 800699c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d101      	bne.n	80069aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e099      	b.n	8006ade <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80069aa:	4b4f      	ldr	r3, [pc, #316]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a4e      	ldr	r2, [pc, #312]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 80069b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069b6:	f7fa fc3f 	bl	8001238 <HAL_GetTick>
 80069ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069bc:	e008      	b.n	80069d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80069be:	f7fa fc3b 	bl	8001238 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d901      	bls.n	80069d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e086      	b.n	8006ade <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069d0:	4b45      	ldr	r3, [pc, #276]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1f0      	bne.n	80069be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80069dc:	4b42      	ldr	r3, [pc, #264]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 80069de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	051b      	lsls	r3, r3, #20
 80069ea:	493f      	ldr	r1, [pc, #252]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	628b      	str	r3, [r1, #40]	; 0x28
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	025b      	lsls	r3, r3, #9
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	431a      	orrs	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	041b      	lsls	r3, r3, #16
 8006a0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a12:	431a      	orrs	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	061b      	lsls	r3, r3, #24
 8006a1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a20:	4931      	ldr	r1, [pc, #196]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a26:	4b30      	ldr	r3, [pc, #192]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	492d      	ldr	r1, [pc, #180]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a38:	4b2b      	ldr	r3, [pc, #172]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	4928      	ldr	r1, [pc, #160]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a4a:	4b27      	ldr	r3, [pc, #156]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	4a26      	ldr	r2, [pc, #152]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a56:	4b24      	ldr	r3, [pc, #144]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a5a:	4b24      	ldr	r3, [pc, #144]	; (8006aec <RCCEx_PLL3_Config+0x160>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	69d2      	ldr	r2, [r2, #28]
 8006a62:	00d2      	lsls	r2, r2, #3
 8006a64:	4920      	ldr	r1, [pc, #128]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a6a:	4b1f      	ldr	r3, [pc, #124]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d106      	bne.n	8006a8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a7c:	4b1a      	ldr	r3, [pc, #104]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	4a19      	ldr	r2, [pc, #100]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a88:	e00f      	b.n	8006aaa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d106      	bne.n	8006a9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a90:	4b15      	ldr	r3, [pc, #84]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	4a14      	ldr	r2, [pc, #80]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006a96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a9c:	e005      	b.n	8006aaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a9e:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	4a11      	ldr	r2, [pc, #68]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a0e      	ldr	r2, [pc, #56]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab6:	f7fa fbbf 	bl	8001238 <HAL_GetTick>
 8006aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006abc:	e008      	b.n	8006ad0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006abe:	f7fa fbbb 	bl	8001238 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e006      	b.n	8006ade <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <RCCEx_PLL3_Config+0x15c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0f0      	beq.n	8006abe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	58024400 	.word	0x58024400
 8006aec:	ffff0007 	.word	0xffff0007

08006af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e049      	b.n	8006b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fa f90c 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4610      	mov	r0, r2
 8006b30:	f000 ff18 	bl	8007964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d001      	beq.n	8006bb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e04c      	b.n	8006c52 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a26      	ldr	r2, [pc, #152]	; (8006c60 <HAL_TIM_Base_Start+0xc0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d022      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd2:	d01d      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a22      	ldr	r2, [pc, #136]	; (8006c64 <HAL_TIM_Base_Start+0xc4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d018      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a21      	ldr	r2, [pc, #132]	; (8006c68 <HAL_TIM_Base_Start+0xc8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d013      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a1f      	ldr	r2, [pc, #124]	; (8006c6c <HAL_TIM_Base_Start+0xcc>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00e      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a1e      	ldr	r2, [pc, #120]	; (8006c70 <HAL_TIM_Base_Start+0xd0>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d009      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1c      	ldr	r2, [pc, #112]	; (8006c74 <HAL_TIM_Base_Start+0xd4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d004      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1b      	ldr	r2, [pc, #108]	; (8006c78 <HAL_TIM_Base_Start+0xd8>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d115      	bne.n	8006c3c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	4b19      	ldr	r3, [pc, #100]	; (8006c7c <HAL_TIM_Base_Start+0xdc>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b06      	cmp	r3, #6
 8006c20:	d015      	beq.n	8006c4e <HAL_TIM_Base_Start+0xae>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c28:	d011      	beq.n	8006c4e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0201 	orr.w	r2, r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3a:	e008      	b.n	8006c4e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0201 	orr.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	e000      	b.n	8006c50 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40010400 	.word	0x40010400
 8006c74:	40001800 	.word	0x40001800
 8006c78:	40014000 	.word	0x40014000
 8006c7c:	00010007 	.word	0x00010007

08006c80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e049      	b.n	8006d26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f841 	bl	8006d2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3304      	adds	r3, #4
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	f000 fe50 	bl	8007964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
	...

08006d44 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d109      	bne.n	8006d70 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	bf0c      	ite	eq
 8006d68:	2301      	moveq	r3, #1
 8006d6a:	2300      	movne	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	e03c      	b.n	8006dea <HAL_TIM_PWM_Start_DMA+0xa6>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d109      	bne.n	8006d8a <HAL_TIM_PWM_Start_DMA+0x46>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	bf0c      	ite	eq
 8006d82:	2301      	moveq	r3, #1
 8006d84:	2300      	movne	r3, #0
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	e02f      	b.n	8006dea <HAL_TIM_PWM_Start_DMA+0xa6>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d109      	bne.n	8006da4 <HAL_TIM_PWM_Start_DMA+0x60>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	bf0c      	ite	eq
 8006d9c:	2301      	moveq	r3, #1
 8006d9e:	2300      	movne	r3, #0
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	e022      	b.n	8006dea <HAL_TIM_PWM_Start_DMA+0xa6>
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b0c      	cmp	r3, #12
 8006da8:	d109      	bne.n	8006dbe <HAL_TIM_PWM_Start_DMA+0x7a>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	bf0c      	ite	eq
 8006db6:	2301      	moveq	r3, #1
 8006db8:	2300      	movne	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	e015      	b.n	8006dea <HAL_TIM_PWM_Start_DMA+0xa6>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b10      	cmp	r3, #16
 8006dc2:	d109      	bne.n	8006dd8 <HAL_TIM_PWM_Start_DMA+0x94>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	bf0c      	ite	eq
 8006dd0:	2301      	moveq	r3, #1
 8006dd2:	2300      	movne	r3, #0
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	e008      	b.n	8006dea <HAL_TIM_PWM_Start_DMA+0xa6>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	bf0c      	ite	eq
 8006de4:	2301      	moveq	r3, #1
 8006de6:	2300      	movne	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006dee:	2302      	movs	r3, #2
 8006df0:	e1b0      	b.n	8007154 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d109      	bne.n	8006e0c <HAL_TIM_PWM_Start_DMA+0xc8>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	bf0c      	ite	eq
 8006e04:	2301      	moveq	r3, #1
 8006e06:	2300      	movne	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	e03c      	b.n	8006e86 <HAL_TIM_PWM_Start_DMA+0x142>
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d109      	bne.n	8006e26 <HAL_TIM_PWM_Start_DMA+0xe2>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	bf0c      	ite	eq
 8006e1e:	2301      	moveq	r3, #1
 8006e20:	2300      	movne	r3, #0
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	e02f      	b.n	8006e86 <HAL_TIM_PWM_Start_DMA+0x142>
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d109      	bne.n	8006e40 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	bf0c      	ite	eq
 8006e38:	2301      	moveq	r3, #1
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	e022      	b.n	8006e86 <HAL_TIM_PWM_Start_DMA+0x142>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b0c      	cmp	r3, #12
 8006e44:	d109      	bne.n	8006e5a <HAL_TIM_PWM_Start_DMA+0x116>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	bf0c      	ite	eq
 8006e52:	2301      	moveq	r3, #1
 8006e54:	2300      	movne	r3, #0
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	e015      	b.n	8006e86 <HAL_TIM_PWM_Start_DMA+0x142>
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b10      	cmp	r3, #16
 8006e5e:	d109      	bne.n	8006e74 <HAL_TIM_PWM_Start_DMA+0x130>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	bf0c      	ite	eq
 8006e6c:	2301      	moveq	r3, #1
 8006e6e:	2300      	movne	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	e008      	b.n	8006e86 <HAL_TIM_PWM_Start_DMA+0x142>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	bf0c      	ite	eq
 8006e80:	2301      	moveq	r3, #1
 8006e82:	2300      	movne	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d034      	beq.n	8006ef4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <HAL_TIM_PWM_Start_DMA+0x152>
 8006e90:	887b      	ldrh	r3, [r7, #2]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e15c      	b.n	8007154 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <HAL_TIM_PWM_Start_DMA+0x166>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ea8:	e026      	b.n	8006ef8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d104      	bne.n	8006eba <HAL_TIM_PWM_Start_DMA+0x176>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eb8:	e01e      	b.n	8006ef8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d104      	bne.n	8006eca <HAL_TIM_PWM_Start_DMA+0x186>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ec8:	e016      	b.n	8006ef8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b0c      	cmp	r3, #12
 8006ece:	d104      	bne.n	8006eda <HAL_TIM_PWM_Start_DMA+0x196>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ed8:	e00e      	b.n	8006ef8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b10      	cmp	r3, #16
 8006ede:	d104      	bne.n	8006eea <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ee8:	e006      	b.n	8006ef8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2202      	movs	r2, #2
 8006eee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ef2:	e001      	b.n	8006ef8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e12d      	b.n	8007154 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b0c      	cmp	r3, #12
 8006efc:	f200 80ae 	bhi.w	800705c <HAL_TIM_PWM_Start_DMA+0x318>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f3d 	.word	0x08006f3d
 8006f0c:	0800705d 	.word	0x0800705d
 8006f10:	0800705d 	.word	0x0800705d
 8006f14:	0800705d 	.word	0x0800705d
 8006f18:	08006f85 	.word	0x08006f85
 8006f1c:	0800705d 	.word	0x0800705d
 8006f20:	0800705d 	.word	0x0800705d
 8006f24:	0800705d 	.word	0x0800705d
 8006f28:	08006fcd 	.word	0x08006fcd
 8006f2c:	0800705d 	.word	0x0800705d
 8006f30:	0800705d 	.word	0x0800705d
 8006f34:	0800705d 	.word	0x0800705d
 8006f38:	08007015 	.word	0x08007015
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	4a86      	ldr	r2, [pc, #536]	; (800715c <HAL_TIM_PWM_Start_DMA+0x418>)
 8006f42:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	4a85      	ldr	r2, [pc, #532]	; (8007160 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8006f4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	4a84      	ldr	r2, [pc, #528]	; (8007164 <HAL_TIM_PWM_Start_DMA+0x420>)
 8006f52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3334      	adds	r3, #52	; 0x34
 8006f60:	461a      	mov	r2, r3
 8006f62:	887b      	ldrh	r3, [r7, #2]
 8006f64:	f7fa fdec 	bl	8001b40 <HAL_DMA_Start_IT>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e0f0      	b.n	8007154 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f80:	60da      	str	r2, [r3, #12]
      break;
 8006f82:	e06e      	b.n	8007062 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	4a74      	ldr	r2, [pc, #464]	; (800715c <HAL_TIM_PWM_Start_DMA+0x418>)
 8006f8a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f90:	4a73      	ldr	r2, [pc, #460]	; (8007160 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f98:	4a72      	ldr	r2, [pc, #456]	; (8007164 <HAL_TIM_PWM_Start_DMA+0x420>)
 8006f9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006fa0:	6879      	ldr	r1, [r7, #4]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3338      	adds	r3, #56	; 0x38
 8006fa8:	461a      	mov	r2, r3
 8006faa:	887b      	ldrh	r3, [r7, #2]
 8006fac:	f7fa fdc8 	bl	8001b40 <HAL_DMA_Start_IT>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e0cc      	b.n	8007154 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fc8:	60da      	str	r2, [r3, #12]
      break;
 8006fca:	e04a      	b.n	8007062 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	4a62      	ldr	r2, [pc, #392]	; (800715c <HAL_TIM_PWM_Start_DMA+0x418>)
 8006fd2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	4a61      	ldr	r2, [pc, #388]	; (8007160 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8006fda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	4a60      	ldr	r2, [pc, #384]	; (8007164 <HAL_TIM_PWM_Start_DMA+0x420>)
 8006fe2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	333c      	adds	r3, #60	; 0x3c
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	887b      	ldrh	r3, [r7, #2]
 8006ff4:	f7fa fda4 	bl	8001b40 <HAL_DMA_Start_IT>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e0a8      	b.n	8007154 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007010:	60da      	str	r2, [r3, #12]
      break;
 8007012:	e026      	b.n	8007062 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007018:	4a50      	ldr	r2, [pc, #320]	; (800715c <HAL_TIM_PWM_Start_DMA+0x418>)
 800701a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007020:	4a4f      	ldr	r2, [pc, #316]	; (8007160 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007022:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007028:	4a4e      	ldr	r2, [pc, #312]	; (8007164 <HAL_TIM_PWM_Start_DMA+0x420>)
 800702a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3340      	adds	r3, #64	; 0x40
 8007038:	461a      	mov	r2, r3
 800703a:	887b      	ldrh	r3, [r7, #2]
 800703c:	f7fa fd80 	bl	8001b40 <HAL_DMA_Start_IT>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e084      	b.n	8007154 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007058:	60da      	str	r2, [r3, #12]
      break;
 800705a:	e002      	b.n	8007062 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	75fb      	strb	r3, [r7, #23]
      break;
 8007060:	bf00      	nop
  }

  if (status == HAL_OK)
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d174      	bne.n	8007152 <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2201      	movs	r2, #1
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	4618      	mov	r0, r3
 8007072:	f001 f885 	bl	8008180 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a3b      	ldr	r2, [pc, #236]	; (8007168 <HAL_TIM_PWM_Start_DMA+0x424>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d013      	beq.n	80070a8 <HAL_TIM_PWM_Start_DMA+0x364>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a39      	ldr	r2, [pc, #228]	; (800716c <HAL_TIM_PWM_Start_DMA+0x428>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00e      	beq.n	80070a8 <HAL_TIM_PWM_Start_DMA+0x364>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a38      	ldr	r2, [pc, #224]	; (8007170 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d009      	beq.n	80070a8 <HAL_TIM_PWM_Start_DMA+0x364>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a36      	ldr	r2, [pc, #216]	; (8007174 <HAL_TIM_PWM_Start_DMA+0x430>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d004      	beq.n	80070a8 <HAL_TIM_PWM_Start_DMA+0x364>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a35      	ldr	r2, [pc, #212]	; (8007178 <HAL_TIM_PWM_Start_DMA+0x434>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d101      	bne.n	80070ac <HAL_TIM_PWM_Start_DMA+0x368>
 80070a8:	2301      	movs	r3, #1
 80070aa:	e000      	b.n	80070ae <HAL_TIM_PWM_Start_DMA+0x36a>
 80070ac:	2300      	movs	r3, #0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a28      	ldr	r2, [pc, #160]	; (8007168 <HAL_TIM_PWM_Start_DMA+0x424>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d022      	beq.n	8007112 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d4:	d01d      	beq.n	8007112 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a28      	ldr	r2, [pc, #160]	; (800717c <HAL_TIM_PWM_Start_DMA+0x438>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d018      	beq.n	8007112 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a26      	ldr	r2, [pc, #152]	; (8007180 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d013      	beq.n	8007112 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a25      	ldr	r2, [pc, #148]	; (8007184 <HAL_TIM_PWM_Start_DMA+0x440>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00e      	beq.n	8007112 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a1c      	ldr	r2, [pc, #112]	; (800716c <HAL_TIM_PWM_Start_DMA+0x428>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d009      	beq.n	8007112 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a21      	ldr	r2, [pc, #132]	; (8007188 <HAL_TIM_PWM_Start_DMA+0x444>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d004      	beq.n	8007112 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a18      	ldr	r2, [pc, #96]	; (8007170 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d115      	bne.n	800713e <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	4b1c      	ldr	r3, [pc, #112]	; (800718c <HAL_TIM_PWM_Start_DMA+0x448>)
 800711a:	4013      	ands	r3, r2
 800711c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2b06      	cmp	r3, #6
 8007122:	d015      	beq.n	8007150 <HAL_TIM_PWM_Start_DMA+0x40c>
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800712a:	d011      	beq.n	8007150 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0201 	orr.w	r2, r2, #1
 800713a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800713c:	e008      	b.n	8007150 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f042 0201 	orr.w	r2, r2, #1
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	e000      	b.n	8007152 <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007150:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	08007853 	.word	0x08007853
 8007160:	080078fb 	.word	0x080078fb
 8007164:	080077c1 	.word	0x080077c1
 8007168:	40010000 	.word	0x40010000
 800716c:	40010400 	.word	0x40010400
 8007170:	40014000 	.word	0x40014000
 8007174:	40014400 	.word	0x40014400
 8007178:	40014800 	.word	0x40014800
 800717c:	40000400 	.word	0x40000400
 8007180:	40000800 	.word	0x40000800
 8007184:	40000c00 	.word	0x40000c00
 8007188:	40001800 	.word	0x40001800
 800718c:	00010007 	.word	0x00010007

08007190 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b0c      	cmp	r3, #12
 80071a2:	d855      	bhi.n	8007250 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80071a4:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	080071e1 	.word	0x080071e1
 80071b0:	08007251 	.word	0x08007251
 80071b4:	08007251 	.word	0x08007251
 80071b8:	08007251 	.word	0x08007251
 80071bc:	080071fd 	.word	0x080071fd
 80071c0:	08007251 	.word	0x08007251
 80071c4:	08007251 	.word	0x08007251
 80071c8:	08007251 	.word	0x08007251
 80071cc:	08007219 	.word	0x08007219
 80071d0:	08007251 	.word	0x08007251
 80071d4:	08007251 	.word	0x08007251
 80071d8:	08007251 	.word	0x08007251
 80071dc:	08007235 	.word	0x08007235
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80071ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fa ff0d 	bl	8002014 <HAL_DMA_Abort_IT>
      break;
 80071fa:	e02c      	b.n	8007256 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800720a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007210:	4618      	mov	r0, r3
 8007212:	f7fa feff 	bl	8002014 <HAL_DMA_Abort_IT>
      break;
 8007216:	e01e      	b.n	8007256 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007226:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	4618      	mov	r0, r3
 800722e:	f7fa fef1 	bl	8002014 <HAL_DMA_Abort_IT>
      break;
 8007232:	e010      	b.n	8007256 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007242:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	4618      	mov	r0, r3
 800724a:	f7fa fee3 	bl	8002014 <HAL_DMA_Abort_IT>
      break;
 800724e:	e002      	b.n	8007256 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	73fb      	strb	r3, [r7, #15]
      break;
 8007254:	bf00      	nop
  }

  if (status == HAL_OK)
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	2b00      	cmp	r3, #0
 800725a:	f040 8081 	bne.w	8007360 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2200      	movs	r2, #0
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	4618      	mov	r0, r3
 8007268:	f000 ff8a 	bl	8008180 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a3e      	ldr	r2, [pc, #248]	; (800736c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d013      	beq.n	800729e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a3d      	ldr	r2, [pc, #244]	; (8007370 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d00e      	beq.n	800729e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a3b      	ldr	r2, [pc, #236]	; (8007374 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d009      	beq.n	800729e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a3a      	ldr	r2, [pc, #232]	; (8007378 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d004      	beq.n	800729e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a38      	ldr	r2, [pc, #224]	; (800737c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d101      	bne.n	80072a2 <HAL_TIM_PWM_Stop_DMA+0x112>
 800729e:	2301      	movs	r3, #1
 80072a0:	e000      	b.n	80072a4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80072a2:	2300      	movs	r3, #0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d017      	beq.n	80072d8 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6a1a      	ldr	r2, [r3, #32]
 80072ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10f      	bne.n	80072d8 <HAL_TIM_PWM_Stop_DMA+0x148>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6a1a      	ldr	r2, [r3, #32]
 80072be:	f240 4344 	movw	r3, #1092	; 0x444
 80072c2:	4013      	ands	r3, r2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d107      	bne.n	80072d8 <HAL_TIM_PWM_Stop_DMA+0x148>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6a1a      	ldr	r2, [r3, #32]
 80072de:	f241 1311 	movw	r3, #4369	; 0x1111
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10f      	bne.n	8007308 <HAL_TIM_PWM_Stop_DMA+0x178>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6a1a      	ldr	r2, [r3, #32]
 80072ee:	f240 4344 	movw	r3, #1092	; 0x444
 80072f2:	4013      	ands	r3, r2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d107      	bne.n	8007308 <HAL_TIM_PWM_Stop_DMA+0x178>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0201 	bic.w	r2, r2, #1
 8007306:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d104      	bne.n	8007318 <HAL_TIM_PWM_Stop_DMA+0x188>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007316:	e023      	b.n	8007360 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b04      	cmp	r3, #4
 800731c:	d104      	bne.n	8007328 <HAL_TIM_PWM_Stop_DMA+0x198>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007326:	e01b      	b.n	8007360 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b08      	cmp	r3, #8
 800732c:	d104      	bne.n	8007338 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007336:	e013      	b.n	8007360 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b0c      	cmp	r3, #12
 800733c:	d104      	bne.n	8007348 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007346:	e00b      	b.n	8007360 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b10      	cmp	r3, #16
 800734c:	d104      	bne.n	8007358 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007356:	e003      	b.n	8007360 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	40010000 	.word	0x40010000
 8007370:	40010400 	.word	0x40010400
 8007374:	40014000 	.word	0x40014000
 8007378:	40014400 	.word	0x40014400
 800737c:	40014800 	.word	0x40014800

08007380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800739a:	2302      	movs	r3, #2
 800739c:	e0ff      	b.n	800759e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b14      	cmp	r3, #20
 80073aa:	f200 80f0 	bhi.w	800758e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	08007409 	.word	0x08007409
 80073b8:	0800758f 	.word	0x0800758f
 80073bc:	0800758f 	.word	0x0800758f
 80073c0:	0800758f 	.word	0x0800758f
 80073c4:	08007449 	.word	0x08007449
 80073c8:	0800758f 	.word	0x0800758f
 80073cc:	0800758f 	.word	0x0800758f
 80073d0:	0800758f 	.word	0x0800758f
 80073d4:	0800748b 	.word	0x0800748b
 80073d8:	0800758f 	.word	0x0800758f
 80073dc:	0800758f 	.word	0x0800758f
 80073e0:	0800758f 	.word	0x0800758f
 80073e4:	080074cb 	.word	0x080074cb
 80073e8:	0800758f 	.word	0x0800758f
 80073ec:	0800758f 	.word	0x0800758f
 80073f0:	0800758f 	.word	0x0800758f
 80073f4:	0800750d 	.word	0x0800750d
 80073f8:	0800758f 	.word	0x0800758f
 80073fc:	0800758f 	.word	0x0800758f
 8007400:	0800758f 	.word	0x0800758f
 8007404:	0800754d 	.word	0x0800754d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68b9      	ldr	r1, [r7, #8]
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fb42 	bl	8007a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0208 	orr.w	r2, r2, #8
 8007422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0204 	bic.w	r2, r2, #4
 8007432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6999      	ldr	r1, [r3, #24]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	619a      	str	r2, [r3, #24]
      break;
 8007446:	e0a5      	b.n	8007594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fbb2 	bl	8007bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699a      	ldr	r2, [r3, #24]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6999      	ldr	r1, [r3, #24]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	021a      	lsls	r2, r3, #8
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	619a      	str	r2, [r3, #24]
      break;
 8007488:	e084      	b.n	8007594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fc1b 	bl	8007ccc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69da      	ldr	r2, [r3, #28]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f042 0208 	orr.w	r2, r2, #8
 80074a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69da      	ldr	r2, [r3, #28]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0204 	bic.w	r2, r2, #4
 80074b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69d9      	ldr	r1, [r3, #28]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	691a      	ldr	r2, [r3, #16]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	61da      	str	r2, [r3, #28]
      break;
 80074c8:	e064      	b.n	8007594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68b9      	ldr	r1, [r7, #8]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fc83 	bl	8007ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69da      	ldr	r2, [r3, #28]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69da      	ldr	r2, [r3, #28]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69d9      	ldr	r1, [r3, #28]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	021a      	lsls	r2, r3, #8
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	61da      	str	r2, [r3, #28]
      break;
 800750a:	e043      	b.n	8007594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68b9      	ldr	r1, [r7, #8]
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fccc 	bl	8007eb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0208 	orr.w	r2, r2, #8
 8007526:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0204 	bic.w	r2, r2, #4
 8007536:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	691a      	ldr	r2, [r3, #16]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800754a:	e023      	b.n	8007594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fd10 	bl	8007f78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007566:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007576:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	021a      	lsls	r2, r3, #8
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800758c:	e002      	b.n	8007594 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	75fb      	strb	r3, [r7, #23]
      break;
 8007592:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800759c:	7dfb      	ldrb	r3, [r7, #23]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop

080075a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <HAL_TIM_ConfigClockSource+0x1c>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e0dc      	b.n	800777e <HAL_TIM_ConfigClockSource+0x1d6>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	4b6a      	ldr	r3, [pc, #424]	; (8007788 <HAL_TIM_ConfigClockSource+0x1e0>)
 80075e0:	4013      	ands	r3, r2
 80075e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a64      	ldr	r2, [pc, #400]	; (800778c <HAL_TIM_ConfigClockSource+0x1e4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	f000 80a9 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1aa>
 8007600:	4a62      	ldr	r2, [pc, #392]	; (800778c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007602:	4293      	cmp	r3, r2
 8007604:	f200 80ae 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
 8007608:	4a61      	ldr	r2, [pc, #388]	; (8007790 <HAL_TIM_ConfigClockSource+0x1e8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	f000 80a1 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1aa>
 8007610:	4a5f      	ldr	r2, [pc, #380]	; (8007790 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007612:	4293      	cmp	r3, r2
 8007614:	f200 80a6 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
 8007618:	4a5e      	ldr	r2, [pc, #376]	; (8007794 <HAL_TIM_ConfigClockSource+0x1ec>)
 800761a:	4293      	cmp	r3, r2
 800761c:	f000 8099 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1aa>
 8007620:	4a5c      	ldr	r2, [pc, #368]	; (8007794 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007622:	4293      	cmp	r3, r2
 8007624:	f200 809e 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
 8007628:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800762c:	f000 8091 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1aa>
 8007630:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007634:	f200 8096 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
 8007638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800763c:	f000 8089 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1aa>
 8007640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007644:	f200 808e 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
 8007648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800764c:	d03e      	beq.n	80076cc <HAL_TIM_ConfigClockSource+0x124>
 800764e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007652:	f200 8087 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
 8007656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765a:	f000 8086 	beq.w	800776a <HAL_TIM_ConfigClockSource+0x1c2>
 800765e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007662:	d87f      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
 8007664:	2b70      	cmp	r3, #112	; 0x70
 8007666:	d01a      	beq.n	800769e <HAL_TIM_ConfigClockSource+0xf6>
 8007668:	2b70      	cmp	r3, #112	; 0x70
 800766a:	d87b      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
 800766c:	2b60      	cmp	r3, #96	; 0x60
 800766e:	d050      	beq.n	8007712 <HAL_TIM_ConfigClockSource+0x16a>
 8007670:	2b60      	cmp	r3, #96	; 0x60
 8007672:	d877      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
 8007674:	2b50      	cmp	r3, #80	; 0x50
 8007676:	d03c      	beq.n	80076f2 <HAL_TIM_ConfigClockSource+0x14a>
 8007678:	2b50      	cmp	r3, #80	; 0x50
 800767a:	d873      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d058      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x18a>
 8007680:	2b40      	cmp	r3, #64	; 0x40
 8007682:	d86f      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
 8007684:	2b30      	cmp	r3, #48	; 0x30
 8007686:	d064      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0x1aa>
 8007688:	2b30      	cmp	r3, #48	; 0x30
 800768a:	d86b      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
 800768c:	2b20      	cmp	r3, #32
 800768e:	d060      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0x1aa>
 8007690:	2b20      	cmp	r3, #32
 8007692:	d867      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
 8007694:	2b00      	cmp	r3, #0
 8007696:	d05c      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0x1aa>
 8007698:	2b10      	cmp	r3, #16
 800769a:	d05a      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0x1aa>
 800769c:	e062      	b.n	8007764 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076ae:	f000 fd47 	bl	8008140 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	609a      	str	r2, [r3, #8]
      break;
 80076ca:	e04f      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076dc:	f000 fd30 	bl	8008140 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076ee:	609a      	str	r2, [r3, #8]
      break;
 80076f0:	e03c      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076fe:	461a      	mov	r2, r3
 8007700:	f000 fca0 	bl	8008044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2150      	movs	r1, #80	; 0x50
 800770a:	4618      	mov	r0, r3
 800770c:	f000 fcfa 	bl	8008104 <TIM_ITRx_SetConfig>
      break;
 8007710:	e02c      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800771e:	461a      	mov	r2, r3
 8007720:	f000 fcbf 	bl	80080a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2160      	movs	r1, #96	; 0x60
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fcea 	bl	8008104 <TIM_ITRx_SetConfig>
      break;
 8007730:	e01c      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800773e:	461a      	mov	r2, r3
 8007740:	f000 fc80 	bl	8008044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2140      	movs	r1, #64	; 0x40
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fcda 	bl	8008104 <TIM_ITRx_SetConfig>
      break;
 8007750:	e00c      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f000 fcd1 	bl	8008104 <TIM_ITRx_SetConfig>
      break;
 8007762:	e003      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	73fb      	strb	r3, [r7, #15]
      break;
 8007768:	e000      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800776a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800777c:	7bfb      	ldrb	r3, [r7, #15]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	ffceff88 	.word	0xffceff88
 800778c:	00100040 	.word	0x00100040
 8007790:	00100030 	.word	0x00100030
 8007794:	00100020 	.word	0x00100020

08007798 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d107      	bne.n	80077e8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077e6:	e02a      	b.n	800783e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d107      	bne.n	8007802 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2202      	movs	r2, #2
 80077f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007800:	e01d      	b.n	800783e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	429a      	cmp	r2, r3
 800780a:	d107      	bne.n	800781c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2204      	movs	r2, #4
 8007810:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800781a:	e010      	b.n	800783e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	429a      	cmp	r2, r3
 8007824:	d107      	bne.n	8007836 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2208      	movs	r2, #8
 800782a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007834:	e003      	b.n	800783e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f7ff ffb4 	bl	80077ac <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	771a      	strb	r2, [r3, #28]
}
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	429a      	cmp	r2, r3
 8007868:	d10b      	bne.n	8007882 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d136      	bne.n	80078e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007880:	e031      	b.n	80078e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	429a      	cmp	r2, r3
 800788a:	d10b      	bne.n	80078a4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2202      	movs	r2, #2
 8007890:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d125      	bne.n	80078e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078a2:	e020      	b.n	80078e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d10b      	bne.n	80078c6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2204      	movs	r2, #4
 80078b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d114      	bne.n	80078e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078c4:	e00f      	b.n	80078e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d10a      	bne.n	80078e6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2208      	movs	r2, #8
 80078d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d103      	bne.n	80078e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7f9 f9f0 	bl	8000ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	771a      	strb	r2, [r3, #28]
}
 80078f2:	bf00      	nop
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	429a      	cmp	r2, r3
 8007910:	d103      	bne.n	800791a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2201      	movs	r2, #1
 8007916:	771a      	strb	r2, [r3, #28]
 8007918:	e019      	b.n	800794e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d103      	bne.n	800792c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2202      	movs	r2, #2
 8007928:	771a      	strb	r2, [r3, #28]
 800792a:	e010      	b.n	800794e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	429a      	cmp	r2, r3
 8007934:	d103      	bne.n	800793e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2204      	movs	r2, #4
 800793a:	771a      	strb	r2, [r3, #28]
 800793c:	e007      	b.n	800794e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	429a      	cmp	r2, r3
 8007946:	d102      	bne.n	800794e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2208      	movs	r2, #8
 800794c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7ff ff22 	bl	8007798 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	771a      	strb	r2, [r3, #28]
}
 800795a:	bf00      	nop
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a40      	ldr	r2, [pc, #256]	; (8007a78 <TIM_Base_SetConfig+0x114>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d013      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007982:	d00f      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a3d      	ldr	r2, [pc, #244]	; (8007a7c <TIM_Base_SetConfig+0x118>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d00b      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a3c      	ldr	r2, [pc, #240]	; (8007a80 <TIM_Base_SetConfig+0x11c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d007      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a3b      	ldr	r2, [pc, #236]	; (8007a84 <TIM_Base_SetConfig+0x120>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d003      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a3a      	ldr	r2, [pc, #232]	; (8007a88 <TIM_Base_SetConfig+0x124>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d108      	bne.n	80079b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a2f      	ldr	r2, [pc, #188]	; (8007a78 <TIM_Base_SetConfig+0x114>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d01f      	beq.n	80079fe <TIM_Base_SetConfig+0x9a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c4:	d01b      	beq.n	80079fe <TIM_Base_SetConfig+0x9a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a2c      	ldr	r2, [pc, #176]	; (8007a7c <TIM_Base_SetConfig+0x118>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d017      	beq.n	80079fe <TIM_Base_SetConfig+0x9a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a2b      	ldr	r2, [pc, #172]	; (8007a80 <TIM_Base_SetConfig+0x11c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d013      	beq.n	80079fe <TIM_Base_SetConfig+0x9a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a2a      	ldr	r2, [pc, #168]	; (8007a84 <TIM_Base_SetConfig+0x120>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d00f      	beq.n	80079fe <TIM_Base_SetConfig+0x9a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a29      	ldr	r2, [pc, #164]	; (8007a88 <TIM_Base_SetConfig+0x124>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00b      	beq.n	80079fe <TIM_Base_SetConfig+0x9a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a28      	ldr	r2, [pc, #160]	; (8007a8c <TIM_Base_SetConfig+0x128>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d007      	beq.n	80079fe <TIM_Base_SetConfig+0x9a>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a27      	ldr	r2, [pc, #156]	; (8007a90 <TIM_Base_SetConfig+0x12c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d003      	beq.n	80079fe <TIM_Base_SetConfig+0x9a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a26      	ldr	r2, [pc, #152]	; (8007a94 <TIM_Base_SetConfig+0x130>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d108      	bne.n	8007a10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a10      	ldr	r2, [pc, #64]	; (8007a78 <TIM_Base_SetConfig+0x114>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d00f      	beq.n	8007a5c <TIM_Base_SetConfig+0xf8>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a12      	ldr	r2, [pc, #72]	; (8007a88 <TIM_Base_SetConfig+0x124>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d00b      	beq.n	8007a5c <TIM_Base_SetConfig+0xf8>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a11      	ldr	r2, [pc, #68]	; (8007a8c <TIM_Base_SetConfig+0x128>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d007      	beq.n	8007a5c <TIM_Base_SetConfig+0xf8>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a10      	ldr	r2, [pc, #64]	; (8007a90 <TIM_Base_SetConfig+0x12c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d003      	beq.n	8007a5c <TIM_Base_SetConfig+0xf8>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a0f      	ldr	r2, [pc, #60]	; (8007a94 <TIM_Base_SetConfig+0x130>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d103      	bne.n	8007a64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	615a      	str	r2, [r3, #20]
}
 8007a6a:	bf00      	nop
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	40010000 	.word	0x40010000
 8007a7c:	40000400 	.word	0x40000400
 8007a80:	40000800 	.word	0x40000800
 8007a84:	40000c00 	.word	0x40000c00
 8007a88:	40010400 	.word	0x40010400
 8007a8c:	40014000 	.word	0x40014000
 8007a90:	40014400 	.word	0x40014400
 8007a94:	40014800 	.word	0x40014800

08007a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	f023 0201 	bic.w	r2, r3, #1
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4b37      	ldr	r3, [pc, #220]	; (8007ba0 <TIM_OC1_SetConfig+0x108>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0303 	bic.w	r3, r3, #3
 8007ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f023 0302 	bic.w	r3, r3, #2
 8007ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a2d      	ldr	r2, [pc, #180]	; (8007ba4 <TIM_OC1_SetConfig+0x10c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00f      	beq.n	8007b14 <TIM_OC1_SetConfig+0x7c>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a2c      	ldr	r2, [pc, #176]	; (8007ba8 <TIM_OC1_SetConfig+0x110>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00b      	beq.n	8007b14 <TIM_OC1_SetConfig+0x7c>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a2b      	ldr	r2, [pc, #172]	; (8007bac <TIM_OC1_SetConfig+0x114>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d007      	beq.n	8007b14 <TIM_OC1_SetConfig+0x7c>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a2a      	ldr	r2, [pc, #168]	; (8007bb0 <TIM_OC1_SetConfig+0x118>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d003      	beq.n	8007b14 <TIM_OC1_SetConfig+0x7c>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a29      	ldr	r2, [pc, #164]	; (8007bb4 <TIM_OC1_SetConfig+0x11c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d10c      	bne.n	8007b2e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f023 0308 	bic.w	r3, r3, #8
 8007b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f023 0304 	bic.w	r3, r3, #4
 8007b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a1c      	ldr	r2, [pc, #112]	; (8007ba4 <TIM_OC1_SetConfig+0x10c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00f      	beq.n	8007b56 <TIM_OC1_SetConfig+0xbe>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a1b      	ldr	r2, [pc, #108]	; (8007ba8 <TIM_OC1_SetConfig+0x110>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d00b      	beq.n	8007b56 <TIM_OC1_SetConfig+0xbe>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a1a      	ldr	r2, [pc, #104]	; (8007bac <TIM_OC1_SetConfig+0x114>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d007      	beq.n	8007b56 <TIM_OC1_SetConfig+0xbe>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a19      	ldr	r2, [pc, #100]	; (8007bb0 <TIM_OC1_SetConfig+0x118>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d003      	beq.n	8007b56 <TIM_OC1_SetConfig+0xbe>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a18      	ldr	r2, [pc, #96]	; (8007bb4 <TIM_OC1_SetConfig+0x11c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d111      	bne.n	8007b7a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	621a      	str	r2, [r3, #32]
}
 8007b94:	bf00      	nop
 8007b96:	371c      	adds	r7, #28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	fffeff8f 	.word	0xfffeff8f
 8007ba4:	40010000 	.word	0x40010000
 8007ba8:	40010400 	.word	0x40010400
 8007bac:	40014000 	.word	0x40014000
 8007bb0:	40014400 	.word	0x40014400
 8007bb4:	40014800 	.word	0x40014800

08007bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	f023 0210 	bic.w	r2, r3, #16
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	4b34      	ldr	r3, [pc, #208]	; (8007cb4 <TIM_OC2_SetConfig+0xfc>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f023 0320 	bic.w	r3, r3, #32
 8007c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	011b      	lsls	r3, r3, #4
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a29      	ldr	r2, [pc, #164]	; (8007cb8 <TIM_OC2_SetConfig+0x100>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d003      	beq.n	8007c20 <TIM_OC2_SetConfig+0x68>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a28      	ldr	r2, [pc, #160]	; (8007cbc <TIM_OC2_SetConfig+0x104>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d10d      	bne.n	8007c3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	011b      	lsls	r3, r3, #4
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a1e      	ldr	r2, [pc, #120]	; (8007cb8 <TIM_OC2_SetConfig+0x100>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d00f      	beq.n	8007c64 <TIM_OC2_SetConfig+0xac>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a1d      	ldr	r2, [pc, #116]	; (8007cbc <TIM_OC2_SetConfig+0x104>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d00b      	beq.n	8007c64 <TIM_OC2_SetConfig+0xac>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a1c      	ldr	r2, [pc, #112]	; (8007cc0 <TIM_OC2_SetConfig+0x108>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d007      	beq.n	8007c64 <TIM_OC2_SetConfig+0xac>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a1b      	ldr	r2, [pc, #108]	; (8007cc4 <TIM_OC2_SetConfig+0x10c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d003      	beq.n	8007c64 <TIM_OC2_SetConfig+0xac>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a1a      	ldr	r2, [pc, #104]	; (8007cc8 <TIM_OC2_SetConfig+0x110>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d113      	bne.n	8007c8c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	621a      	str	r2, [r3, #32]
}
 8007ca6:	bf00      	nop
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	feff8fff 	.word	0xfeff8fff
 8007cb8:	40010000 	.word	0x40010000
 8007cbc:	40010400 	.word	0x40010400
 8007cc0:	40014000 	.word	0x40014000
 8007cc4:	40014400 	.word	0x40014400
 8007cc8:	40014800 	.word	0x40014800

08007ccc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4b33      	ldr	r3, [pc, #204]	; (8007dc4 <TIM_OC3_SetConfig+0xf8>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 0303 	bic.w	r3, r3, #3
 8007d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	021b      	lsls	r3, r3, #8
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a28      	ldr	r2, [pc, #160]	; (8007dc8 <TIM_OC3_SetConfig+0xfc>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d003      	beq.n	8007d32 <TIM_OC3_SetConfig+0x66>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a27      	ldr	r2, [pc, #156]	; (8007dcc <TIM_OC3_SetConfig+0x100>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d10d      	bne.n	8007d4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	021b      	lsls	r3, r3, #8
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a1d      	ldr	r2, [pc, #116]	; (8007dc8 <TIM_OC3_SetConfig+0xfc>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d00f      	beq.n	8007d76 <TIM_OC3_SetConfig+0xaa>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a1c      	ldr	r2, [pc, #112]	; (8007dcc <TIM_OC3_SetConfig+0x100>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d00b      	beq.n	8007d76 <TIM_OC3_SetConfig+0xaa>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a1b      	ldr	r2, [pc, #108]	; (8007dd0 <TIM_OC3_SetConfig+0x104>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d007      	beq.n	8007d76 <TIM_OC3_SetConfig+0xaa>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a1a      	ldr	r2, [pc, #104]	; (8007dd4 <TIM_OC3_SetConfig+0x108>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d003      	beq.n	8007d76 <TIM_OC3_SetConfig+0xaa>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a19      	ldr	r2, [pc, #100]	; (8007dd8 <TIM_OC3_SetConfig+0x10c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d113      	bne.n	8007d9e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	011b      	lsls	r3, r3, #4
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	621a      	str	r2, [r3, #32]
}
 8007db8:	bf00      	nop
 8007dba:	371c      	adds	r7, #28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	fffeff8f 	.word	0xfffeff8f
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40010400 	.word	0x40010400
 8007dd0:	40014000 	.word	0x40014000
 8007dd4:	40014400 	.word	0x40014400
 8007dd8:	40014800 	.word	0x40014800

08007ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4b24      	ldr	r3, [pc, #144]	; (8007e98 <TIM_OC4_SetConfig+0xbc>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	021b      	lsls	r3, r3, #8
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	031b      	lsls	r3, r3, #12
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a19      	ldr	r2, [pc, #100]	; (8007e9c <TIM_OC4_SetConfig+0xc0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00f      	beq.n	8007e5c <TIM_OC4_SetConfig+0x80>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a18      	ldr	r2, [pc, #96]	; (8007ea0 <TIM_OC4_SetConfig+0xc4>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d00b      	beq.n	8007e5c <TIM_OC4_SetConfig+0x80>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a17      	ldr	r2, [pc, #92]	; (8007ea4 <TIM_OC4_SetConfig+0xc8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d007      	beq.n	8007e5c <TIM_OC4_SetConfig+0x80>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a16      	ldr	r2, [pc, #88]	; (8007ea8 <TIM_OC4_SetConfig+0xcc>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d003      	beq.n	8007e5c <TIM_OC4_SetConfig+0x80>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a15      	ldr	r2, [pc, #84]	; (8007eac <TIM_OC4_SetConfig+0xd0>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d109      	bne.n	8007e70 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	019b      	lsls	r3, r3, #6
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	621a      	str	r2, [r3, #32]
}
 8007e8a:	bf00      	nop
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	feff8fff 	.word	0xfeff8fff
 8007e9c:	40010000 	.word	0x40010000
 8007ea0:	40010400 	.word	0x40010400
 8007ea4:	40014000 	.word	0x40014000
 8007ea8:	40014400 	.word	0x40014400
 8007eac:	40014800 	.word	0x40014800

08007eb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	4b21      	ldr	r3, [pc, #132]	; (8007f60 <TIM_OC5_SetConfig+0xb0>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ef0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	041b      	lsls	r3, r3, #16
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a18      	ldr	r2, [pc, #96]	; (8007f64 <TIM_OC5_SetConfig+0xb4>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00f      	beq.n	8007f26 <TIM_OC5_SetConfig+0x76>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a17      	ldr	r2, [pc, #92]	; (8007f68 <TIM_OC5_SetConfig+0xb8>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d00b      	beq.n	8007f26 <TIM_OC5_SetConfig+0x76>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a16      	ldr	r2, [pc, #88]	; (8007f6c <TIM_OC5_SetConfig+0xbc>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d007      	beq.n	8007f26 <TIM_OC5_SetConfig+0x76>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a15      	ldr	r2, [pc, #84]	; (8007f70 <TIM_OC5_SetConfig+0xc0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d003      	beq.n	8007f26 <TIM_OC5_SetConfig+0x76>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a14      	ldr	r2, [pc, #80]	; (8007f74 <TIM_OC5_SetConfig+0xc4>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d109      	bne.n	8007f3a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	021b      	lsls	r3, r3, #8
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	621a      	str	r2, [r3, #32]
}
 8007f54:	bf00      	nop
 8007f56:	371c      	adds	r7, #28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	fffeff8f 	.word	0xfffeff8f
 8007f64:	40010000 	.word	0x40010000
 8007f68:	40010400 	.word	0x40010400
 8007f6c:	40014000 	.word	0x40014000
 8007f70:	40014400 	.word	0x40014400
 8007f74:	40014800 	.word	0x40014800

08007f78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	4b22      	ldr	r3, [pc, #136]	; (800802c <TIM_OC6_SetConfig+0xb4>)
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	051b      	lsls	r3, r3, #20
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a19      	ldr	r2, [pc, #100]	; (8008030 <TIM_OC6_SetConfig+0xb8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00f      	beq.n	8007ff0 <TIM_OC6_SetConfig+0x78>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a18      	ldr	r2, [pc, #96]	; (8008034 <TIM_OC6_SetConfig+0xbc>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d00b      	beq.n	8007ff0 <TIM_OC6_SetConfig+0x78>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a17      	ldr	r2, [pc, #92]	; (8008038 <TIM_OC6_SetConfig+0xc0>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d007      	beq.n	8007ff0 <TIM_OC6_SetConfig+0x78>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a16      	ldr	r2, [pc, #88]	; (800803c <TIM_OC6_SetConfig+0xc4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d003      	beq.n	8007ff0 <TIM_OC6_SetConfig+0x78>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a15      	ldr	r2, [pc, #84]	; (8008040 <TIM_OC6_SetConfig+0xc8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d109      	bne.n	8008004 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	029b      	lsls	r3, r3, #10
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	621a      	str	r2, [r3, #32]
}
 800801e:	bf00      	nop
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	feff8fff 	.word	0xfeff8fff
 8008030:	40010000 	.word	0x40010000
 8008034:	40010400 	.word	0x40010400
 8008038:	40014000 	.word	0x40014000
 800803c:	40014400 	.word	0x40014400
 8008040:	40014800 	.word	0x40014800

08008044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008044:	b480      	push	{r7}
 8008046:	b087      	sub	sp, #28
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6a1b      	ldr	r3, [r3, #32]
 8008054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	f023 0201 	bic.w	r2, r3, #1
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800806e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	4313      	orrs	r3, r2
 8008078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f023 030a 	bic.w	r3, r3, #10
 8008080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	4313      	orrs	r3, r2
 8008088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	621a      	str	r2, [r3, #32]
}
 8008096:	bf00      	nop
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b087      	sub	sp, #28
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	f023 0210 	bic.w	r2, r3, #16
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	031b      	lsls	r3, r3, #12
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	011b      	lsls	r3, r3, #4
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	621a      	str	r2, [r3, #32]
}
 80080f6:	bf00      	nop
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
	...

08008104 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4b09      	ldr	r3, [pc, #36]	; (800813c <TIM_ITRx_SetConfig+0x38>)
 8008118:	4013      	ands	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4313      	orrs	r3, r2
 8008122:	f043 0307 	orr.w	r3, r3, #7
 8008126:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	609a      	str	r2, [r3, #8]
}
 800812e:	bf00      	nop
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	ffcfff8f 	.word	0xffcfff8f

08008140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800815a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	021a      	lsls	r2, r3, #8
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	431a      	orrs	r2, r3
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	4313      	orrs	r3, r2
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	4313      	orrs	r3, r2
 800816c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	609a      	str	r2, [r3, #8]
}
 8008174:	bf00      	nop
 8008176:	371c      	adds	r7, #28
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f003 031f 	and.w	r3, r3, #31
 8008192:	2201      	movs	r2, #1
 8008194:	fa02 f303 	lsl.w	r3, r2, r3
 8008198:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6a1a      	ldr	r2, [r3, #32]
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	43db      	mvns	r3, r3
 80081a2:	401a      	ands	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a1a      	ldr	r2, [r3, #32]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 031f 	and.w	r3, r3, #31
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	fa01 f303 	lsl.w	r3, r1, r3
 80081b8:	431a      	orrs	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	621a      	str	r2, [r3, #32]
}
 80081be:	bf00      	nop
 80081c0:	371c      	adds	r7, #28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
	...

080081cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d101      	bne.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081e0:	2302      	movs	r3, #2
 80081e2:	e06d      	b.n	80082c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a30      	ldr	r2, [pc, #192]	; (80082cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d004      	beq.n	8008218 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a2f      	ldr	r2, [pc, #188]	; (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d108      	bne.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800821e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	4313      	orrs	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008230:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	4313      	orrs	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a20      	ldr	r2, [pc, #128]	; (80082cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d022      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008256:	d01d      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a1d      	ldr	r2, [pc, #116]	; (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d018      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a1c      	ldr	r2, [pc, #112]	; (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d013      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a1a      	ldr	r2, [pc, #104]	; (80082dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d00e      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a15      	ldr	r2, [pc, #84]	; (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d009      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a16      	ldr	r2, [pc, #88]	; (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d004      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a15      	ldr	r2, [pc, #84]	; (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d10c      	bne.n	80082ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800829a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	40010000 	.word	0x40010000
 80082d0:	40010400 	.word	0x40010400
 80082d4:	40000400 	.word	0x40000400
 80082d8:	40000800 	.word	0x40000800
 80082dc:	40000c00 	.word	0x40000c00
 80082e0:	40001800 	.word	0x40001800
 80082e4:	40014000 	.word	0x40014000

080082e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d101      	bne.n	8008304 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008300:	2302      	movs	r3, #2
 8008302:	e065      	b.n	80083d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	4313      	orrs	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	4313      	orrs	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	4313      	orrs	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4313      	orrs	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	4313      	orrs	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836a:	4313      	orrs	r3, r2
 800836c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	041b      	lsls	r3, r3, #16
 800837a:	4313      	orrs	r3, r2
 800837c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a16      	ldr	r2, [pc, #88]	; (80083dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d004      	beq.n	8008392 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a14      	ldr	r2, [pc, #80]	; (80083e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d115      	bne.n	80083be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	051b      	lsls	r3, r3, #20
 800839e:	4313      	orrs	r3, r2
 80083a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	40010000 	.word	0x40010000
 80083e0:	40010400 	.word	0x40010400

080083e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e042      	b.n	800847c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7f8 fd37 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2224      	movs	r2, #36	; 0x24
 8008412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 0201 	bic.w	r2, r2, #1
 8008424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f8ba 	bl	80085a0 <UART_SetConfig>
 800842c:	4603      	mov	r3, r0
 800842e:	2b01      	cmp	r3, #1
 8008430:	d101      	bne.n	8008436 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e022      	b.n	800847c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fe16 	bl	8009070 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685a      	ldr	r2, [r3, #4]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689a      	ldr	r2, [r3, #8]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f042 0201 	orr.w	r2, r2, #1
 8008472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fe9d 	bl	80091b4 <UART_CheckIdleState>
 800847a:	4603      	mov	r3, r0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b08a      	sub	sp, #40	; 0x28
 8008488:	af02      	add	r7, sp, #8
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	4613      	mov	r3, r2
 8008492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800849a:	2b20      	cmp	r3, #32
 800849c:	d17b      	bne.n	8008596 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <HAL_UART_Transmit+0x26>
 80084a4:	88fb      	ldrh	r3, [r7, #6]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e074      	b.n	8008598 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2221      	movs	r2, #33	; 0x21
 80084ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084be:	f7f8 febb 	bl	8001238 <HAL_GetTick>
 80084c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	88fa      	ldrh	r2, [r7, #6]
 80084c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	88fa      	ldrh	r2, [r7, #6]
 80084d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084dc:	d108      	bne.n	80084f0 <HAL_UART_Transmit+0x6c>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d104      	bne.n	80084f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80084e6:	2300      	movs	r3, #0
 80084e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	61bb      	str	r3, [r7, #24]
 80084ee:	e003      	b.n	80084f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084f4:	2300      	movs	r3, #0
 80084f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084f8:	e030      	b.n	800855c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2200      	movs	r2, #0
 8008502:	2180      	movs	r1, #128	; 0x80
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 feff 	bl	8009308 <UART_WaitOnFlagUntilTimeout>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d005      	beq.n	800851c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2220      	movs	r2, #32
 8008514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e03d      	b.n	8008598 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10b      	bne.n	800853a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008530:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	3302      	adds	r3, #2
 8008536:	61bb      	str	r3, [r7, #24]
 8008538:	e007      	b.n	800854a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	781a      	ldrb	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	3301      	adds	r3, #1
 8008548:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008550:	b29b      	uxth	r3, r3
 8008552:	3b01      	subs	r3, #1
 8008554:	b29a      	uxth	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008562:	b29b      	uxth	r3, r3
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1c8      	bne.n	80084fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	2200      	movs	r2, #0
 8008570:	2140      	movs	r1, #64	; 0x40
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fec8 	bl	8009308 <UART_WaitOnFlagUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d005      	beq.n	800858a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2220      	movs	r2, #32
 8008582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e006      	b.n	8008598 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2220      	movs	r2, #32
 800858e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	e000      	b.n	8008598 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008596:	2302      	movs	r3, #2
  }
}
 8008598:	4618      	mov	r0, r3
 800859a:	3720      	adds	r7, #32
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085a4:	b092      	sub	sp, #72	; 0x48
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	431a      	orrs	r2, r3
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	431a      	orrs	r2, r3
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	4bbe      	ldr	r3, [pc, #760]	; (80088c8 <UART_SetConfig+0x328>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	6812      	ldr	r2, [r2, #0]
 80085d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085d8:	430b      	orrs	r3, r1
 80085da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	68da      	ldr	r2, [r3, #12]
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	430a      	orrs	r2, r1
 80085f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4ab3      	ldr	r2, [pc, #716]	; (80088cc <UART_SetConfig+0x32c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d004      	beq.n	800860c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008608:	4313      	orrs	r3, r2
 800860a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	4baf      	ldr	r3, [pc, #700]	; (80088d0 <UART_SetConfig+0x330>)
 8008614:	4013      	ands	r3, r2
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	6812      	ldr	r2, [r2, #0]
 800861a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800861c:	430b      	orrs	r3, r1
 800861e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008626:	f023 010f 	bic.w	r1, r3, #15
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	430a      	orrs	r2, r1
 8008634:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4aa6      	ldr	r2, [pc, #664]	; (80088d4 <UART_SetConfig+0x334>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d177      	bne.n	8008730 <UART_SetConfig+0x190>
 8008640:	4ba5      	ldr	r3, [pc, #660]	; (80088d8 <UART_SetConfig+0x338>)
 8008642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008644:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008648:	2b28      	cmp	r3, #40	; 0x28
 800864a:	d86d      	bhi.n	8008728 <UART_SetConfig+0x188>
 800864c:	a201      	add	r2, pc, #4	; (adr r2, 8008654 <UART_SetConfig+0xb4>)
 800864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008652:	bf00      	nop
 8008654:	080086f9 	.word	0x080086f9
 8008658:	08008729 	.word	0x08008729
 800865c:	08008729 	.word	0x08008729
 8008660:	08008729 	.word	0x08008729
 8008664:	08008729 	.word	0x08008729
 8008668:	08008729 	.word	0x08008729
 800866c:	08008729 	.word	0x08008729
 8008670:	08008729 	.word	0x08008729
 8008674:	08008701 	.word	0x08008701
 8008678:	08008729 	.word	0x08008729
 800867c:	08008729 	.word	0x08008729
 8008680:	08008729 	.word	0x08008729
 8008684:	08008729 	.word	0x08008729
 8008688:	08008729 	.word	0x08008729
 800868c:	08008729 	.word	0x08008729
 8008690:	08008729 	.word	0x08008729
 8008694:	08008709 	.word	0x08008709
 8008698:	08008729 	.word	0x08008729
 800869c:	08008729 	.word	0x08008729
 80086a0:	08008729 	.word	0x08008729
 80086a4:	08008729 	.word	0x08008729
 80086a8:	08008729 	.word	0x08008729
 80086ac:	08008729 	.word	0x08008729
 80086b0:	08008729 	.word	0x08008729
 80086b4:	08008711 	.word	0x08008711
 80086b8:	08008729 	.word	0x08008729
 80086bc:	08008729 	.word	0x08008729
 80086c0:	08008729 	.word	0x08008729
 80086c4:	08008729 	.word	0x08008729
 80086c8:	08008729 	.word	0x08008729
 80086cc:	08008729 	.word	0x08008729
 80086d0:	08008729 	.word	0x08008729
 80086d4:	08008719 	.word	0x08008719
 80086d8:	08008729 	.word	0x08008729
 80086dc:	08008729 	.word	0x08008729
 80086e0:	08008729 	.word	0x08008729
 80086e4:	08008729 	.word	0x08008729
 80086e8:	08008729 	.word	0x08008729
 80086ec:	08008729 	.word	0x08008729
 80086f0:	08008729 	.word	0x08008729
 80086f4:	08008721 	.word	0x08008721
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fe:	e222      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008700:	2304      	movs	r3, #4
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008706:	e21e      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008708:	2308      	movs	r3, #8
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870e:	e21a      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008710:	2310      	movs	r3, #16
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008716:	e216      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008718:	2320      	movs	r3, #32
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871e:	e212      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008720:	2340      	movs	r3, #64	; 0x40
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008726:	e20e      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008728:	2380      	movs	r3, #128	; 0x80
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872e:	e20a      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a69      	ldr	r2, [pc, #420]	; (80088dc <UART_SetConfig+0x33c>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d130      	bne.n	800879c <UART_SetConfig+0x1fc>
 800873a:	4b67      	ldr	r3, [pc, #412]	; (80088d8 <UART_SetConfig+0x338>)
 800873c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873e:	f003 0307 	and.w	r3, r3, #7
 8008742:	2b05      	cmp	r3, #5
 8008744:	d826      	bhi.n	8008794 <UART_SetConfig+0x1f4>
 8008746:	a201      	add	r2, pc, #4	; (adr r2, 800874c <UART_SetConfig+0x1ac>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	08008765 	.word	0x08008765
 8008750:	0800876d 	.word	0x0800876d
 8008754:	08008775 	.word	0x08008775
 8008758:	0800877d 	.word	0x0800877d
 800875c:	08008785 	.word	0x08008785
 8008760:	0800878d 	.word	0x0800878d
 8008764:	2300      	movs	r3, #0
 8008766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876a:	e1ec      	b.n	8008b46 <UART_SetConfig+0x5a6>
 800876c:	2304      	movs	r3, #4
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008772:	e1e8      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008774:	2308      	movs	r3, #8
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877a:	e1e4      	b.n	8008b46 <UART_SetConfig+0x5a6>
 800877c:	2310      	movs	r3, #16
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008782:	e1e0      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008784:	2320      	movs	r3, #32
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878a:	e1dc      	b.n	8008b46 <UART_SetConfig+0x5a6>
 800878c:	2340      	movs	r3, #64	; 0x40
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008792:	e1d8      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008794:	2380      	movs	r3, #128	; 0x80
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879a:	e1d4      	b.n	8008b46 <UART_SetConfig+0x5a6>
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a4f      	ldr	r2, [pc, #316]	; (80088e0 <UART_SetConfig+0x340>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d130      	bne.n	8008808 <UART_SetConfig+0x268>
 80087a6:	4b4c      	ldr	r3, [pc, #304]	; (80088d8 <UART_SetConfig+0x338>)
 80087a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	2b05      	cmp	r3, #5
 80087b0:	d826      	bhi.n	8008800 <UART_SetConfig+0x260>
 80087b2:	a201      	add	r2, pc, #4	; (adr r2, 80087b8 <UART_SetConfig+0x218>)
 80087b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b8:	080087d1 	.word	0x080087d1
 80087bc:	080087d9 	.word	0x080087d9
 80087c0:	080087e1 	.word	0x080087e1
 80087c4:	080087e9 	.word	0x080087e9
 80087c8:	080087f1 	.word	0x080087f1
 80087cc:	080087f9 	.word	0x080087f9
 80087d0:	2300      	movs	r3, #0
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d6:	e1b6      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80087d8:	2304      	movs	r3, #4
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087de:	e1b2      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80087e0:	2308      	movs	r3, #8
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e6:	e1ae      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80087e8:	2310      	movs	r3, #16
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ee:	e1aa      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80087f0:	2320      	movs	r3, #32
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f6:	e1a6      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80087f8:	2340      	movs	r3, #64	; 0x40
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fe:	e1a2      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008800:	2380      	movs	r3, #128	; 0x80
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008806:	e19e      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a35      	ldr	r2, [pc, #212]	; (80088e4 <UART_SetConfig+0x344>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d130      	bne.n	8008874 <UART_SetConfig+0x2d4>
 8008812:	4b31      	ldr	r3, [pc, #196]	; (80088d8 <UART_SetConfig+0x338>)
 8008814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	2b05      	cmp	r3, #5
 800881c:	d826      	bhi.n	800886c <UART_SetConfig+0x2cc>
 800881e:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <UART_SetConfig+0x284>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	0800883d 	.word	0x0800883d
 8008828:	08008845 	.word	0x08008845
 800882c:	0800884d 	.word	0x0800884d
 8008830:	08008855 	.word	0x08008855
 8008834:	0800885d 	.word	0x0800885d
 8008838:	08008865 	.word	0x08008865
 800883c:	2300      	movs	r3, #0
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008842:	e180      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008844:	2304      	movs	r3, #4
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884a:	e17c      	b.n	8008b46 <UART_SetConfig+0x5a6>
 800884c:	2308      	movs	r3, #8
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008852:	e178      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008854:	2310      	movs	r3, #16
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885a:	e174      	b.n	8008b46 <UART_SetConfig+0x5a6>
 800885c:	2320      	movs	r3, #32
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008862:	e170      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886a:	e16c      	b.n	8008b46 <UART_SetConfig+0x5a6>
 800886c:	2380      	movs	r3, #128	; 0x80
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008872:	e168      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a1b      	ldr	r2, [pc, #108]	; (80088e8 <UART_SetConfig+0x348>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d142      	bne.n	8008904 <UART_SetConfig+0x364>
 800887e:	4b16      	ldr	r3, [pc, #88]	; (80088d8 <UART_SetConfig+0x338>)
 8008880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	2b05      	cmp	r3, #5
 8008888:	d838      	bhi.n	80088fc <UART_SetConfig+0x35c>
 800888a:	a201      	add	r2, pc, #4	; (adr r2, 8008890 <UART_SetConfig+0x2f0>)
 800888c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008890:	080088a9 	.word	0x080088a9
 8008894:	080088b1 	.word	0x080088b1
 8008898:	080088b9 	.word	0x080088b9
 800889c:	080088c1 	.word	0x080088c1
 80088a0:	080088ed 	.word	0x080088ed
 80088a4:	080088f5 	.word	0x080088f5
 80088a8:	2300      	movs	r3, #0
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ae:	e14a      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80088b0:	2304      	movs	r3, #4
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b6:	e146      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80088b8:	2308      	movs	r3, #8
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088be:	e142      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80088c0:	2310      	movs	r3, #16
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088c6:	e13e      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80088c8:	cfff69f3 	.word	0xcfff69f3
 80088cc:	58000c00 	.word	0x58000c00
 80088d0:	11fff4ff 	.word	0x11fff4ff
 80088d4:	40011000 	.word	0x40011000
 80088d8:	58024400 	.word	0x58024400
 80088dc:	40004400 	.word	0x40004400
 80088e0:	40004800 	.word	0x40004800
 80088e4:	40004c00 	.word	0x40004c00
 80088e8:	40005000 	.word	0x40005000
 80088ec:	2320      	movs	r3, #32
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f2:	e128      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80088f4:	2340      	movs	r3, #64	; 0x40
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fa:	e124      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80088fc:	2380      	movs	r3, #128	; 0x80
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008902:	e120      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4acb      	ldr	r2, [pc, #812]	; (8008c38 <UART_SetConfig+0x698>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d176      	bne.n	80089fc <UART_SetConfig+0x45c>
 800890e:	4bcb      	ldr	r3, [pc, #812]	; (8008c3c <UART_SetConfig+0x69c>)
 8008910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008916:	2b28      	cmp	r3, #40	; 0x28
 8008918:	d86c      	bhi.n	80089f4 <UART_SetConfig+0x454>
 800891a:	a201      	add	r2, pc, #4	; (adr r2, 8008920 <UART_SetConfig+0x380>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	080089c5 	.word	0x080089c5
 8008924:	080089f5 	.word	0x080089f5
 8008928:	080089f5 	.word	0x080089f5
 800892c:	080089f5 	.word	0x080089f5
 8008930:	080089f5 	.word	0x080089f5
 8008934:	080089f5 	.word	0x080089f5
 8008938:	080089f5 	.word	0x080089f5
 800893c:	080089f5 	.word	0x080089f5
 8008940:	080089cd 	.word	0x080089cd
 8008944:	080089f5 	.word	0x080089f5
 8008948:	080089f5 	.word	0x080089f5
 800894c:	080089f5 	.word	0x080089f5
 8008950:	080089f5 	.word	0x080089f5
 8008954:	080089f5 	.word	0x080089f5
 8008958:	080089f5 	.word	0x080089f5
 800895c:	080089f5 	.word	0x080089f5
 8008960:	080089d5 	.word	0x080089d5
 8008964:	080089f5 	.word	0x080089f5
 8008968:	080089f5 	.word	0x080089f5
 800896c:	080089f5 	.word	0x080089f5
 8008970:	080089f5 	.word	0x080089f5
 8008974:	080089f5 	.word	0x080089f5
 8008978:	080089f5 	.word	0x080089f5
 800897c:	080089f5 	.word	0x080089f5
 8008980:	080089dd 	.word	0x080089dd
 8008984:	080089f5 	.word	0x080089f5
 8008988:	080089f5 	.word	0x080089f5
 800898c:	080089f5 	.word	0x080089f5
 8008990:	080089f5 	.word	0x080089f5
 8008994:	080089f5 	.word	0x080089f5
 8008998:	080089f5 	.word	0x080089f5
 800899c:	080089f5 	.word	0x080089f5
 80089a0:	080089e5 	.word	0x080089e5
 80089a4:	080089f5 	.word	0x080089f5
 80089a8:	080089f5 	.word	0x080089f5
 80089ac:	080089f5 	.word	0x080089f5
 80089b0:	080089f5 	.word	0x080089f5
 80089b4:	080089f5 	.word	0x080089f5
 80089b8:	080089f5 	.word	0x080089f5
 80089bc:	080089f5 	.word	0x080089f5
 80089c0:	080089ed 	.word	0x080089ed
 80089c4:	2301      	movs	r3, #1
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ca:	e0bc      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80089cc:	2304      	movs	r3, #4
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d2:	e0b8      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80089d4:	2308      	movs	r3, #8
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089da:	e0b4      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80089dc:	2310      	movs	r3, #16
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e2:	e0b0      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80089e4:	2320      	movs	r3, #32
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ea:	e0ac      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80089ec:	2340      	movs	r3, #64	; 0x40
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f2:	e0a8      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80089f4:	2380      	movs	r3, #128	; 0x80
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fa:	e0a4      	b.n	8008b46 <UART_SetConfig+0x5a6>
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a8f      	ldr	r2, [pc, #572]	; (8008c40 <UART_SetConfig+0x6a0>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d130      	bne.n	8008a68 <UART_SetConfig+0x4c8>
 8008a06:	4b8d      	ldr	r3, [pc, #564]	; (8008c3c <UART_SetConfig+0x69c>)
 8008a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	2b05      	cmp	r3, #5
 8008a10:	d826      	bhi.n	8008a60 <UART_SetConfig+0x4c0>
 8008a12:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <UART_SetConfig+0x478>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a31 	.word	0x08008a31
 8008a1c:	08008a39 	.word	0x08008a39
 8008a20:	08008a41 	.word	0x08008a41
 8008a24:	08008a49 	.word	0x08008a49
 8008a28:	08008a51 	.word	0x08008a51
 8008a2c:	08008a59 	.word	0x08008a59
 8008a30:	2300      	movs	r3, #0
 8008a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a36:	e086      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008a38:	2304      	movs	r3, #4
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3e:	e082      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008a40:	2308      	movs	r3, #8
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a46:	e07e      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008a48:	2310      	movs	r3, #16
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4e:	e07a      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008a50:	2320      	movs	r3, #32
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a56:	e076      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008a58:	2340      	movs	r3, #64	; 0x40
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5e:	e072      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008a60:	2380      	movs	r3, #128	; 0x80
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a66:	e06e      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a75      	ldr	r2, [pc, #468]	; (8008c44 <UART_SetConfig+0x6a4>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d130      	bne.n	8008ad4 <UART_SetConfig+0x534>
 8008a72:	4b72      	ldr	r3, [pc, #456]	; (8008c3c <UART_SetConfig+0x69c>)
 8008a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	2b05      	cmp	r3, #5
 8008a7c:	d826      	bhi.n	8008acc <UART_SetConfig+0x52c>
 8008a7e:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <UART_SetConfig+0x4e4>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008a9d 	.word	0x08008a9d
 8008a88:	08008aa5 	.word	0x08008aa5
 8008a8c:	08008aad 	.word	0x08008aad
 8008a90:	08008ab5 	.word	0x08008ab5
 8008a94:	08008abd 	.word	0x08008abd
 8008a98:	08008ac5 	.word	0x08008ac5
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa2:	e050      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008aa4:	2304      	movs	r3, #4
 8008aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aaa:	e04c      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008aac:	2308      	movs	r3, #8
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab2:	e048      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008ab4:	2310      	movs	r3, #16
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aba:	e044      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008abc:	2320      	movs	r3, #32
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac2:	e040      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008ac4:	2340      	movs	r3, #64	; 0x40
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aca:	e03c      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008acc:	2380      	movs	r3, #128	; 0x80
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad2:	e038      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a5b      	ldr	r2, [pc, #364]	; (8008c48 <UART_SetConfig+0x6a8>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d130      	bne.n	8008b40 <UART_SetConfig+0x5a0>
 8008ade:	4b57      	ldr	r3, [pc, #348]	; (8008c3c <UART_SetConfig+0x69c>)
 8008ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	2b05      	cmp	r3, #5
 8008ae8:	d826      	bhi.n	8008b38 <UART_SetConfig+0x598>
 8008aea:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <UART_SetConfig+0x550>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b09 	.word	0x08008b09
 8008af4:	08008b11 	.word	0x08008b11
 8008af8:	08008b19 	.word	0x08008b19
 8008afc:	08008b21 	.word	0x08008b21
 8008b00:	08008b29 	.word	0x08008b29
 8008b04:	08008b31 	.word	0x08008b31
 8008b08:	2302      	movs	r3, #2
 8008b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0e:	e01a      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008b10:	2304      	movs	r3, #4
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b16:	e016      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008b18:	2308      	movs	r3, #8
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1e:	e012      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008b20:	2310      	movs	r3, #16
 8008b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b26:	e00e      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008b28:	2320      	movs	r3, #32
 8008b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2e:	e00a      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008b30:	2340      	movs	r3, #64	; 0x40
 8008b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b36:	e006      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008b38:	2380      	movs	r3, #128	; 0x80
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3e:	e002      	b.n	8008b46 <UART_SetConfig+0x5a6>
 8008b40:	2380      	movs	r3, #128	; 0x80
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a3f      	ldr	r2, [pc, #252]	; (8008c48 <UART_SetConfig+0x6a8>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	f040 80f8 	bne.w	8008d42 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	dc46      	bgt.n	8008be8 <UART_SetConfig+0x648>
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	f2c0 8082 	blt.w	8008c64 <UART_SetConfig+0x6c4>
 8008b60:	3b02      	subs	r3, #2
 8008b62:	2b1e      	cmp	r3, #30
 8008b64:	d87e      	bhi.n	8008c64 <UART_SetConfig+0x6c4>
 8008b66:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <UART_SetConfig+0x5cc>)
 8008b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6c:	08008bef 	.word	0x08008bef
 8008b70:	08008c65 	.word	0x08008c65
 8008b74:	08008bf7 	.word	0x08008bf7
 8008b78:	08008c65 	.word	0x08008c65
 8008b7c:	08008c65 	.word	0x08008c65
 8008b80:	08008c65 	.word	0x08008c65
 8008b84:	08008c07 	.word	0x08008c07
 8008b88:	08008c65 	.word	0x08008c65
 8008b8c:	08008c65 	.word	0x08008c65
 8008b90:	08008c65 	.word	0x08008c65
 8008b94:	08008c65 	.word	0x08008c65
 8008b98:	08008c65 	.word	0x08008c65
 8008b9c:	08008c65 	.word	0x08008c65
 8008ba0:	08008c65 	.word	0x08008c65
 8008ba4:	08008c17 	.word	0x08008c17
 8008ba8:	08008c65 	.word	0x08008c65
 8008bac:	08008c65 	.word	0x08008c65
 8008bb0:	08008c65 	.word	0x08008c65
 8008bb4:	08008c65 	.word	0x08008c65
 8008bb8:	08008c65 	.word	0x08008c65
 8008bbc:	08008c65 	.word	0x08008c65
 8008bc0:	08008c65 	.word	0x08008c65
 8008bc4:	08008c65 	.word	0x08008c65
 8008bc8:	08008c65 	.word	0x08008c65
 8008bcc:	08008c65 	.word	0x08008c65
 8008bd0:	08008c65 	.word	0x08008c65
 8008bd4:	08008c65 	.word	0x08008c65
 8008bd8:	08008c65 	.word	0x08008c65
 8008bdc:	08008c65 	.word	0x08008c65
 8008be0:	08008c65 	.word	0x08008c65
 8008be4:	08008c57 	.word	0x08008c57
 8008be8:	2b40      	cmp	r3, #64	; 0x40
 8008bea:	d037      	beq.n	8008c5c <UART_SetConfig+0x6bc>
 8008bec:	e03a      	b.n	8008c64 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008bee:	f7fd fb5d 	bl	80062ac <HAL_RCCEx_GetD3PCLK1Freq>
 8008bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008bf4:	e03c      	b.n	8008c70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fd fb6c 	bl	80062d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c04:	e034      	b.n	8008c70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c06:	f107 0318 	add.w	r3, r7, #24
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fd fcb8 	bl	8006580 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c14:	e02c      	b.n	8008c70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c16:	4b09      	ldr	r3, [pc, #36]	; (8008c3c <UART_SetConfig+0x69c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0320 	and.w	r3, r3, #32
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d016      	beq.n	8008c50 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c22:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <UART_SetConfig+0x69c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	08db      	lsrs	r3, r3, #3
 8008c28:	f003 0303 	and.w	r3, r3, #3
 8008c2c:	4a07      	ldr	r2, [pc, #28]	; (8008c4c <UART_SetConfig+0x6ac>)
 8008c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c34:	e01c      	b.n	8008c70 <UART_SetConfig+0x6d0>
 8008c36:	bf00      	nop
 8008c38:	40011400 	.word	0x40011400
 8008c3c:	58024400 	.word	0x58024400
 8008c40:	40007800 	.word	0x40007800
 8008c44:	40007c00 	.word	0x40007c00
 8008c48:	58000c00 	.word	0x58000c00
 8008c4c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008c50:	4b9d      	ldr	r3, [pc, #628]	; (8008ec8 <UART_SetConfig+0x928>)
 8008c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c54:	e00c      	b.n	8008c70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c56:	4b9d      	ldr	r3, [pc, #628]	; (8008ecc <UART_SetConfig+0x92c>)
 8008c58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c5a:	e009      	b.n	8008c70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c62:	e005      	b.n	8008c70 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008c6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 81de 	beq.w	8009034 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	4a94      	ldr	r2, [pc, #592]	; (8008ed0 <UART_SetConfig+0x930>)
 8008c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c82:	461a      	mov	r2, r3
 8008c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c8a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	4613      	mov	r3, r2
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	4413      	add	r3, r2
 8008c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d305      	bcc.n	8008ca8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d903      	bls.n	8008cb0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008cae:	e1c1      	b.n	8009034 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	60bb      	str	r3, [r7, #8]
 8008cb6:	60fa      	str	r2, [r7, #12]
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	4a84      	ldr	r2, [pc, #528]	; (8008ed0 <UART_SetConfig+0x930>)
 8008cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	603b      	str	r3, [r7, #0]
 8008cc8:	607a      	str	r2, [r7, #4]
 8008cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008cd2:	f7f7 fb01 	bl	80002d8 <__aeabi_uldivmod>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4610      	mov	r0, r2
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f04f 0200 	mov.w	r2, #0
 8008ce2:	f04f 0300 	mov.w	r3, #0
 8008ce6:	020b      	lsls	r3, r1, #8
 8008ce8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cec:	0202      	lsls	r2, r0, #8
 8008cee:	6979      	ldr	r1, [r7, #20]
 8008cf0:	6849      	ldr	r1, [r1, #4]
 8008cf2:	0849      	lsrs	r1, r1, #1
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	eb12 0804 	adds.w	r8, r2, r4
 8008cfe:	eb43 0905 	adc.w	r9, r3, r5
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	469a      	mov	sl, r3
 8008d0a:	4693      	mov	fp, r2
 8008d0c:	4652      	mov	r2, sl
 8008d0e:	465b      	mov	r3, fp
 8008d10:	4640      	mov	r0, r8
 8008d12:	4649      	mov	r1, r9
 8008d14:	f7f7 fae0 	bl	80002d8 <__aeabi_uldivmod>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d26:	d308      	bcc.n	8008d3a <UART_SetConfig+0x79a>
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d2e:	d204      	bcs.n	8008d3a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d36:	60da      	str	r2, [r3, #12]
 8008d38:	e17c      	b.n	8009034 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d40:	e178      	b.n	8009034 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d4a:	f040 80c5 	bne.w	8008ed8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008d4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d52:	2b20      	cmp	r3, #32
 8008d54:	dc48      	bgt.n	8008de8 <UART_SetConfig+0x848>
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	db7b      	blt.n	8008e52 <UART_SetConfig+0x8b2>
 8008d5a:	2b20      	cmp	r3, #32
 8008d5c:	d879      	bhi.n	8008e52 <UART_SetConfig+0x8b2>
 8008d5e:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <UART_SetConfig+0x7c4>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008def 	.word	0x08008def
 8008d68:	08008df7 	.word	0x08008df7
 8008d6c:	08008e53 	.word	0x08008e53
 8008d70:	08008e53 	.word	0x08008e53
 8008d74:	08008dff 	.word	0x08008dff
 8008d78:	08008e53 	.word	0x08008e53
 8008d7c:	08008e53 	.word	0x08008e53
 8008d80:	08008e53 	.word	0x08008e53
 8008d84:	08008e0f 	.word	0x08008e0f
 8008d88:	08008e53 	.word	0x08008e53
 8008d8c:	08008e53 	.word	0x08008e53
 8008d90:	08008e53 	.word	0x08008e53
 8008d94:	08008e53 	.word	0x08008e53
 8008d98:	08008e53 	.word	0x08008e53
 8008d9c:	08008e53 	.word	0x08008e53
 8008da0:	08008e53 	.word	0x08008e53
 8008da4:	08008e1f 	.word	0x08008e1f
 8008da8:	08008e53 	.word	0x08008e53
 8008dac:	08008e53 	.word	0x08008e53
 8008db0:	08008e53 	.word	0x08008e53
 8008db4:	08008e53 	.word	0x08008e53
 8008db8:	08008e53 	.word	0x08008e53
 8008dbc:	08008e53 	.word	0x08008e53
 8008dc0:	08008e53 	.word	0x08008e53
 8008dc4:	08008e53 	.word	0x08008e53
 8008dc8:	08008e53 	.word	0x08008e53
 8008dcc:	08008e53 	.word	0x08008e53
 8008dd0:	08008e53 	.word	0x08008e53
 8008dd4:	08008e53 	.word	0x08008e53
 8008dd8:	08008e53 	.word	0x08008e53
 8008ddc:	08008e53 	.word	0x08008e53
 8008de0:	08008e53 	.word	0x08008e53
 8008de4:	08008e45 	.word	0x08008e45
 8008de8:	2b40      	cmp	r3, #64	; 0x40
 8008dea:	d02e      	beq.n	8008e4a <UART_SetConfig+0x8aa>
 8008dec:	e031      	b.n	8008e52 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dee:	f7fc f827 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8008df2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008df4:	e033      	b.n	8008e5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008df6:	f7fc f839 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8008dfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008dfc:	e02f      	b.n	8008e5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fd fa68 	bl	80062d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e0c:	e027      	b.n	8008e5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e0e:	f107 0318 	add.w	r3, r7, #24
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fd fbb4 	bl	8006580 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e1c:	e01f      	b.n	8008e5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e1e:	4b2d      	ldr	r3, [pc, #180]	; (8008ed4 <UART_SetConfig+0x934>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0320 	and.w	r3, r3, #32
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d009      	beq.n	8008e3e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e2a:	4b2a      	ldr	r3, [pc, #168]	; (8008ed4 <UART_SetConfig+0x934>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	08db      	lsrs	r3, r3, #3
 8008e30:	f003 0303 	and.w	r3, r3, #3
 8008e34:	4a24      	ldr	r2, [pc, #144]	; (8008ec8 <UART_SetConfig+0x928>)
 8008e36:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e3c:	e00f      	b.n	8008e5e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008e3e:	4b22      	ldr	r3, [pc, #136]	; (8008ec8 <UART_SetConfig+0x928>)
 8008e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e42:	e00c      	b.n	8008e5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e44:	4b21      	ldr	r3, [pc, #132]	; (8008ecc <UART_SetConfig+0x92c>)
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e48:	e009      	b.n	8008e5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e50:	e005      	b.n	8008e5e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 80e7 	beq.w	8009034 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	4a19      	ldr	r2, [pc, #100]	; (8008ed0 <UART_SetConfig+0x930>)
 8008e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e70:	461a      	mov	r2, r3
 8008e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e78:	005a      	lsls	r2, r3, #1
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	085b      	lsrs	r3, r3, #1
 8008e80:	441a      	add	r2, r3
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e8a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	2b0f      	cmp	r3, #15
 8008e90:	d916      	bls.n	8008ec0 <UART_SetConfig+0x920>
 8008e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e98:	d212      	bcs.n	8008ec0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	f023 030f 	bic.w	r3, r3, #15
 8008ea2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea6:	085b      	lsrs	r3, r3, #1
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	f003 0307 	and.w	r3, r3, #7
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008ebc:	60da      	str	r2, [r3, #12]
 8008ebe:	e0b9      	b.n	8009034 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ec6:	e0b5      	b.n	8009034 <UART_SetConfig+0xa94>
 8008ec8:	03d09000 	.word	0x03d09000
 8008ecc:	003d0900 	.word	0x003d0900
 8008ed0:	08009734 	.word	0x08009734
 8008ed4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ed8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008edc:	2b20      	cmp	r3, #32
 8008ede:	dc49      	bgt.n	8008f74 <UART_SetConfig+0x9d4>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	db7c      	blt.n	8008fde <UART_SetConfig+0xa3e>
 8008ee4:	2b20      	cmp	r3, #32
 8008ee6:	d87a      	bhi.n	8008fde <UART_SetConfig+0xa3e>
 8008ee8:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <UART_SetConfig+0x950>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f7b 	.word	0x08008f7b
 8008ef4:	08008f83 	.word	0x08008f83
 8008ef8:	08008fdf 	.word	0x08008fdf
 8008efc:	08008fdf 	.word	0x08008fdf
 8008f00:	08008f8b 	.word	0x08008f8b
 8008f04:	08008fdf 	.word	0x08008fdf
 8008f08:	08008fdf 	.word	0x08008fdf
 8008f0c:	08008fdf 	.word	0x08008fdf
 8008f10:	08008f9b 	.word	0x08008f9b
 8008f14:	08008fdf 	.word	0x08008fdf
 8008f18:	08008fdf 	.word	0x08008fdf
 8008f1c:	08008fdf 	.word	0x08008fdf
 8008f20:	08008fdf 	.word	0x08008fdf
 8008f24:	08008fdf 	.word	0x08008fdf
 8008f28:	08008fdf 	.word	0x08008fdf
 8008f2c:	08008fdf 	.word	0x08008fdf
 8008f30:	08008fab 	.word	0x08008fab
 8008f34:	08008fdf 	.word	0x08008fdf
 8008f38:	08008fdf 	.word	0x08008fdf
 8008f3c:	08008fdf 	.word	0x08008fdf
 8008f40:	08008fdf 	.word	0x08008fdf
 8008f44:	08008fdf 	.word	0x08008fdf
 8008f48:	08008fdf 	.word	0x08008fdf
 8008f4c:	08008fdf 	.word	0x08008fdf
 8008f50:	08008fdf 	.word	0x08008fdf
 8008f54:	08008fdf 	.word	0x08008fdf
 8008f58:	08008fdf 	.word	0x08008fdf
 8008f5c:	08008fdf 	.word	0x08008fdf
 8008f60:	08008fdf 	.word	0x08008fdf
 8008f64:	08008fdf 	.word	0x08008fdf
 8008f68:	08008fdf 	.word	0x08008fdf
 8008f6c:	08008fdf 	.word	0x08008fdf
 8008f70:	08008fd1 	.word	0x08008fd1
 8008f74:	2b40      	cmp	r3, #64	; 0x40
 8008f76:	d02e      	beq.n	8008fd6 <UART_SetConfig+0xa36>
 8008f78:	e031      	b.n	8008fde <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f7a:	f7fb ff61 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8008f7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f80:	e033      	b.n	8008fea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f82:	f7fb ff73 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8008f86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f88:	e02f      	b.n	8008fea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fd f9a2 	bl	80062d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f98:	e027      	b.n	8008fea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f9a:	f107 0318 	add.w	r3, r7, #24
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fd faee 	bl	8006580 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fa8:	e01f      	b.n	8008fea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008faa:	4b2d      	ldr	r3, [pc, #180]	; (8009060 <UART_SetConfig+0xac0>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0320 	and.w	r3, r3, #32
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d009      	beq.n	8008fca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008fb6:	4b2a      	ldr	r3, [pc, #168]	; (8009060 <UART_SetConfig+0xac0>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	08db      	lsrs	r3, r3, #3
 8008fbc:	f003 0303 	and.w	r3, r3, #3
 8008fc0:	4a28      	ldr	r2, [pc, #160]	; (8009064 <UART_SetConfig+0xac4>)
 8008fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fc8:	e00f      	b.n	8008fea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008fca:	4b26      	ldr	r3, [pc, #152]	; (8009064 <UART_SetConfig+0xac4>)
 8008fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fce:	e00c      	b.n	8008fea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fd0:	4b25      	ldr	r3, [pc, #148]	; (8009068 <UART_SetConfig+0xac8>)
 8008fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fd4:	e009      	b.n	8008fea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fdc:	e005      	b.n	8008fea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008fe8:	bf00      	nop
    }

    if (pclk != 0U)
 8008fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d021      	beq.n	8009034 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	4a1d      	ldr	r2, [pc, #116]	; (800906c <UART_SetConfig+0xacc>)
 8008ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffe:	fbb3 f2f2 	udiv	r2, r3, r2
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	085b      	lsrs	r3, r3, #1
 8009008:	441a      	add	r2, r3
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009012:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009016:	2b0f      	cmp	r3, #15
 8009018:	d909      	bls.n	800902e <UART_SetConfig+0xa8e>
 800901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009020:	d205      	bcs.n	800902e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009024:	b29a      	uxth	r2, r3
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	60da      	str	r2, [r3, #12]
 800902c:	e002      	b.n	8009034 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2201      	movs	r2, #1
 8009038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	2201      	movs	r2, #1
 8009040:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2200      	movs	r2, #0
 8009048:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2200      	movs	r2, #0
 800904e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009050:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009054:	4618      	mov	r0, r3
 8009056:	3748      	adds	r7, #72	; 0x48
 8009058:	46bd      	mov	sp, r7
 800905a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800905e:	bf00      	nop
 8009060:	58024400 	.word	0x58024400
 8009064:	03d09000 	.word	0x03d09000
 8009068:	003d0900 	.word	0x003d0900
 800906c:	08009734 	.word	0x08009734

08009070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00a      	beq.n	800909a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	430a      	orrs	r2, r1
 8009098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00a      	beq.n	80090bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	430a      	orrs	r2, r1
 80090ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c0:	f003 0304 	and.w	r3, r3, #4
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00a      	beq.n	80090de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	430a      	orrs	r2, r1
 80090dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e2:	f003 0308 	and.w	r3, r3, #8
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00a      	beq.n	8009100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	430a      	orrs	r2, r1
 80090fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009104:	f003 0310 	and.w	r3, r3, #16
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00a      	beq.n	8009122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	430a      	orrs	r2, r1
 8009120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009126:	f003 0320 	and.w	r3, r3, #32
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00a      	beq.n	8009144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01a      	beq.n	8009186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	430a      	orrs	r2, r1
 8009164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800916a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800916e:	d10a      	bne.n	8009186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	430a      	orrs	r2, r1
 8009184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00a      	beq.n	80091a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	430a      	orrs	r2, r1
 80091a6:	605a      	str	r2, [r3, #4]
  }
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b098      	sub	sp, #96	; 0x60
 80091b8:	af02      	add	r7, sp, #8
 80091ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091c4:	f7f8 f838 	bl	8001238 <HAL_GetTick>
 80091c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0308 	and.w	r3, r3, #8
 80091d4:	2b08      	cmp	r3, #8
 80091d6:	d12f      	bne.n	8009238 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091e0:	2200      	movs	r2, #0
 80091e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f88e 	bl	8009308 <UART_WaitOnFlagUntilTimeout>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d022      	beq.n	8009238 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fa:	e853 3f00 	ldrex	r3, [r3]
 80091fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009206:	653b      	str	r3, [r7, #80]	; 0x50
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	461a      	mov	r2, r3
 800920e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009210:	647b      	str	r3, [r7, #68]	; 0x44
 8009212:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009218:	e841 2300 	strex	r3, r2, [r1]
 800921c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800921e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e6      	bne.n	80091f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2220      	movs	r2, #32
 8009228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e063      	b.n	8009300 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0304 	and.w	r3, r3, #4
 8009242:	2b04      	cmp	r3, #4
 8009244:	d149      	bne.n	80092da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009246:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800924e:	2200      	movs	r2, #0
 8009250:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f857 	bl	8009308 <UART_WaitOnFlagUntilTimeout>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d03c      	beq.n	80092da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	e853 3f00 	ldrex	r3, [r3]
 800926c:	623b      	str	r3, [r7, #32]
   return(result);
 800926e:	6a3b      	ldr	r3, [r7, #32]
 8009270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009274:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800927e:	633b      	str	r3, [r7, #48]	; 0x30
 8009280:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009286:	e841 2300 	strex	r3, r2, [r1]
 800928a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1e6      	bne.n	8009260 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3308      	adds	r3, #8
 8009298:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f023 0301 	bic.w	r3, r3, #1
 80092a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3308      	adds	r3, #8
 80092b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092b2:	61fa      	str	r2, [r7, #28]
 80092b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	69b9      	ldr	r1, [r7, #24]
 80092b8:	69fa      	ldr	r2, [r7, #28]
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	617b      	str	r3, [r7, #20]
   return(result);
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e5      	bne.n	8009292 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e012      	b.n	8009300 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2220      	movs	r2, #32
 80092de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2220      	movs	r2, #32
 80092e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3758      	adds	r7, #88	; 0x58
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	603b      	str	r3, [r7, #0]
 8009314:	4613      	mov	r3, r2
 8009316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009318:	e049      	b.n	80093ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009320:	d045      	beq.n	80093ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009322:	f7f7 ff89 	bl	8001238 <HAL_GetTick>
 8009326:	4602      	mov	r2, r0
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	429a      	cmp	r2, r3
 8009330:	d302      	bcc.n	8009338 <UART_WaitOnFlagUntilTimeout+0x30>
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e048      	b.n	80093ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 0304 	and.w	r3, r3, #4
 8009346:	2b00      	cmp	r3, #0
 8009348:	d031      	beq.n	80093ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	f003 0308 	and.w	r3, r3, #8
 8009354:	2b08      	cmp	r3, #8
 8009356:	d110      	bne.n	800937a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2208      	movs	r2, #8
 800935e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 f839 	bl	80093d8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2208      	movs	r2, #8
 800936a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	e029      	b.n	80093ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009388:	d111      	bne.n	80093ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009392:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 f81f 	bl	80093d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2220      	movs	r2, #32
 800939e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e00f      	b.n	80093ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	69da      	ldr	r2, [r3, #28]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	4013      	ands	r3, r2
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	bf0c      	ite	eq
 80093be:	2301      	moveq	r3, #1
 80093c0:	2300      	movne	r3, #0
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	461a      	mov	r2, r3
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d0a6      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093d8:	b480      	push	{r7}
 80093da:	b095      	sub	sp, #84	; 0x54
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e8:	e853 3f00 	ldrex	r3, [r3]
 80093ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	461a      	mov	r2, r3
 80093fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093fe:	643b      	str	r3, [r7, #64]	; 0x40
 8009400:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009402:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009406:	e841 2300 	strex	r3, r2, [r1]
 800940a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1e6      	bne.n	80093e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	3308      	adds	r3, #8
 8009418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941a:	6a3b      	ldr	r3, [r7, #32]
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	61fb      	str	r3, [r7, #28]
   return(result);
 8009422:	69fa      	ldr	r2, [r7, #28]
 8009424:	4b1e      	ldr	r3, [pc, #120]	; (80094a0 <UART_EndRxTransfer+0xc8>)
 8009426:	4013      	ands	r3, r2
 8009428:	64bb      	str	r3, [r7, #72]	; 0x48
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	3308      	adds	r3, #8
 8009430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009432:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009434:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800943a:	e841 2300 	strex	r3, r2, [r1]
 800943e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1e5      	bne.n	8009412 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800944a:	2b01      	cmp	r3, #1
 800944c:	d118      	bne.n	8009480 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	e853 3f00 	ldrex	r3, [r3]
 800945a:	60bb      	str	r3, [r7, #8]
   return(result);
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	f023 0310 	bic.w	r3, r3, #16
 8009462:	647b      	str	r3, [r7, #68]	; 0x44
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	461a      	mov	r2, r3
 800946a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800946c:	61bb      	str	r3, [r7, #24]
 800946e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009470:	6979      	ldr	r1, [r7, #20]
 8009472:	69ba      	ldr	r2, [r7, #24]
 8009474:	e841 2300 	strex	r3, r2, [r1]
 8009478:	613b      	str	r3, [r7, #16]
   return(result);
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1e6      	bne.n	800944e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2220      	movs	r2, #32
 8009484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009494:	bf00      	nop
 8009496:	3754      	adds	r7, #84	; 0x54
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	effffffe 	.word	0xeffffffe

080094a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d101      	bne.n	80094ba <HAL_UARTEx_DisableFifoMode+0x16>
 80094b6:	2302      	movs	r3, #2
 80094b8:	e027      	b.n	800950a <HAL_UARTEx_DisableFifoMode+0x66>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2224      	movs	r2, #36	; 0x24
 80094c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f022 0201 	bic.w	r2, r2, #1
 80094e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80094e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2220      	movs	r2, #32
 80094fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009526:	2b01      	cmp	r3, #1
 8009528:	d101      	bne.n	800952e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800952a:	2302      	movs	r3, #2
 800952c:	e02d      	b.n	800958a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2224      	movs	r2, #36	; 0x24
 800953a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 0201 	bic.w	r2, r2, #1
 8009554:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f850 	bl	8009610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2220      	movs	r2, #32
 800957c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b084      	sub	sp, #16
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d101      	bne.n	80095aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095a6:	2302      	movs	r3, #2
 80095a8:	e02d      	b.n	8009606 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2224      	movs	r2, #36	; 0x24
 80095b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f022 0201 	bic.w	r2, r2, #1
 80095d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f812 	bl	8009610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800961c:	2b00      	cmp	r3, #0
 800961e:	d108      	bne.n	8009632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009630:	e031      	b.n	8009696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009632:	2310      	movs	r3, #16
 8009634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009636:	2310      	movs	r3, #16
 8009638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	0e5b      	lsrs	r3, r3, #25
 8009642:	b2db      	uxtb	r3, r3
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	0f5b      	lsrs	r3, r3, #29
 8009652:	b2db      	uxtb	r3, r3
 8009654:	f003 0307 	and.w	r3, r3, #7
 8009658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800965a:	7bbb      	ldrb	r3, [r7, #14]
 800965c:	7b3a      	ldrb	r2, [r7, #12]
 800965e:	4911      	ldr	r1, [pc, #68]	; (80096a4 <UARTEx_SetNbDataToProcess+0x94>)
 8009660:	5c8a      	ldrb	r2, [r1, r2]
 8009662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009666:	7b3a      	ldrb	r2, [r7, #12]
 8009668:	490f      	ldr	r1, [pc, #60]	; (80096a8 <UARTEx_SetNbDataToProcess+0x98>)
 800966a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800966c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009670:	b29a      	uxth	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	7b7a      	ldrb	r2, [r7, #13]
 800967c:	4909      	ldr	r1, [pc, #36]	; (80096a4 <UARTEx_SetNbDataToProcess+0x94>)
 800967e:	5c8a      	ldrb	r2, [r1, r2]
 8009680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009684:	7b7a      	ldrb	r2, [r7, #13]
 8009686:	4908      	ldr	r1, [pc, #32]	; (80096a8 <UARTEx_SetNbDataToProcess+0x98>)
 8009688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800968a:	fb93 f3f2 	sdiv	r3, r3, r2
 800968e:	b29a      	uxth	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009696:	bf00      	nop
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	0800974c 	.word	0x0800974c
 80096a8:	08009754 	.word	0x08009754

080096ac <memset>:
 80096ac:	4402      	add	r2, r0
 80096ae:	4603      	mov	r3, r0
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d100      	bne.n	80096b6 <memset+0xa>
 80096b4:	4770      	bx	lr
 80096b6:	f803 1b01 	strb.w	r1, [r3], #1
 80096ba:	e7f9      	b.n	80096b0 <memset+0x4>

080096bc <__libc_init_array>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	4d0d      	ldr	r5, [pc, #52]	; (80096f4 <__libc_init_array+0x38>)
 80096c0:	4c0d      	ldr	r4, [pc, #52]	; (80096f8 <__libc_init_array+0x3c>)
 80096c2:	1b64      	subs	r4, r4, r5
 80096c4:	10a4      	asrs	r4, r4, #2
 80096c6:	2600      	movs	r6, #0
 80096c8:	42a6      	cmp	r6, r4
 80096ca:	d109      	bne.n	80096e0 <__libc_init_array+0x24>
 80096cc:	4d0b      	ldr	r5, [pc, #44]	; (80096fc <__libc_init_array+0x40>)
 80096ce:	4c0c      	ldr	r4, [pc, #48]	; (8009700 <__libc_init_array+0x44>)
 80096d0:	f000 f818 	bl	8009704 <_init>
 80096d4:	1b64      	subs	r4, r4, r5
 80096d6:	10a4      	asrs	r4, r4, #2
 80096d8:	2600      	movs	r6, #0
 80096da:	42a6      	cmp	r6, r4
 80096dc:	d105      	bne.n	80096ea <__libc_init_array+0x2e>
 80096de:	bd70      	pop	{r4, r5, r6, pc}
 80096e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e4:	4798      	blx	r3
 80096e6:	3601      	adds	r6, #1
 80096e8:	e7ee      	b.n	80096c8 <__libc_init_array+0xc>
 80096ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ee:	4798      	blx	r3
 80096f0:	3601      	adds	r6, #1
 80096f2:	e7f2      	b.n	80096da <__libc_init_array+0x1e>
 80096f4:	08009764 	.word	0x08009764
 80096f8:	08009764 	.word	0x08009764
 80096fc:	08009764 	.word	0x08009764
 8009700:	08009768 	.word	0x08009768

08009704 <_init>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	bf00      	nop
 8009708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970a:	bc08      	pop	{r3}
 800970c:	469e      	mov	lr, r3
 800970e:	4770      	bx	lr

08009710 <_fini>:
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009712:	bf00      	nop
 8009714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009716:	bc08      	pop	{r3}
 8009718:	469e      	mov	lr, r3
 800971a:	4770      	bx	lr
